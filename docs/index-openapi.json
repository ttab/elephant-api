{
  "components": {
    "schemas": {
      "elephant.index.Cluster": {
        "properties": {
          "endpoint": {
            "description": "Endpoint for the cluster.",
            "type": "string"
          },
          "index_set_count": {
            "description": "Number of index sets in the cluster.",
            "type": "integer"
          },
          "name": {
            "description": "Name used to identify the cluster.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.DeleteClusterRequest": {
        "properties": {
          "name": {
            "description": "Name of the cluster to delete.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.DeleteClusterResponse": {
        "type": "object"
      },
      "elephant.index.EnabledFilter": {
        "enum": [
          "STATUS_UNSPECIFIED",
          "STATUS_ENABLED",
          "STATUS_DISABLED"
        ],
        "type": "string"
      },
      "elephant.index.IndexSet": {
        "properties": {
          "active": {
            "description": "Active status of the index set.",
            "type": "boolean"
          },
          "cluster": {
            "description": "Cluster that the index set has been created in.",
            "type": "string"
          },
          "enabled": {
            "description": "Enabled status of the index set.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the index set.",
            "type": "string"
          },
          "position": {
            "description": "Position in the repository content log.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "elephant.index.ListClustersRequest": {
        "type": "object"
      },
      "elephant.index.ListClustersResponse": {
        "properties": {
          "clusters": {
            "items": {
              "$ref": "#/components/schemas/elephant.index.Cluster"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "elephant.index.ListIndexSetsRequest": {
        "properties": {
          "cluster": {
            "description": "Cluster can be used filter by cluster.",
            "type": "string"
          },
          "cursor": {
            "description": "Cursor to the page that should be returned. Omit to get the first page.",
            "type": "string"
          },
          "only_active": {
            "description": "OnlyActive only returns the currently active index set.",
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/elephant.index.EnabledFilter"
          }
        },
        "type": "object"
      },
      "elephant.index.ListIndexSetsResponse": {
        "properties": {
          "index_sets": {
            "description": "IndexSets that matched the criteria.",
            "items": {
              "$ref": "#/components/schemas/elephant.index.IndexSet"
            },
            "type": "array"
          },
          "next_page": {
            "description": "NextPage cursor to use to get the next page of index sets. Empty if no more index sets exist.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.PartialReindexRequest": {
        "properties": {
          "index_set": {
            "description": "IndexSet to re-index.",
            "type": "string"
          },
          "position": {
            "description": "Position to start from.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "elephant.index.PartialReindexResponse": {
        "type": "object"
      },
      "elephant.index.RegisterClusterRequest": {
        "properties": {
          "endpoint": {
            "description": "Endpoint for the cluster.",
            "type": "string"
          },
          "name": {
            "description": "Name used to identify the cluster.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.RegisterClusterResponse": {
        "type": "object"
      },
      "elephant.index.ReindexRequest": {
        "properties": {
          "cluster": {
            "description": "Cluster that we should re-index set to.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.ReindexResponse": {
        "properties": {
          "name": {
            "description": "Name of the new index set.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.SetIndexSetStatusRequest": {
        "properties": {
          "active": {
            "description": "Active means that search requests are being routed to this index set. There is always exactly one active index set at a time. Setting an index set to active will deactivate but not disable the currently active index set.",
            "type": "boolean"
          },
          "enabled": {
            "description": "Enabled means that documents should index to the index set. Disabling an index set will only pause index seting, and it can later be resumed. Disabling an index set does not deactivate it.",
            "type": "boolean"
          },
          "force_active": {
            "description": "ForceActive is used to force the activation of an index set that lags more than 100 events behind any other index set.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the index set to set the status of.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.SetIndexSetStatusResponse": {
        "type": "object"
      },
      "newsdoc.Block": {
        "description": "Block is the building block for data embedded in documents. It is used for both content, links and metadata. Blocks have can be nested, but that's nothing to strive for, keep it simple.",
        "properties": {
          "content": {
            "description": "Content is used to embed content blocks.",
            "items": {
              "$ref": "#/components/schemas/newsdoc.Block"
            },
            "type": "array"
          },
          "contenttype": {
            "description": "ContentType is used to describe the content type of the block/linked entity if it differs from the type of the block.",
            "type": "string"
          },
          "data": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Data contains block data.",
            "type": "object"
          },
          "id": {
            "description": "ID is the block ID,",
            "type": "string"
          },
          "links": {
            "description": "Links are used to link to other resources and documents.",
            "items": {
              "$ref": "#/components/schemas/newsdoc.Block"
            },
            "type": "array"
          },
          "meta": {
            "description": "Meta is used to embed metadata",
            "items": {
              "$ref": "#/components/schemas/newsdoc.Block"
            },
            "type": "array"
          },
          "name": {
            "description": "Name is a name for the block. An alternative to \"rel\" when relationship is a term that doesn't fit.",
            "type": "string"
          },
          "rel": {
            "description": "Rel describes the relationship to the document/parent entity.",
            "type": "string"
          },
          "role": {
            "description": "Role is used either as an alternative to rel, or for nuancing the relationship.",
            "type": "string"
          },
          "title": {
            "description": "Title is the title/headline of the block, typically used in the presentation of the block.",
            "type": "string"
          },
          "type": {
            "description": "Type is the type of the block",
            "type": "string"
          },
          "uri": {
            "description": "URI is used to reference another entity in a document.",
            "type": "string"
          },
          "url": {
            "description": "URL is a browseable URL for the the block.",
            "type": "string"
          },
          "uuid": {
            "description": "UUID is used to reference another Document in a block.",
            "type": "string"
          },
          "value": {
            "description": "Value is a value for the block. Useful when we want to store a primitive value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "newsdoc.Document": {
        "description": "Document is a NewsDoc document.",
        "properties": {
          "content": {
            "description": "Content is the content of the document, this is essentially what gets rendered on the page when you view a document.",
            "items": {
              "$ref": "#/components/schemas/newsdoc.Block"
            },
            "type": "array"
          },
          "language": {
            "description": "Language is the language used in the document as an IETF language tag. F.ex. \"en\", \"en-UK\", \"es\", or \"sv-SE\".",
            "type": "string"
          },
          "links": {
            "description": "Links are links to other resources and entities. This could be links to topics, categories and subjects for the document, or credited authors.",
            "items": {
              "$ref": "#/components/schemas/newsdoc.Block"
            },
            "type": "array"
          },
          "meta": {
            "description": "Meta is the metadata for a document, this could be things like teasers, open graph data, newsvalues.",
            "items": {
              "$ref": "#/components/schemas/newsdoc.Block"
            },
            "type": "array"
          },
          "title": {
            "description": "Title is the title of the document, can be used as the document name, or the headline when the document is displayed.",
            "type": "string"
          },
          "type": {
            "description": "Type is the content type of the document.",
            "type": "string"
          },
          "uri": {
            "description": "URI identifies the document (in a more human-readable way than the UUID).",
            "type": "string"
          },
          "url": {
            "description": "URL is the browseable location of the document (if any).",
            "type": "string"
          },
          "uuid": {
            "description": "UUID is a unique ID for the document, this can for example be a random v4 UUID, or a URI-derived v5 UUID.",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearer": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "title": "index API",
    "version": "v0.0.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/twirp/elephant.index.Management/DeleteCluster": {
      "post": {
        "description": "DeleteCluster deletes a registered cluster. A cluster cannot be deleted as long as it has associated index sets.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.DeleteClusterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.DeleteClusterResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "DeleteCluster",
        "tags": [
          "Management"
        ]
      }
    },
    "/twirp/elephant.index.Management/ListClusters": {
      "post": {
        "description": "ListClusters returns a list of clusters together with information about the number of index sets they contain.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.ListClustersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.ListClustersResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "ListClusters",
        "tags": [
          "Management"
        ]
      }
    },
    "/twirp/elephant.index.Management/ListIndexSets": {
      "post": {
        "description": "ListIndexSets lists the available index set, with optional filtering.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.ListIndexSetsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.ListIndexSetsResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "ListIndexSets",
        "tags": [
          "Management"
        ]
      }
    },
    "/twirp/elephant.index.Management/PartialReindex": {
      "post": {
        "description": "PartialReindex restarts an existing index set from a given point in the repository eventlog.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.PartialReindexRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.PartialReindexResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "PartialReindex",
        "tags": [
          "Management"
        ]
      }
    },
    "/twirp/elephant.index.Management/RegisterCluster": {
      "post": {
        "description": "RegisterCluster for use with index sets.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.RegisterClusterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.RegisterClusterResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "RegisterCluster",
        "tags": [
          "Management"
        ]
      }
    },
    "/twirp/elephant.index.Management/Reindex": {
      "post": {
        "description": "Reindex set creates a new index set in the specified cluster and starts indexing documents to it.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.ReindexRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.ReindexResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reindex",
        "tags": [
          "Management"
        ]
      }
    },
    "/twirp/elephant.index.Management/SetIndexSetStatus": {
      "post": {
        "description": "SetIndexSetStatus is used to change the status of an index set.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.SetIndexSetStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.SetIndexSetStatusResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "SetIndexSetStatus",
        "tags": [
          "Management"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Management"
    }
  ]
}
