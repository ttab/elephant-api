{
  "components": {
    "schemas": {
      "elephant.index.BoolQueryV1": {
        "properties": {
          "filter": {
            "items": {
              "$ref": "#/components/schemas/elephant.index.QueryV1"
            },
            "type": "array"
          },
          "must": {
            "items": {
              "$ref": "#/components/schemas/elephant.index.QueryV1"
            },
            "type": "array"
          },
          "must_not": {
            "items": {
              "$ref": "#/components/schemas/elephant.index.QueryV1"
            },
            "type": "array"
          },
          "should": {
            "items": {
              "$ref": "#/components/schemas/elephant.index.QueryV1"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "elephant.index.Cluster": {
        "properties": {
          "auth": {
            "$ref": "#/components/schemas/elephant.index.ClusterAuth"
          },
          "endpoint": {
            "description": "Endpoint for the cluster.",
            "type": "string"
          },
          "index_set_count": {
            "description": "Number of index sets in the cluster.",
            "type": "integer"
          },
          "name": {
            "description": "Name used to identify the cluster.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.ClusterAuth": {
        "properties": {
          "iam": {
            "description": "IAM authentication.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "elephant.index.DeleteClusterRequest": {
        "properties": {
          "name": {
            "description": "Name of the cluster to delete.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.DeleteClusterResponse": {
        "type": "object"
      },
      "elephant.index.DeleteIndexSetRequest": {
        "properties": {
          "name": {
            "description": "Name of the index set to delete.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.DeleteIndexSetResponse": {
        "type": "object"
      },
      "elephant.index.EnabledFilter": {
        "enum": [
          "STATUS_UNSPECIFIED",
          "STATUS_ENABLED",
          "STATUS_DISABLED"
        ],
        "type": "string"
      },
      "elephant.index.EndSubscriptionRequest": {
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "elephant.index.EndSubscriptionResponse": {
        "type": "object"
      },
      "elephant.index.FieldValuesV1": {
        "properties": {
          "values": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "elephant.index.GetMappingsRequestV1": {
        "properties": {
          "document_type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.GetMappingsResponseV1": {
        "properties": {
          "properties": {
            "items": {
              "$ref": "#/components/schemas/elephant.index.MappingPropertyV1"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "elephant.index.HitV1": {
        "properties": {
          "document": {
            "$ref": "#/components/schemas/newsdoc.Document"
          },
          "fields": {
            "additionalProperties": {
              "$ref": "#/components/schemas/elephant.index.FieldValuesV1"
            },
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "score": {
            "type": "number"
          },
          "sort": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "source": {
            "additionalProperties": {
              "$ref": "#/components/schemas/elephant.index.FieldValuesV1"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "elephant.index.HitsTotalV1": {
        "properties": {
          "relation": {
            "type": "string"
          },
          "value": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "elephant.index.HitsV1": {
        "properties": {
          "hits": {
            "items": {
              "$ref": "#/components/schemas/elephant.index.HitV1"
            },
            "type": "array"
          },
          "max_score": {
            "type": "number"
          },
          "total": {
            "$ref": "#/components/schemas/elephant.index.HitsTotalV1"
          }
        },
        "type": "object"
      },
      "elephant.index.IndexSet": {
        "properties": {
          "active": {
            "description": "Active status of the index set.",
            "type": "boolean"
          },
          "cluster": {
            "description": "Cluster that the index set has been created in.",
            "type": "string"
          },
          "enabled": {
            "description": "Enabled status of the index set.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the index set.",
            "type": "string"
          },
          "position": {
            "description": "Position in the repository content log.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "elephant.index.ListClustersRequest": {
        "type": "object"
      },
      "elephant.index.ListClustersResponse": {
        "properties": {
          "clusters": {
            "items": {
              "$ref": "#/components/schemas/elephant.index.Cluster"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "elephant.index.ListIndexSetsRequest": {
        "properties": {
          "cluster": {
            "description": "Cluster can be used to filter by cluster.",
            "type": "string"
          },
          "cursor": {
            "description": "Cursor to the page that should be returned. Omit to get the first page.",
            "type": "string"
          },
          "only_active": {
            "description": "OnlyActive only returns the currently active index set.",
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/elephant.index.EnabledFilter"
          }
        },
        "type": "object"
      },
      "elephant.index.ListIndexSetsResponse": {
        "properties": {
          "index_sets": {
            "description": "IndexSets that matched the criteria.",
            "items": {
              "$ref": "#/components/schemas/elephant.index.IndexSet"
            },
            "type": "array"
          },
          "next_page": {
            "description": "NextPage cursor to use to get the next page of index sets. Empty if no more index sets exist.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.MappingFieldV1": {
        "properties": {
          "name": {
            "description": "Name of the field.",
            "type": "string"
          },
          "type": {
            "description": "Type of the field. Does not exactly correspond to Open Search types, but represents the logical type.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.MappingPropertyV1": {
        "properties": {
          "fields": {
            "description": "Fields used for alternate indexing metods for the property.",
            "items": {
              "$ref": "#/components/schemas/elephant.index.MappingFieldV1"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the property.",
            "type": "string"
          },
          "path": {
            "description": "Path used for alias properties.",
            "type": "string"
          },
          "type": {
            "description": "Type of the property.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.MatchAllQueryV1": {
        "type": "object"
      },
      "elephant.index.MatchPhraseQueryV1": {
        "properties": {
          "field": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.MatchQueryV1": {
        "properties": {
          "boost": {
            "type": "number"
          },
          "field": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.MultiMatchQueryV1": {
        "properties": {
          "boolean_and": {
            "description": "BooleanAnd can be used to require all terms to match.",
            "type": "boolean"
          },
          "boost": {
            "type": "number"
          },
          "fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "minimum_should_match": {
            "description": "MinimumShouldMatch if the query string contains multiple search terms and you use the or operator, the number of terms that need to match for the document to be considered a match. See https://opensearch.org/docs/latest/query-dsl/minimum-should-match/",
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "tie_breaker": {
            "type": "number"
          },
          "type": {
            "description": "Type is the multi-match query type. Valid values are best_fields, most_fields, cross_fields, phrase, phrase_prefix, bool_prefix. Default is best_fields.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.PartialReindexRequest": {
        "properties": {
          "index_set": {
            "description": "IndexSet to re-index.",
            "type": "string"
          },
          "position": {
            "description": "Position to start from.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "elephant.index.PartialReindexResponse": {
        "type": "object"
      },
      "elephant.index.PollSubscriptionRequest": {
        "properties": {
          "batch_delay_ms": {
            "description": "BatchDelayMS is the number of milliseconds to wait for more items after the first. Optional, defaults to 200ms.",
            "type": "integer"
          },
          "max_wait_ms": {
            "description": "MaxWaitMS is the maximum time to wait before returning an empty response. Optional, defaults to 10s.",
            "type": "integer"
          },
          "subscriptions": {
            "description": "Subscriptions to poll.",
            "items": {
              "$ref": "#/components/schemas/elephant.index.SubscriptionReference"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "elephant.index.PollSubscriptionResponse": {
        "properties": {
          "result": {
            "description": "Results will be empty if the poll timed out.",
            "items": {
              "$ref": "#/components/schemas/elephant.index.SubscriptionPollResult"
            },
            "type": "array"
          },
          "unknown_subscriptions": {
            "description": "List of subscriptions that are unknown, have expired f.ex.",
            "items": {
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "elephant.index.PrefixQueryV1": {
        "properties": {
          "boost": {
            "type": "number"
          },
          "case_insensitive": {
            "type": "boolean"
          },
          "field": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.QueryRequestV1": {
        "properties": {
          "document_type": {
            "type": "string"
          },
          "fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "from": {
            "type": "integer"
          },
          "language": {
            "type": "string"
          },
          "load_document": {
            "description": "LoadDocument will load the current version of the document from the repository and include it with the search response.",
            "type": "boolean"
          },
          "query": {
            "$ref": "#/components/schemas/elephant.index.QueryV1"
          },
          "search_after": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "shared": {
            "description": "Shared performs the query without the identity of the user, allows for better query caching and shared subscriptions.",
            "type": "boolean"
          },
          "size": {
            "type": "integer"
          },
          "sort": {
            "items": {
              "$ref": "#/components/schemas/elephant.index.SortingV1"
            },
            "type": "array"
          },
          "source": {
            "type": "boolean"
          },
          "subscribe": {
            "description": "Subscribe starts a subscription for the query.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "elephant.index.QueryResponseV1": {
        "properties": {
          "hits": {
            "$ref": "#/components/schemas/elephant.index.HitsV1"
          },
          "shards": {
            "$ref": "#/components/schemas/elephant.index.ShardsV1"
          },
          "subscription": {
            "$ref": "#/components/schemas/elephant.index.SubscriptionReference"
          },
          "timed_out": {
            "type": "boolean"
          },
          "took": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "elephant.index.QueryV1": {
        "properties": {
          "bool": {
            "$ref": "#/components/schemas/elephant.index.BoolQueryV1"
          },
          "exists": {
            "type": "string"
          },
          "match": {
            "$ref": "#/components/schemas/elephant.index.MatchQueryV1"
          },
          "match_all": {
            "$ref": "#/components/schemas/elephant.index.MatchAllQueryV1"
          },
          "match_phrase": {
            "$ref": "#/components/schemas/elephant.index.MatchPhraseQueryV1"
          },
          "multi_match": {
            "$ref": "#/components/schemas/elephant.index.MultiMatchQueryV1"
          },
          "prefix": {
            "$ref": "#/components/schemas/elephant.index.PrefixQueryV1"
          },
          "query_string": {
            "type": "string"
          },
          "range": {
            "$ref": "#/components/schemas/elephant.index.RangeQueryV1"
          },
          "term": {
            "$ref": "#/components/schemas/elephant.index.TermQueryV1"
          },
          "terms": {
            "$ref": "#/components/schemas/elephant.index.TermsQueryV1"
          }
        },
        "type": "object"
      },
      "elephant.index.RangeQueryV1": {
        "properties": {
          "field": {
            "type": "string"
          },
          "gt": {
            "type": "string"
          },
          "gte": {
            "type": "string"
          },
          "lt": {
            "type": "string"
          },
          "lte": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.RegisterClusterAuth": {
        "properties": {
          "iam": {
            "description": "IAM authentication.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "elephant.index.RegisterClusterRequest": {
        "properties": {
          "auth": {
            "$ref": "#/components/schemas/elephant.index.RegisterClusterAuth"
          },
          "endpoint": {
            "description": "Endpoint for the cluster.",
            "type": "string"
          },
          "name": {
            "description": "Name used to identify the cluster.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.RegisterClusterResponse": {
        "type": "object"
      },
      "elephant.index.ReindexRequest": {
        "properties": {
          "cluster": {
            "description": "Cluster that we should re-index set to.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.ReindexResponse": {
        "properties": {
          "name": {
            "description": "Name of the new index set.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.SetIndexSetStatusRequest": {
        "properties": {
          "active": {
            "description": "Active means that search requests are being routed to this index set. There is always exactly one active index set at a time. Setting an index set to active will deactivate but not disable the currently active index set.",
            "type": "boolean"
          },
          "enabled": {
            "description": "Enabled means that documents should index to the index set. Disabling an index set will only pause index seting, and it can later be resumed. Disabling an index set does not deactivate it.",
            "type": "boolean"
          },
          "force_active": {
            "description": "ForceActive is used to force the activation of an index set that lags more than 10 events behind the currently active set.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the index set to set the status of.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.SetIndexSetStatusResponse": {
        "type": "object"
      },
      "elephant.index.ShardsV1": {
        "properties": {
          "failed": {
            "type": "integer"
          },
          "skipped": {
            "type": "integer"
          },
          "successful": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "elephant.index.SortingV1": {
        "properties": {
          "desc": {
            "type": "boolean"
          },
          "field": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.SubscriptionItem": {
        "properties": {
          "document": {
            "$ref": "#/components/schemas/newsdoc.Document"
          },
          "fields": {
            "additionalProperties": {
              "$ref": "#/components/schemas/elephant.index.FieldValuesV1"
            },
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "match": {
            "type": "boolean"
          },
          "source": {
            "additionalProperties": {
              "$ref": "#/components/schemas/elephant.index.FieldValuesV1"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "elephant.index.SubscriptionPollResult": {
        "properties": {
          "items": {
            "description": "Items that matched or stopped matching the subscription.",
            "items": {
              "$ref": "#/components/schemas/elephant.index.SubscriptionItem"
            },
            "type": "array"
          },
          "subscription": {
            "$ref": "#/components/schemas/elephant.index.SubscriptionReference"
          }
        },
        "type": "object"
      },
      "elephant.index.SubscriptionReference": {
        "properties": {
          "cursor": {
            "description": "Cursor for current subscription position.",
            "type": "integer"
          },
          "id": {
            "description": "ID of the subscription.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "elephant.index.TermQueryV1": {
        "properties": {
          "boost": {
            "type": "number"
          },
          "field": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "elephant.index.TermsQueryV1": {
        "properties": {
          "boost": {
            "type": "number"
          },
          "field": {
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "newsdoc.Block": {
        "description": "Block is the building block for data embedded in documents. It is used for both content, links and metadata. Blocks have can be nested, but that's nothing to strive for, keep it simple.",
        "properties": {
          "content": {
            "description": "Content is used to embed content blocks.",
            "items": {
              "$ref": "#/components/schemas/newsdoc.Block"
            },
            "type": "array"
          },
          "contenttype": {
            "description": "ContentType is used to describe the content type of the block/linked entity if it differs from the type of the block.",
            "type": "string"
          },
          "data": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Data contains block data.",
            "type": "object"
          },
          "id": {
            "description": "ID is the block ID,",
            "type": "string"
          },
          "links": {
            "description": "Links are used to link to other resources and documents.",
            "items": {
              "$ref": "#/components/schemas/newsdoc.Block"
            },
            "type": "array"
          },
          "meta": {
            "description": "Meta is used to embed metadata",
            "items": {
              "$ref": "#/components/schemas/newsdoc.Block"
            },
            "type": "array"
          },
          "name": {
            "description": "Name is a name for the block. An alternative to \"rel\" when relationship is a term that doesn't fit.",
            "type": "string"
          },
          "rel": {
            "description": "Rel describes the relationship to the document/parent entity.",
            "type": "string"
          },
          "role": {
            "description": "Role is used either as an alternative to rel, or for nuancing the relationship.",
            "type": "string"
          },
          "sensitivity": {
            "description": "Sensitivity can be use to communicate how the information in a block can be handled. It could f.ex. be set to \"internal\", to show that it contains information that must be removed or transformed before publishing.",
            "type": "string"
          },
          "title": {
            "description": "Title is the title/headline of the block, typically used in the presentation of the block.",
            "type": "string"
          },
          "type": {
            "description": "Type is the type of the block",
            "type": "string"
          },
          "uri": {
            "description": "URI is used to reference another entity in a document.",
            "type": "string"
          },
          "url": {
            "description": "URL is a browseable URL for the the block.",
            "type": "string"
          },
          "uuid": {
            "description": "UUID is used to reference another Document in a block.",
            "type": "string"
          },
          "value": {
            "description": "Value is a value for the block. Useful when we want to store a primitive value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "newsdoc.Document": {
        "description": "Document is a NewsDoc document.",
        "properties": {
          "content": {
            "description": "Content is the content of the document, this is essentially what gets rendered on the page when you view a document.",
            "items": {
              "$ref": "#/components/schemas/newsdoc.Block"
            },
            "type": "array"
          },
          "language": {
            "description": "Language is the language used in the document as an IETF language tag. F.ex. \"en\", \"en-UK\", \"es\", or \"sv-SE\".",
            "type": "string"
          },
          "links": {
            "description": "Links are links to other resources and entities. This could be links to topics, categories and subjects for the document, or credited authors.",
            "items": {
              "$ref": "#/components/schemas/newsdoc.Block"
            },
            "type": "array"
          },
          "meta": {
            "description": "Meta is the metadata for a document, this could be things like teasers, open graph data, newsvalues.",
            "items": {
              "$ref": "#/components/schemas/newsdoc.Block"
            },
            "type": "array"
          },
          "title": {
            "description": "Title is the title of the document, can be used as the document name, or the headline when the document is displayed.",
            "type": "string"
          },
          "type": {
            "description": "Type is the content type of the document.",
            "type": "string"
          },
          "uri": {
            "description": "URI identifies the document (in a more human-readable way than the UUID).",
            "type": "string"
          },
          "url": {
            "description": "URL is the browseable location of the document (if any).",
            "type": "string"
          },
          "uuid": {
            "description": "UUID is a unique ID for the document, this can for example be a random v4 UUID, or a URI-derived v5 UUID.",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearer": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "title": "index API",
    "version": "v0.17.21"
  },
  "openapi": "3.0.0",
  "paths": {
    "/twirp/elephant.index.Management/DeleteCluster": {
      "post": {
        "description": "DeleteCluster deletes a registered cluster. A cluster cannot be deleted as long as it has associated index sets.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.DeleteClusterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.DeleteClusterResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "DeleteCluster",
        "tags": [
          "Management"
        ]
      }
    },
    "/twirp/elephant.index.Management/DeleteIndexSet": {
      "post": {
        "description": "DeleteIndexSet deletes an index set. The set cannot be active or enabled.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.DeleteIndexSetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.DeleteIndexSetResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "DeleteIndexSet",
        "tags": [
          "Management"
        ]
      }
    },
    "/twirp/elephant.index.Management/ListClusters": {
      "post": {
        "description": "ListClusters returns a list of clusters together with information about the number of index sets they contain.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.ListClustersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.ListClustersResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "ListClusters",
        "tags": [
          "Management"
        ]
      }
    },
    "/twirp/elephant.index.Management/ListIndexSets": {
      "post": {
        "description": "ListIndexSets lists the available index set, with optional filtering.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.ListIndexSetsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.ListIndexSetsResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "ListIndexSets",
        "tags": [
          "Management"
        ]
      }
    },
    "/twirp/elephant.index.Management/PartialReindex": {
      "post": {
        "description": "PartialReindex restarts an existing index set from a given point in the repository eventlog.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.PartialReindexRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.PartialReindexResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "PartialReindex",
        "tags": [
          "Management"
        ]
      }
    },
    "/twirp/elephant.index.Management/RegisterCluster": {
      "post": {
        "description": "RegisterCluster for use with index sets.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.RegisterClusterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.RegisterClusterResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "RegisterCluster",
        "tags": [
          "Management"
        ]
      }
    },
    "/twirp/elephant.index.Management/Reindex": {
      "post": {
        "description": "Reindex set creates a new index set in the specified cluster and starts indexing documents to it.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.ReindexRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.ReindexResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reindex",
        "tags": [
          "Management"
        ]
      }
    },
    "/twirp/elephant.index.Management/SetIndexSetStatus": {
      "post": {
        "description": "SetIndexSetStatus is used to change the status of an index set.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.SetIndexSetStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.SetIndexSetStatusResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "SetIndexSetStatus",
        "tags": [
          "Management"
        ]
      }
    },
    "/twirp/elephant.index.SearchV1/EndSubscription": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.EndSubscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.EndSubscriptionResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "EndSubscription",
        "tags": [
          "SearchV1"
        ]
      }
    },
    "/twirp/elephant.index.SearchV1/GetMappings": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.GetMappingsRequestV1"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.GetMappingsResponseV1"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "GetMappings",
        "tags": [
          "SearchV1"
        ]
      }
    },
    "/twirp/elephant.index.SearchV1/PollSubscription": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.PollSubscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.PollSubscriptionResponse"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "PollSubscription",
        "tags": [
          "SearchV1"
        ]
      }
    },
    "/twirp/elephant.index.SearchV1/Query": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/elephant.index.QueryRequestV1"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/elephant.index.QueryResponseV1"
                }
              }
            },
            "description": "Method response"
          },
          "default": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Query",
        "tags": [
          "SearchV1"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://index.api.tt.se"
    },
    {
      "url": "https://index.api.stage.tt.se"
    }
  ],
  "tags": [
    {
      "name": "Management"
    },
    {
      "name": "SearchV1"
    }
  ]
}