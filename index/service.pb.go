// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v4.24.4
// source: index/service.proto

package index

import (
	newsdoc "github.com/ttab/elephant-api/newsdoc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnabledFilter int32

const (
	EnabledFilter_STATUS_UNSPECIFIED EnabledFilter = 0
	// STATUS_ENABLED means that documents are currently being indexed to the
	// index set.
	EnabledFilter_STATUS_ENABLED EnabledFilter = 1
	// STATUS_DISABLED means that no documents are being indexed to the index set.
	EnabledFilter_STATUS_DISABLED EnabledFilter = 3
)

// Enum value maps for EnabledFilter.
var (
	EnabledFilter_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_ENABLED",
		3: "STATUS_DISABLED",
	}
	EnabledFilter_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_ENABLED":     1,
		"STATUS_DISABLED":    3,
	}
)

func (x EnabledFilter) Enum() *EnabledFilter {
	p := new(EnabledFilter)
	*p = x
	return p
}

func (x EnabledFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnabledFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_index_service_proto_enumTypes[0].Descriptor()
}

func (EnabledFilter) Type() protoreflect.EnumType {
	return &file_index_service_proto_enumTypes[0]
}

func (x EnabledFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnabledFilter.Descriptor instead.
func (EnabledFilter) EnumDescriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{0}
}

type RegisterClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name used to identify the cluster.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Endpoint for the cluster.
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Auth is used to specify the authentication method.
	Auth          *RegisterClusterAuth `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterClusterRequest) Reset() {
	*x = RegisterClusterRequest{}
	mi := &file_index_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterClusterRequest) ProtoMessage() {}

func (x *RegisterClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterClusterRequest.ProtoReflect.Descriptor instead.
func (*RegisterClusterRequest) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterClusterRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RegisterClusterRequest) GetAuth() *RegisterClusterAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type RegisterClusterAuth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IAM authentication.
	Iam           bool `protobuf:"varint,1,opt,name=iam,proto3" json:"iam,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterClusterAuth) Reset() {
	*x = RegisterClusterAuth{}
	mi := &file_index_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterClusterAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterClusterAuth) ProtoMessage() {}

func (x *RegisterClusterAuth) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterClusterAuth.ProtoReflect.Descriptor instead.
func (*RegisterClusterAuth) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterClusterAuth) GetIam() bool {
	if x != nil {
		return x.Iam
	}
	return false
}

type RegisterClusterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterClusterResponse) Reset() {
	*x = RegisterClusterResponse{}
	mi := &file_index_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterClusterResponse) ProtoMessage() {}

func (x *RegisterClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterClusterResponse.ProtoReflect.Descriptor instead.
func (*RegisterClusterResponse) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{2}
}

type ReindexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cluster that we should re-index set to.
	Cluster       string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReindexRequest) Reset() {
	*x = ReindexRequest{}
	mi := &file_index_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReindexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReindexRequest) ProtoMessage() {}

func (x *ReindexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReindexRequest.ProtoReflect.Descriptor instead.
func (*ReindexRequest) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{3}
}

func (x *ReindexRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

type ReindexResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the new index set.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReindexResponse) Reset() {
	*x = ReindexResponse{}
	mi := &file_index_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReindexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReindexResponse) ProtoMessage() {}

func (x *ReindexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReindexResponse.ProtoReflect.Descriptor instead.
func (*ReindexResponse) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{4}
}

func (x *ReindexResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListClustersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_index_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{5}
}

type ListClustersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clusters      []*Cluster             `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_index_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type Cluster struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name used to identify the cluster.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Endpoint for the cluster.
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Number of index sets in the cluster.
	IndexSetCount int64 `protobuf:"varint,3,opt,name=index_set_count,json=indexSetCount,proto3" json:"index_set_count,omitempty"`
	// Auth options for the cluster.
	Auth          *ClusterAuth `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	mi := &file_index_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{7}
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Cluster) GetIndexSetCount() int64 {
	if x != nil {
		return x.IndexSetCount
	}
	return 0
}

func (x *Cluster) GetAuth() *ClusterAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type ClusterAuth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IAM authentication.
	Iam           bool `protobuf:"varint,1,opt,name=iam,proto3" json:"iam,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterAuth) Reset() {
	*x = ClusterAuth{}
	mi := &file_index_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAuth) ProtoMessage() {}

func (x *ClusterAuth) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAuth.ProtoReflect.Descriptor instead.
func (*ClusterAuth) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{8}
}

func (x *ClusterAuth) GetIam() bool {
	if x != nil {
		return x.Iam
	}
	return false
}

type DeleteClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the cluster to delete.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	mi := &file_index_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteClusterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterResponse) Reset() {
	*x = DeleteClusterResponse{}
	mi := &file_index_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterResponse) ProtoMessage() {}

func (x *DeleteClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterResponse) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{10}
}

type DeleteIndexSetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the index set to delete.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteIndexSetRequest) Reset() {
	*x = DeleteIndexSetRequest{}
	mi := &file_index_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteIndexSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIndexSetRequest) ProtoMessage() {}

func (x *DeleteIndexSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIndexSetRequest.ProtoReflect.Descriptor instead.
func (*DeleteIndexSetRequest) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteIndexSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteIndexSetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteIndexSetResponse) Reset() {
	*x = DeleteIndexSetResponse{}
	mi := &file_index_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteIndexSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIndexSetResponse) ProtoMessage() {}

func (x *DeleteIndexSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIndexSetResponse.ProtoReflect.Descriptor instead.
func (*DeleteIndexSetResponse) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{12}
}

type SetIndexSetStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the index set to set the status of.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Active means that search requests are being routed to this index set. There
	// is always exactly one active index set at a time. Setting an index set to
	// active will deactivate but not disable the currently active index set.
	Active bool `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	// ForceActive is used to force the activation of an index set that lags more
	// than 10 events behind the currently active set.
	ForceActive bool `protobuf:"varint,3,opt,name=force_active,json=forceActive,proto3" json:"force_active,omitempty"`
	// Enabled means that documents should index to the index set. Disabling an
	// index set will only pause index seting, and it can later be
	// resumed. Disabling an index set does not deactivate it.
	Enabled       bool `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetIndexSetStatusRequest) Reset() {
	*x = SetIndexSetStatusRequest{}
	mi := &file_index_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetIndexSetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIndexSetStatusRequest) ProtoMessage() {}

func (x *SetIndexSetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIndexSetStatusRequest.ProtoReflect.Descriptor instead.
func (*SetIndexSetStatusRequest) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{13}
}

func (x *SetIndexSetStatusRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetIndexSetStatusRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *SetIndexSetStatusRequest) GetForceActive() bool {
	if x != nil {
		return x.ForceActive
	}
	return false
}

func (x *SetIndexSetStatusRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SetIndexSetStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetIndexSetStatusResponse) Reset() {
	*x = SetIndexSetStatusResponse{}
	mi := &file_index_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetIndexSetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIndexSetStatusResponse) ProtoMessage() {}

func (x *SetIndexSetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIndexSetStatusResponse.ProtoReflect.Descriptor instead.
func (*SetIndexSetStatusResponse) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{14}
}

type PartialReindexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IndexSet to re-index.
	IndexSet string `protobuf:"bytes,1,opt,name=index_set,json=indexSet,proto3" json:"index_set,omitempty"`
	// Position to start from.
	Position      int64 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartialReindexRequest) Reset() {
	*x = PartialReindexRequest{}
	mi := &file_index_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartialReindexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialReindexRequest) ProtoMessage() {}

func (x *PartialReindexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialReindexRequest.ProtoReflect.Descriptor instead.
func (*PartialReindexRequest) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{15}
}

func (x *PartialReindexRequest) GetIndexSet() string {
	if x != nil {
		return x.IndexSet
	}
	return ""
}

func (x *PartialReindexRequest) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

type PartialReindexResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartialReindexResponse) Reset() {
	*x = PartialReindexResponse{}
	mi := &file_index_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartialReindexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialReindexResponse) ProtoMessage() {}

func (x *PartialReindexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialReindexResponse.ProtoReflect.Descriptor instead.
func (*PartialReindexResponse) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{16}
}

type ListIndexSetsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cluster can be used to filter by cluster.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// OnlyActive only returns the currently active index set.
	OnlyActive bool `protobuf:"varint,2,opt,name=only_active,json=onlyActive,proto3" json:"only_active,omitempty"`
	// Status can be used to filter index sets by their enabled/disabled status.
	Status EnabledFilter `protobuf:"varint,3,opt,name=status,proto3,enum=elephant.index.EnabledFilter" json:"status,omitempty"`
	// Cursor to the page that should be returned. Omit to get the first page.
	Cursor        string `protobuf:"bytes,4,opt,name=cursor,proto3" json:"cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListIndexSetsRequest) Reset() {
	*x = ListIndexSetsRequest{}
	mi := &file_index_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIndexSetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIndexSetsRequest) ProtoMessage() {}

func (x *ListIndexSetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIndexSetsRequest.ProtoReflect.Descriptor instead.
func (*ListIndexSetsRequest) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListIndexSetsRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ListIndexSetsRequest) GetOnlyActive() bool {
	if x != nil {
		return x.OnlyActive
	}
	return false
}

func (x *ListIndexSetsRequest) GetStatus() EnabledFilter {
	if x != nil {
		return x.Status
	}
	return EnabledFilter_STATUS_UNSPECIFIED
}

func (x *ListIndexSetsRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type ListIndexSetsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IndexSets that matched the criteria.
	IndexSets []*IndexSet `protobuf:"bytes,1,rep,name=index_sets,json=indexSets,proto3" json:"index_sets,omitempty"`
	// NextPage cursor to use to get the next page of index sets. Empty if no more
	// index sets exist.
	NextPage      string `protobuf:"bytes,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListIndexSetsResponse) Reset() {
	*x = ListIndexSetsResponse{}
	mi := &file_index_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIndexSetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIndexSetsResponse) ProtoMessage() {}

func (x *ListIndexSetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIndexSetsResponse.ProtoReflect.Descriptor instead.
func (*ListIndexSetsResponse) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{18}
}

func (x *ListIndexSetsResponse) GetIndexSets() []*IndexSet {
	if x != nil {
		return x.IndexSets
	}
	return nil
}

func (x *ListIndexSetsResponse) GetNextPage() string {
	if x != nil {
		return x.NextPage
	}
	return ""
}

type IndexSet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the index set.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster that the index set has been created in.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Enabled status of the index set.
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Active status of the index set.
	Active bool `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	// Position in the repository content log.
	Position      int64 `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexSet) Reset() {
	*x = IndexSet{}
	mi := &file_index_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexSet) ProtoMessage() {}

func (x *IndexSet) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexSet.ProtoReflect.Descriptor instead.
func (*IndexSet) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{19}
}

func (x *IndexSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IndexSet) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *IndexSet) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *IndexSet) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *IndexSet) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

type QueryRequestV1 struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	DocumentType string                 `protobuf:"bytes,1,opt,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	Language     string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Query        *QueryV1               `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Fields       []string               `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	Sort         []*SortingV1           `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort,omitempty"`
	Source       bool                   `protobuf:"varint,6,opt,name=source,proto3" json:"source,omitempty"`
	From         int64                  `protobuf:"varint,7,opt,name=from,proto3" json:"from,omitempty"`
	Size         int64                  `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	SearchAfter  []string               `protobuf:"bytes,9,rep,name=search_after,json=searchAfter,proto3" json:"search_after,omitempty"`
	// LoadDocument will load the current version of the document from the
	// repository and include it with the search response.
	LoadDocument bool `protobuf:"varint,10,opt,name=load_document,json=loadDocument,proto3" json:"load_document,omitempty"`
	// Subscribe starts a subscription for the query.
	Subscribe bool `protobuf:"varint,11,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	// Shared performs the query without the identity of the user, allows for
	// better query caching and shared subscriptions.
	Shared        bool `protobuf:"varint,12,opt,name=shared,proto3" json:"shared,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRequestV1) Reset() {
	*x = QueryRequestV1{}
	mi := &file_index_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequestV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequestV1) ProtoMessage() {}

func (x *QueryRequestV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequestV1.ProtoReflect.Descriptor instead.
func (*QueryRequestV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{20}
}

func (x *QueryRequestV1) GetDocumentType() string {
	if x != nil {
		return x.DocumentType
	}
	return ""
}

func (x *QueryRequestV1) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *QueryRequestV1) GetQuery() *QueryV1 {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryRequestV1) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *QueryRequestV1) GetSort() []*SortingV1 {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *QueryRequestV1) GetSource() bool {
	if x != nil {
		return x.Source
	}
	return false
}

func (x *QueryRequestV1) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *QueryRequestV1) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *QueryRequestV1) GetSearchAfter() []string {
	if x != nil {
		return x.SearchAfter
	}
	return nil
}

func (x *QueryRequestV1) GetLoadDocument() bool {
	if x != nil {
		return x.LoadDocument
	}
	return false
}

func (x *QueryRequestV1) GetSubscribe() bool {
	if x != nil {
		return x.Subscribe
	}
	return false
}

func (x *QueryRequestV1) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

type QueryV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Conditions:
	//
	//	*QueryV1_Bool
	//	*QueryV1_Range
	//	*QueryV1_Exists
	//	*QueryV1_MatchAll
	//	*QueryV1_Term
	//	*QueryV1_Terms
	//	*QueryV1_Match
	//	*QueryV1_MatchPhrase
	//	*QueryV1_QueryString
	//	*QueryV1_Prefix
	//	*QueryV1_MultiMatch
	Conditions    isQueryV1_Conditions `protobuf_oneof:"conditions"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryV1) Reset() {
	*x = QueryV1{}
	mi := &file_index_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryV1) ProtoMessage() {}

func (x *QueryV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryV1.ProtoReflect.Descriptor instead.
func (*QueryV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{21}
}

func (x *QueryV1) GetConditions() isQueryV1_Conditions {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *QueryV1) GetBool() *BoolQueryV1 {
	if x != nil {
		if x, ok := x.Conditions.(*QueryV1_Bool); ok {
			return x.Bool
		}
	}
	return nil
}

func (x *QueryV1) GetRange() *RangeQueryV1 {
	if x != nil {
		if x, ok := x.Conditions.(*QueryV1_Range); ok {
			return x.Range
		}
	}
	return nil
}

func (x *QueryV1) GetExists() string {
	if x != nil {
		if x, ok := x.Conditions.(*QueryV1_Exists); ok {
			return x.Exists
		}
	}
	return ""
}

func (x *QueryV1) GetMatchAll() *MatchAllQueryV1 {
	if x != nil {
		if x, ok := x.Conditions.(*QueryV1_MatchAll); ok {
			return x.MatchAll
		}
	}
	return nil
}

func (x *QueryV1) GetTerm() *TermQueryV1 {
	if x != nil {
		if x, ok := x.Conditions.(*QueryV1_Term); ok {
			return x.Term
		}
	}
	return nil
}

func (x *QueryV1) GetTerms() *TermsQueryV1 {
	if x != nil {
		if x, ok := x.Conditions.(*QueryV1_Terms); ok {
			return x.Terms
		}
	}
	return nil
}

func (x *QueryV1) GetMatch() *MatchQueryV1 {
	if x != nil {
		if x, ok := x.Conditions.(*QueryV1_Match); ok {
			return x.Match
		}
	}
	return nil
}

func (x *QueryV1) GetMatchPhrase() *MatchPhraseQueryV1 {
	if x != nil {
		if x, ok := x.Conditions.(*QueryV1_MatchPhrase); ok {
			return x.MatchPhrase
		}
	}
	return nil
}

func (x *QueryV1) GetQueryString() string {
	if x != nil {
		if x, ok := x.Conditions.(*QueryV1_QueryString); ok {
			return x.QueryString
		}
	}
	return ""
}

func (x *QueryV1) GetPrefix() *PrefixQueryV1 {
	if x != nil {
		if x, ok := x.Conditions.(*QueryV1_Prefix); ok {
			return x.Prefix
		}
	}
	return nil
}

func (x *QueryV1) GetMultiMatch() *MultiMatchQueryV1 {
	if x != nil {
		if x, ok := x.Conditions.(*QueryV1_MultiMatch); ok {
			return x.MultiMatch
		}
	}
	return nil
}

type isQueryV1_Conditions interface {
	isQueryV1_Conditions()
}

type QueryV1_Bool struct {
	Bool *BoolQueryV1 `protobuf:"bytes,1,opt,name=bool,proto3,oneof"`
}

type QueryV1_Range struct {
	Range *RangeQueryV1 `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type QueryV1_Exists struct {
	Exists string `protobuf:"bytes,3,opt,name=exists,proto3,oneof"`
}

type QueryV1_MatchAll struct {
	MatchAll *MatchAllQueryV1 `protobuf:"bytes,4,opt,name=match_all,json=matchAll,proto3,oneof"`
}

type QueryV1_Term struct {
	Term *TermQueryV1 `protobuf:"bytes,5,opt,name=term,proto3,oneof"`
}

type QueryV1_Terms struct {
	Terms *TermsQueryV1 `protobuf:"bytes,6,opt,name=terms,proto3,oneof"`
}

type QueryV1_Match struct {
	Match *MatchQueryV1 `protobuf:"bytes,7,opt,name=match,proto3,oneof"`
}

type QueryV1_MatchPhrase struct {
	MatchPhrase *MatchPhraseQueryV1 `protobuf:"bytes,8,opt,name=match_phrase,json=matchPhrase,proto3,oneof"`
}

type QueryV1_QueryString struct {
	QueryString string `protobuf:"bytes,9,opt,name=query_string,json=queryString,proto3,oneof"`
}

type QueryV1_Prefix struct {
	Prefix *PrefixQueryV1 `protobuf:"bytes,10,opt,name=prefix,proto3,oneof"`
}

type QueryV1_MultiMatch struct {
	MultiMatch *MultiMatchQueryV1 `protobuf:"bytes,11,opt,name=multi_match,json=multiMatch,proto3,oneof"`
}

func (*QueryV1_Bool) isQueryV1_Conditions() {}

func (*QueryV1_Range) isQueryV1_Conditions() {}

func (*QueryV1_Exists) isQueryV1_Conditions() {}

func (*QueryV1_MatchAll) isQueryV1_Conditions() {}

func (*QueryV1_Term) isQueryV1_Conditions() {}

func (*QueryV1_Terms) isQueryV1_Conditions() {}

func (*QueryV1_Match) isQueryV1_Conditions() {}

func (*QueryV1_MatchPhrase) isQueryV1_Conditions() {}

func (*QueryV1_QueryString) isQueryV1_Conditions() {}

func (*QueryV1_Prefix) isQueryV1_Conditions() {}

func (*QueryV1_MultiMatch) isQueryV1_Conditions() {}

type BoolQueryV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Must          []*QueryV1             `protobuf:"bytes,1,rep,name=must,proto3" json:"must,omitempty"`
	MustNot       []*QueryV1             `protobuf:"bytes,2,rep,name=must_not,json=mustNot,proto3" json:"must_not,omitempty"`
	Should        []*QueryV1             `protobuf:"bytes,3,rep,name=should,proto3" json:"should,omitempty"`
	Filter        []*QueryV1             `protobuf:"bytes,4,rep,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoolQueryV1) Reset() {
	*x = BoolQueryV1{}
	mi := &file_index_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolQueryV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolQueryV1) ProtoMessage() {}

func (x *BoolQueryV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolQueryV1.ProtoReflect.Descriptor instead.
func (*BoolQueryV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{22}
}

func (x *BoolQueryV1) GetMust() []*QueryV1 {
	if x != nil {
		return x.Must
	}
	return nil
}

func (x *BoolQueryV1) GetMustNot() []*QueryV1 {
	if x != nil {
		return x.MustNot
	}
	return nil
}

func (x *BoolQueryV1) GetShould() []*QueryV1 {
	if x != nil {
		return x.Should
	}
	return nil
}

func (x *BoolQueryV1) GetFilter() []*QueryV1 {
	if x != nil {
		return x.Filter
	}
	return nil
}

type RangeQueryV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Gt            string                 `protobuf:"bytes,2,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte           string                 `protobuf:"bytes,3,opt,name=gte,proto3" json:"gte,omitempty"`
	Lt            string                 `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte           string                 `protobuf:"bytes,5,opt,name=lte,proto3" json:"lte,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RangeQueryV1) Reset() {
	*x = RangeQueryV1{}
	mi := &file_index_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RangeQueryV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeQueryV1) ProtoMessage() {}

func (x *RangeQueryV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeQueryV1.ProtoReflect.Descriptor instead.
func (*RangeQueryV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{23}
}

func (x *RangeQueryV1) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *RangeQueryV1) GetGt() string {
	if x != nil {
		return x.Gt
	}
	return ""
}

func (x *RangeQueryV1) GetGte() string {
	if x != nil {
		return x.Gte
	}
	return ""
}

func (x *RangeQueryV1) GetLt() string {
	if x != nil {
		return x.Lt
	}
	return ""
}

func (x *RangeQueryV1) GetLte() string {
	if x != nil {
		return x.Lte
	}
	return ""
}

type MatchAllQueryV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchAllQueryV1) Reset() {
	*x = MatchAllQueryV1{}
	mi := &file_index_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchAllQueryV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchAllQueryV1) ProtoMessage() {}

func (x *MatchAllQueryV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchAllQueryV1.ProtoReflect.Descriptor instead.
func (*MatchAllQueryV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{24}
}

type TermQueryV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Boost         float64                `protobuf:"fixed64,3,opt,name=boost,proto3" json:"boost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TermQueryV1) Reset() {
	*x = TermQueryV1{}
	mi := &file_index_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TermQueryV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermQueryV1) ProtoMessage() {}

func (x *TermQueryV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermQueryV1.ProtoReflect.Descriptor instead.
func (*TermQueryV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{25}
}

func (x *TermQueryV1) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *TermQueryV1) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TermQueryV1) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type TermsQueryV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Values        []string               `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	Boost         float64                `protobuf:"fixed64,3,opt,name=boost,proto3" json:"boost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TermsQueryV1) Reset() {
	*x = TermsQueryV1{}
	mi := &file_index_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TermsQueryV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermsQueryV1) ProtoMessage() {}

func (x *TermsQueryV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermsQueryV1.ProtoReflect.Descriptor instead.
func (*TermsQueryV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{26}
}

func (x *TermsQueryV1) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *TermsQueryV1) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *TermsQueryV1) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type MatchQueryV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Boost         float64                `protobuf:"fixed64,3,opt,name=boost,proto3" json:"boost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchQueryV1) Reset() {
	*x = MatchQueryV1{}
	mi := &file_index_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchQueryV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchQueryV1) ProtoMessage() {}

func (x *MatchQueryV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchQueryV1.ProtoReflect.Descriptor instead.
func (*MatchQueryV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{27}
}

func (x *MatchQueryV1) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *MatchQueryV1) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MatchQueryV1) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type MultiMatchQueryV1 struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Fields []string               `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Type is the multi-match query type. Valid values are best_fields,
	// most_fields, cross_fields, phrase, phrase_prefix, bool_prefix. Default is
	// best_fields.
	Type  string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Query string  `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Boost float64 `protobuf:"fixed64,4,opt,name=boost,proto3" json:"boost,omitempty"`
	// BooleanAnd can be used to require all terms to match.
	BooleanAnd bool `protobuf:"varint,5,opt,name=boolean_and,json=booleanAnd,proto3" json:"boolean_and,omitempty"`
	// MinimumShouldMatch if the query string contains multiple search terms and
	// you use the or operator, the number of terms that need to match for the
	// document to be considered a match. See
	// https://opensearch.org/docs/latest/query-dsl/minimum-should-match/
	MinimumShouldMatch string  `protobuf:"bytes,6,opt,name=minimum_should_match,json=minimumShouldMatch,proto3" json:"minimum_should_match,omitempty"`
	TieBreaker         float32 `protobuf:"fixed32,7,opt,name=tie_breaker,json=tieBreaker,proto3" json:"tie_breaker,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MultiMatchQueryV1) Reset() {
	*x = MultiMatchQueryV1{}
	mi := &file_index_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiMatchQueryV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiMatchQueryV1) ProtoMessage() {}

func (x *MultiMatchQueryV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiMatchQueryV1.ProtoReflect.Descriptor instead.
func (*MultiMatchQueryV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{28}
}

func (x *MultiMatchQueryV1) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *MultiMatchQueryV1) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MultiMatchQueryV1) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *MultiMatchQueryV1) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

func (x *MultiMatchQueryV1) GetBooleanAnd() bool {
	if x != nil {
		return x.BooleanAnd
	}
	return false
}

func (x *MultiMatchQueryV1) GetMinimumShouldMatch() string {
	if x != nil {
		return x.MinimumShouldMatch
	}
	return ""
}

func (x *MultiMatchQueryV1) GetTieBreaker() float32 {
	if x != nil {
		return x.TieBreaker
	}
	return 0
}

type MatchPhraseQueryV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchPhraseQueryV1) Reset() {
	*x = MatchPhraseQueryV1{}
	mi := &file_index_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchPhraseQueryV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPhraseQueryV1) ProtoMessage() {}

func (x *MatchPhraseQueryV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPhraseQueryV1.ProtoReflect.Descriptor instead.
func (*MatchPhraseQueryV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{29}
}

func (x *MatchPhraseQueryV1) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *MatchPhraseQueryV1) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type PrefixQueryV1 struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Field           string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value           string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	CaseInsensitive bool                   `protobuf:"varint,3,opt,name=case_insensitive,json=caseInsensitive,proto3" json:"case_insensitive,omitempty"`
	Boost           float64                `protobuf:"fixed64,4,opt,name=boost,proto3" json:"boost,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PrefixQueryV1) Reset() {
	*x = PrefixQueryV1{}
	mi := &file_index_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrefixQueryV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixQueryV1) ProtoMessage() {}

func (x *PrefixQueryV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixQueryV1.ProtoReflect.Descriptor instead.
func (*PrefixQueryV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{30}
}

func (x *PrefixQueryV1) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *PrefixQueryV1) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PrefixQueryV1) GetCaseInsensitive() bool {
	if x != nil {
		return x.CaseInsensitive
	}
	return false
}

func (x *PrefixQueryV1) GetBoost() float64 {
	if x != nil {
		return x.Boost
	}
	return 0
}

type SortingV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Desc          bool                   `protobuf:"varint,2,opt,name=desc,proto3" json:"desc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortingV1) Reset() {
	*x = SortingV1{}
	mi := &file_index_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortingV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortingV1) ProtoMessage() {}

func (x *SortingV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortingV1.ProtoReflect.Descriptor instead.
func (*SortingV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{31}
}

func (x *SortingV1) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SortingV1) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

type QueryResponseV1 struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Took     int64                  `protobuf:"varint,1,opt,name=took,proto3" json:"took,omitempty"`
	TimedOut bool                   `protobuf:"varint,2,opt,name=timed_out,json=timedOut,proto3" json:"timed_out,omitempty"`
	Shards   *ShardsV1              `protobuf:"bytes,3,opt,name=shards,proto3" json:"shards,omitempty"`
	Hits     *HitsV1                `protobuf:"bytes,4,opt,name=hits,proto3" json:"hits,omitempty"`
	// Subsciption for search results, if any was started.
	Subscription  *SubscriptionReference `protobuf:"bytes,5,opt,name=subscription,proto3" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryResponseV1) Reset() {
	*x = QueryResponseV1{}
	mi := &file_index_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryResponseV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponseV1) ProtoMessage() {}

func (x *QueryResponseV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponseV1.ProtoReflect.Descriptor instead.
func (*QueryResponseV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{32}
}

func (x *QueryResponseV1) GetTook() int64 {
	if x != nil {
		return x.Took
	}
	return 0
}

func (x *QueryResponseV1) GetTimedOut() bool {
	if x != nil {
		return x.TimedOut
	}
	return false
}

func (x *QueryResponseV1) GetShards() *ShardsV1 {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *QueryResponseV1) GetHits() *HitsV1 {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *QueryResponseV1) GetSubscription() *SubscriptionReference {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type ShardsV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int32                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Successful    int32                  `protobuf:"varint,2,opt,name=successful,proto3" json:"successful,omitempty"`
	Skipped       int32                  `protobuf:"varint,3,opt,name=skipped,proto3" json:"skipped,omitempty"`
	Failed        int32                  `protobuf:"varint,4,opt,name=failed,proto3" json:"failed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardsV1) Reset() {
	*x = ShardsV1{}
	mi := &file_index_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardsV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardsV1) ProtoMessage() {}

func (x *ShardsV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardsV1.ProtoReflect.Descriptor instead.
func (*ShardsV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{33}
}

func (x *ShardsV1) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ShardsV1) GetSuccessful() int32 {
	if x != nil {
		return x.Successful
	}
	return 0
}

func (x *ShardsV1) GetSkipped() int32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *ShardsV1) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

type HitsV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         *HitsTotalV1           `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	MaxScore      float32                `protobuf:"fixed32,2,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	Hits          []*HitV1               `protobuf:"bytes,3,rep,name=hits,proto3" json:"hits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HitsV1) Reset() {
	*x = HitsV1{}
	mi := &file_index_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HitsV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HitsV1) ProtoMessage() {}

func (x *HitsV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HitsV1.ProtoReflect.Descriptor instead.
func (*HitsV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{34}
}

func (x *HitsV1) GetTotal() *HitsTotalV1 {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *HitsV1) GetMaxScore() float32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *HitsV1) GetHits() []*HitV1 {
	if x != nil {
		return x.Hits
	}
	return nil
}

type HitsTotalV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         int64                  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Relation      string                 `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HitsTotalV1) Reset() {
	*x = HitsTotalV1{}
	mi := &file_index_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HitsTotalV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HitsTotalV1) ProtoMessage() {}

func (x *HitsTotalV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HitsTotalV1.ProtoReflect.Descriptor instead.
func (*HitsTotalV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{35}
}

func (x *HitsTotalV1) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *HitsTotalV1) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

type HitV1 struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Id            string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Score         float32                   `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	Fields        map[string]*FieldValuesV1 `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Source        map[string]*FieldValuesV1 `protobuf:"bytes,4,rep,name=source,proto3" json:"source,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sort          []string                  `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort,omitempty"`
	Document      *newsdoc.Document         `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HitV1) Reset() {
	*x = HitV1{}
	mi := &file_index_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HitV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HitV1) ProtoMessage() {}

func (x *HitV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HitV1.ProtoReflect.Descriptor instead.
func (*HitV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{36}
}

func (x *HitV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HitV1) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *HitV1) GetFields() map[string]*FieldValuesV1 {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *HitV1) GetSource() map[string]*FieldValuesV1 {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *HitV1) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *HitV1) GetDocument() *newsdoc.Document {
	if x != nil {
		return x.Document
	}
	return nil
}

type FieldValuesV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []string               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldValuesV1) Reset() {
	*x = FieldValuesV1{}
	mi := &file_index_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldValuesV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValuesV1) ProtoMessage() {}

func (x *FieldValuesV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldValuesV1.ProtoReflect.Descriptor instead.
func (*FieldValuesV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{37}
}

func (x *FieldValuesV1) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type GetMappingsRequestV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DocumentType  string                 `protobuf:"bytes,1,opt,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMappingsRequestV1) Reset() {
	*x = GetMappingsRequestV1{}
	mi := &file_index_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMappingsRequestV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMappingsRequestV1) ProtoMessage() {}

func (x *GetMappingsRequestV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMappingsRequestV1.ProtoReflect.Descriptor instead.
func (*GetMappingsRequestV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{38}
}

func (x *GetMappingsRequestV1) GetDocumentType() string {
	if x != nil {
		return x.DocumentType
	}
	return ""
}

type GetMappingsResponseV1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Properties    []*MappingPropertyV1   `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMappingsResponseV1) Reset() {
	*x = GetMappingsResponseV1{}
	mi := &file_index_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMappingsResponseV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMappingsResponseV1) ProtoMessage() {}

func (x *GetMappingsResponseV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMappingsResponseV1.ProtoReflect.Descriptor instead.
func (*GetMappingsResponseV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{39}
}

func (x *GetMappingsResponseV1) GetProperties() []*MappingPropertyV1 {
	if x != nil {
		return x.Properties
	}
	return nil
}

type MappingPropertyV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the property.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the property.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Path used for alias properties.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Fields used for alternate indexing metods for the property.
	Fields        []*MappingFieldV1 `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MappingPropertyV1) Reset() {
	*x = MappingPropertyV1{}
	mi := &file_index_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MappingPropertyV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingPropertyV1) ProtoMessage() {}

func (x *MappingPropertyV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappingPropertyV1.ProtoReflect.Descriptor instead.
func (*MappingPropertyV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{40}
}

func (x *MappingPropertyV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MappingPropertyV1) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MappingPropertyV1) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MappingPropertyV1) GetFields() []*MappingFieldV1 {
	if x != nil {
		return x.Fields
	}
	return nil
}

type MappingFieldV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the field.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the field. Does not exactly correspond to Open Search types, but
	// represents the logical type.
	Type          string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MappingFieldV1) Reset() {
	*x = MappingFieldV1{}
	mi := &file_index_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MappingFieldV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MappingFieldV1) ProtoMessage() {}

func (x *MappingFieldV1) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MappingFieldV1.ProtoReflect.Descriptor instead.
func (*MappingFieldV1) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{41}
}

func (x *MappingFieldV1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MappingFieldV1) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type PollSubscriptionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Subscriptions to poll.
	Subscriptions []*SubscriptionReference `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	// MaxWaitMS is the maximum time to wait before returning an empty response.
	MaxWaitMs int64 `protobuf:"varint,2,opt,name=max_wait_ms,json=maxWaitMs,proto3" json:"max_wait_ms,omitempty"`
	// BatchDelayMS is the number of milliseconds to wait for more items after the first.
	BatchDelayMs  int64 `protobuf:"varint,3,opt,name=batch_delay_ms,json=batchDelayMs,proto3" json:"batch_delay_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollSubscriptionRequest) Reset() {
	*x = PollSubscriptionRequest{}
	mi := &file_index_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollSubscriptionRequest) ProtoMessage() {}

func (x *PollSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*PollSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{42}
}

func (x *PollSubscriptionRequest) GetSubscriptions() []*SubscriptionReference {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *PollSubscriptionRequest) GetMaxWaitMs() int64 {
	if x != nil {
		return x.MaxWaitMs
	}
	return 0
}

func (x *PollSubscriptionRequest) GetBatchDelayMs() int64 {
	if x != nil {
		return x.BatchDelayMs
	}
	return 0
}

type SubscriptionReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the subscription.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Cursor for current subscription position.
	Cursor        int64 `protobuf:"varint,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionReference) Reset() {
	*x = SubscriptionReference{}
	mi := &file_index_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionReference) ProtoMessage() {}

func (x *SubscriptionReference) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionReference.ProtoReflect.Descriptor instead.
func (*SubscriptionReference) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{43}
}

func (x *SubscriptionReference) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubscriptionReference) GetCursor() int64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

type PollSubscriptionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Results will be empty if the poll timed out.
	Result        []*SubscriptionPollResult `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollSubscriptionResponse) Reset() {
	*x = PollSubscriptionResponse{}
	mi := &file_index_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollSubscriptionResponse) ProtoMessage() {}

func (x *PollSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*PollSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{44}
}

func (x *PollSubscriptionResponse) GetResult() []*SubscriptionPollResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type SubscriptionPollResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Subsciption reference with current cursor position.
	Subscription []*SubscriptionReference `protobuf:"bytes,1,rep,name=subscription,proto3" json:"subscription,omitempty"`
	// Items that matched the subscription.
	Items         []*HitV1 `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionPollResult) Reset() {
	*x = SubscriptionPollResult{}
	mi := &file_index_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionPollResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionPollResult) ProtoMessage() {}

func (x *SubscriptionPollResult) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionPollResult.ProtoReflect.Descriptor instead.
func (*SubscriptionPollResult) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{45}
}

func (x *SubscriptionPollResult) GetSubscription() []*SubscriptionReference {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (x *SubscriptionPollResult) GetItems() []*HitV1 {
	if x != nil {
		return x.Items
	}
	return nil
}

type EndSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndSubscriptionRequest) Reset() {
	*x = EndSubscriptionRequest{}
	mi := &file_index_service_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndSubscriptionRequest) ProtoMessage() {}

func (x *EndSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*EndSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{46}
}

func (x *EndSubscriptionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type EndSubscriptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndSubscriptionResponse) Reset() {
	*x = EndSubscriptionResponse{}
	mi := &file_index_service_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndSubscriptionResponse) ProtoMessage() {}

func (x *EndSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_index_service_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*EndSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_index_service_proto_rawDescGZIP(), []int{47}
}

var File_index_service_proto protoreflect.FileDescriptor

var file_index_service_proto_rawDesc = []byte{
	0x0a, 0x13, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x15, 0x6e, 0x65, 0x77, 0x73, 0x64, 0x6f, 0x63, 0x2f, 0x6e,
	0x65, 0x77, 0x73, 0x64, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a,
	0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x22, 0x27, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x69, 0x61, 0x6d, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a, 0x0e, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x22, 0x25, 0x0a, 0x0f, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4b,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68,
	0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x07,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x22, 0x1f, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x69, 0x61,
	0x6d, 0x22, 0x2a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x17, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01,
	0x0a, 0x18, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x50, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x18, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22,
	0x6d, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65,
	0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x22, 0x86,
	0x01, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x03, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6c, 0x65,
	0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x31, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x31, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x22,
	0xe6, 0x04, 0x0a, 0x07, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x12, 0x31, 0x0a, 0x04, 0x62,
	0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6c, 0x65, 0x70,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x34,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3e,
	0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x56, 0x31, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x12, 0x31,
	0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65,
	0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x72,
	0x6d, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x48, 0x00,
	0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e,
	0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x56, 0x31, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x47, 0x0a,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6c,
	0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x44, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6c, 0x65, 0x70,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x48, 0x00, 0x52, 0x0a,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x0b, 0x42, 0x6f, 0x6f,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x75, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e,
	0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x52,
	0x04, 0x6d, 0x75, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x6e, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31,
	0x52, 0x07, 0x6d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6c, 0x65, 0x70,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x56, 0x31, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6c, 0x65,
	0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x31, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x0c, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x67,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x67, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6c, 0x74, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x22, 0x4f, 0x0a, 0x0b, 0x54, 0x65, 0x72, 0x6d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x0c, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x22, 0x50, 0x0a,
	0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x22,
	0xdf, 0x01, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x41, 0x6e, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x69, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x22, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x7c, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x56, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x22, 0x35, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x31, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x31, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6b,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x56, 0x31, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x2a, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x48,
	0x69, 0x74, 0x73, 0x56, 0x31, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x08, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73,
	0x56, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x06, 0x48,
	0x69, 0x74, 0x73, 0x56, 0x31, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x48, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56,
	0x31, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x48, 0x69, 0x74, 0x56, 0x31, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73,
	0x22, 0x3f, 0x0a, 0x0b, 0x48, 0x69, 0x74, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x31, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x9a, 0x03, 0x0a, 0x05, 0x48, 0x69, 0x74, 0x56, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x48, 0x69, 0x74, 0x56, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65,
	0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x48, 0x69,
	0x74, 0x56, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6e, 0x65, 0x77, 0x73, 0x64, 0x6f, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x58, 0x0a, 0x0b, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6c, 0x65,
	0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x56, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x0b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x56, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x27,
	0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x56, 0x31, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x31, 0x12, 0x41, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x56, 0x31, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x22, 0x87, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x56, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x56, 0x31, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x0e, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x31, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x4d, 0x73, 0x22, 0x3f, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x22, 0x5a, 0x0a, 0x18, 0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x90, 0x01, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x48, 0x69, 0x74, 0x56, 0x31, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x28, 0x0a, 0x16, 0x45, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19, 0x0a,
	0x17, 0x45, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x50, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xff, 0x05, 0x0a, 0x0a, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x0f, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x65,
	0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e,
	0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x65, 0x6c, 0x65, 0x70,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68,
	0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x52, 0x65, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1e, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65,
	0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x65, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x6c,
	0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x68, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xfb, 0x02, 0x0a,
	0x08, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x31, 0x12, 0x48, 0x0a, 0x05, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x1e, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x56, 0x31, 0x1a, 0x1f, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x56, 0x31, 0x12, 0x5a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x24, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x1a, 0x25, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68,
	0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x31, 0x12,
	0x65, 0x0a, 0x10, 0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65,
	0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x6f,
	0x6c, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x65, 0x6c, 0x65, 0x70,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x45, 0x6e, 0x64, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x45, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x74, 0x61, 0x62, 0x2f, 0x65, 0x6c,
	0x65, 0x70, 0x68, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_index_service_proto_rawDescOnce sync.Once
	file_index_service_proto_rawDescData = file_index_service_proto_rawDesc
)

func file_index_service_proto_rawDescGZIP() []byte {
	file_index_service_proto_rawDescOnce.Do(func() {
		file_index_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_index_service_proto_rawDescData)
	})
	return file_index_service_proto_rawDescData
}

var file_index_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_index_service_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_index_service_proto_goTypes = []any{
	(EnabledFilter)(0),                // 0: elephant.index.EnabledFilter
	(*RegisterClusterRequest)(nil),    // 1: elephant.index.RegisterClusterRequest
	(*RegisterClusterAuth)(nil),       // 2: elephant.index.RegisterClusterAuth
	(*RegisterClusterResponse)(nil),   // 3: elephant.index.RegisterClusterResponse
	(*ReindexRequest)(nil),            // 4: elephant.index.ReindexRequest
	(*ReindexResponse)(nil),           // 5: elephant.index.ReindexResponse
	(*ListClustersRequest)(nil),       // 6: elephant.index.ListClustersRequest
	(*ListClustersResponse)(nil),      // 7: elephant.index.ListClustersResponse
	(*Cluster)(nil),                   // 8: elephant.index.Cluster
	(*ClusterAuth)(nil),               // 9: elephant.index.ClusterAuth
	(*DeleteClusterRequest)(nil),      // 10: elephant.index.DeleteClusterRequest
	(*DeleteClusterResponse)(nil),     // 11: elephant.index.DeleteClusterResponse
	(*DeleteIndexSetRequest)(nil),     // 12: elephant.index.DeleteIndexSetRequest
	(*DeleteIndexSetResponse)(nil),    // 13: elephant.index.DeleteIndexSetResponse
	(*SetIndexSetStatusRequest)(nil),  // 14: elephant.index.SetIndexSetStatusRequest
	(*SetIndexSetStatusResponse)(nil), // 15: elephant.index.SetIndexSetStatusResponse
	(*PartialReindexRequest)(nil),     // 16: elephant.index.PartialReindexRequest
	(*PartialReindexResponse)(nil),    // 17: elephant.index.PartialReindexResponse
	(*ListIndexSetsRequest)(nil),      // 18: elephant.index.ListIndexSetsRequest
	(*ListIndexSetsResponse)(nil),     // 19: elephant.index.ListIndexSetsResponse
	(*IndexSet)(nil),                  // 20: elephant.index.IndexSet
	(*QueryRequestV1)(nil),            // 21: elephant.index.QueryRequestV1
	(*QueryV1)(nil),                   // 22: elephant.index.QueryV1
	(*BoolQueryV1)(nil),               // 23: elephant.index.BoolQueryV1
	(*RangeQueryV1)(nil),              // 24: elephant.index.RangeQueryV1
	(*MatchAllQueryV1)(nil),           // 25: elephant.index.MatchAllQueryV1
	(*TermQueryV1)(nil),               // 26: elephant.index.TermQueryV1
	(*TermsQueryV1)(nil),              // 27: elephant.index.TermsQueryV1
	(*MatchQueryV1)(nil),              // 28: elephant.index.MatchQueryV1
	(*MultiMatchQueryV1)(nil),         // 29: elephant.index.MultiMatchQueryV1
	(*MatchPhraseQueryV1)(nil),        // 30: elephant.index.MatchPhraseQueryV1
	(*PrefixQueryV1)(nil),             // 31: elephant.index.PrefixQueryV1
	(*SortingV1)(nil),                 // 32: elephant.index.SortingV1
	(*QueryResponseV1)(nil),           // 33: elephant.index.QueryResponseV1
	(*ShardsV1)(nil),                  // 34: elephant.index.ShardsV1
	(*HitsV1)(nil),                    // 35: elephant.index.HitsV1
	(*HitsTotalV1)(nil),               // 36: elephant.index.HitsTotalV1
	(*HitV1)(nil),                     // 37: elephant.index.HitV1
	(*FieldValuesV1)(nil),             // 38: elephant.index.FieldValuesV1
	(*GetMappingsRequestV1)(nil),      // 39: elephant.index.GetMappingsRequestV1
	(*GetMappingsResponseV1)(nil),     // 40: elephant.index.GetMappingsResponseV1
	(*MappingPropertyV1)(nil),         // 41: elephant.index.MappingPropertyV1
	(*MappingFieldV1)(nil),            // 42: elephant.index.MappingFieldV1
	(*PollSubscriptionRequest)(nil),   // 43: elephant.index.PollSubscriptionRequest
	(*SubscriptionReference)(nil),     // 44: elephant.index.SubscriptionReference
	(*PollSubscriptionResponse)(nil),  // 45: elephant.index.PollSubscriptionResponse
	(*SubscriptionPollResult)(nil),    // 46: elephant.index.SubscriptionPollResult
	(*EndSubscriptionRequest)(nil),    // 47: elephant.index.EndSubscriptionRequest
	(*EndSubscriptionResponse)(nil),   // 48: elephant.index.EndSubscriptionResponse
	nil,                               // 49: elephant.index.HitV1.FieldsEntry
	nil,                               // 50: elephant.index.HitV1.SourceEntry
	(*newsdoc.Document)(nil),          // 51: newsdoc.Document
}
var file_index_service_proto_depIdxs = []int32{
	2,  // 0: elephant.index.RegisterClusterRequest.auth:type_name -> elephant.index.RegisterClusterAuth
	8,  // 1: elephant.index.ListClustersResponse.clusters:type_name -> elephant.index.Cluster
	9,  // 2: elephant.index.Cluster.auth:type_name -> elephant.index.ClusterAuth
	0,  // 3: elephant.index.ListIndexSetsRequest.status:type_name -> elephant.index.EnabledFilter
	20, // 4: elephant.index.ListIndexSetsResponse.index_sets:type_name -> elephant.index.IndexSet
	22, // 5: elephant.index.QueryRequestV1.query:type_name -> elephant.index.QueryV1
	32, // 6: elephant.index.QueryRequestV1.sort:type_name -> elephant.index.SortingV1
	23, // 7: elephant.index.QueryV1.bool:type_name -> elephant.index.BoolQueryV1
	24, // 8: elephant.index.QueryV1.range:type_name -> elephant.index.RangeQueryV1
	25, // 9: elephant.index.QueryV1.match_all:type_name -> elephant.index.MatchAllQueryV1
	26, // 10: elephant.index.QueryV1.term:type_name -> elephant.index.TermQueryV1
	27, // 11: elephant.index.QueryV1.terms:type_name -> elephant.index.TermsQueryV1
	28, // 12: elephant.index.QueryV1.match:type_name -> elephant.index.MatchQueryV1
	30, // 13: elephant.index.QueryV1.match_phrase:type_name -> elephant.index.MatchPhraseQueryV1
	31, // 14: elephant.index.QueryV1.prefix:type_name -> elephant.index.PrefixQueryV1
	29, // 15: elephant.index.QueryV1.multi_match:type_name -> elephant.index.MultiMatchQueryV1
	22, // 16: elephant.index.BoolQueryV1.must:type_name -> elephant.index.QueryV1
	22, // 17: elephant.index.BoolQueryV1.must_not:type_name -> elephant.index.QueryV1
	22, // 18: elephant.index.BoolQueryV1.should:type_name -> elephant.index.QueryV1
	22, // 19: elephant.index.BoolQueryV1.filter:type_name -> elephant.index.QueryV1
	34, // 20: elephant.index.QueryResponseV1.shards:type_name -> elephant.index.ShardsV1
	35, // 21: elephant.index.QueryResponseV1.hits:type_name -> elephant.index.HitsV1
	44, // 22: elephant.index.QueryResponseV1.subscription:type_name -> elephant.index.SubscriptionReference
	36, // 23: elephant.index.HitsV1.total:type_name -> elephant.index.HitsTotalV1
	37, // 24: elephant.index.HitsV1.hits:type_name -> elephant.index.HitV1
	49, // 25: elephant.index.HitV1.fields:type_name -> elephant.index.HitV1.FieldsEntry
	50, // 26: elephant.index.HitV1.source:type_name -> elephant.index.HitV1.SourceEntry
	51, // 27: elephant.index.HitV1.document:type_name -> newsdoc.Document
	41, // 28: elephant.index.GetMappingsResponseV1.properties:type_name -> elephant.index.MappingPropertyV1
	42, // 29: elephant.index.MappingPropertyV1.fields:type_name -> elephant.index.MappingFieldV1
	44, // 30: elephant.index.PollSubscriptionRequest.subscriptions:type_name -> elephant.index.SubscriptionReference
	46, // 31: elephant.index.PollSubscriptionResponse.result:type_name -> elephant.index.SubscriptionPollResult
	44, // 32: elephant.index.SubscriptionPollResult.subscription:type_name -> elephant.index.SubscriptionReference
	37, // 33: elephant.index.SubscriptionPollResult.items:type_name -> elephant.index.HitV1
	38, // 34: elephant.index.HitV1.FieldsEntry.value:type_name -> elephant.index.FieldValuesV1
	38, // 35: elephant.index.HitV1.SourceEntry.value:type_name -> elephant.index.FieldValuesV1
	1,  // 36: elephant.index.Management.RegisterCluster:input_type -> elephant.index.RegisterClusterRequest
	6,  // 37: elephant.index.Management.ListClusters:input_type -> elephant.index.ListClustersRequest
	10, // 38: elephant.index.Management.DeleteCluster:input_type -> elephant.index.DeleteClusterRequest
	12, // 39: elephant.index.Management.DeleteIndexSet:input_type -> elephant.index.DeleteIndexSetRequest
	4,  // 40: elephant.index.Management.Reindex:input_type -> elephant.index.ReindexRequest
	16, // 41: elephant.index.Management.PartialReindex:input_type -> elephant.index.PartialReindexRequest
	18, // 42: elephant.index.Management.ListIndexSets:input_type -> elephant.index.ListIndexSetsRequest
	14, // 43: elephant.index.Management.SetIndexSetStatus:input_type -> elephant.index.SetIndexSetStatusRequest
	21, // 44: elephant.index.SearchV1.Query:input_type -> elephant.index.QueryRequestV1
	39, // 45: elephant.index.SearchV1.GetMappings:input_type -> elephant.index.GetMappingsRequestV1
	43, // 46: elephant.index.SearchV1.PollSubscription:input_type -> elephant.index.PollSubscriptionRequest
	47, // 47: elephant.index.SearchV1.EndSubscription:input_type -> elephant.index.EndSubscriptionRequest
	3,  // 48: elephant.index.Management.RegisterCluster:output_type -> elephant.index.RegisterClusterResponse
	7,  // 49: elephant.index.Management.ListClusters:output_type -> elephant.index.ListClustersResponse
	11, // 50: elephant.index.Management.DeleteCluster:output_type -> elephant.index.DeleteClusterResponse
	13, // 51: elephant.index.Management.DeleteIndexSet:output_type -> elephant.index.DeleteIndexSetResponse
	5,  // 52: elephant.index.Management.Reindex:output_type -> elephant.index.ReindexResponse
	17, // 53: elephant.index.Management.PartialReindex:output_type -> elephant.index.PartialReindexResponse
	19, // 54: elephant.index.Management.ListIndexSets:output_type -> elephant.index.ListIndexSetsResponse
	15, // 55: elephant.index.Management.SetIndexSetStatus:output_type -> elephant.index.SetIndexSetStatusResponse
	33, // 56: elephant.index.SearchV1.Query:output_type -> elephant.index.QueryResponseV1
	40, // 57: elephant.index.SearchV1.GetMappings:output_type -> elephant.index.GetMappingsResponseV1
	45, // 58: elephant.index.SearchV1.PollSubscription:output_type -> elephant.index.PollSubscriptionResponse
	48, // 59: elephant.index.SearchV1.EndSubscription:output_type -> elephant.index.EndSubscriptionResponse
	48, // [48:60] is the sub-list for method output_type
	36, // [36:48] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_index_service_proto_init() }
func file_index_service_proto_init() {
	if File_index_service_proto != nil {
		return
	}
	file_index_service_proto_msgTypes[21].OneofWrappers = []any{
		(*QueryV1_Bool)(nil),
		(*QueryV1_Range)(nil),
		(*QueryV1_Exists)(nil),
		(*QueryV1_MatchAll)(nil),
		(*QueryV1_Term)(nil),
		(*QueryV1_Terms)(nil),
		(*QueryV1_Match)(nil),
		(*QueryV1_MatchPhrase)(nil),
		(*QueryV1_QueryString)(nil),
		(*QueryV1_Prefix)(nil),
		(*QueryV1_MultiMatch)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_index_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_index_service_proto_goTypes,
		DependencyIndexes: file_index_service_proto_depIdxs,
		EnumInfos:         file_index_service_proto_enumTypes,
		MessageInfos:      file_index_service_proto_msgTypes,
	}.Build()
	File_index_service_proto = out.File
	file_index_service_proto_rawDesc = nil
	file_index_service_proto_goTypes = nil
	file_index_service_proto_depIdxs = nil
}
