// Code generated by protoc-gen-twirp v8.1.3, DO NOT EDIT.
// source: repository/service.proto

package repository

import context "context"
import fmt "fmt"
import http "net/http"
import io "io"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

import bytes "bytes"
import errors "errors"
import path "path"
import url "net/url"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ===================
// Documents Interface
// ===================

type Documents interface {
	// Get retrieves a document version.
	Get(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)

	// BulkGet loads multiple documents in a single request.
	BulkGet(context.Context, *BulkGetRequest) (*BulkGetResponse, error)

	// GetHistory lists the document version history.
	GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error)

	// Update is used to create new document versions, set statuses, update ACLs.
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)

	// BulkUpdate is used to create new document versions, set statuses, update ACLs.
	BulkUpdate(context.Context, *BulkUpdateRequest) (*BulkUpdateResponse, error)

	// Validate is used to validate a document without writing it to the
	// repository.
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)

	// Delete deletes a document and all its associated data.
	Delete(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error)

	// ListDeleted lists deleted document instances for a UUID.
	ListDeleted(context.Context, *ListDeletedRequest) (*ListDeletedResponse, error)

	// Restore recovers a deleted document.
	Restore(context.Context, *RestoreRequest) (*RestoreResponse, error)

	// Purge removes a deleted document completely.
	Purge(context.Context, *PurgeRequest) (*PurgeResponse, error)

	// GetMeta returns metadata for a document, including the ACL and current
	// status heads.
	GetMeta(context.Context, *GetMetaRequest) (*GetMetaResponse, error)

	// Eventlog returns document update events, optionally waiting for new events.
	Eventlog(context.Context, *GetEventlogRequest) (*GetEventlogResponse, error)

	// CompactedEventlog returns document update events. If more than one event
	// has occured for a document in the given window only the latest will be returned.
	CompactedEventlog(context.Context, *GetCompactedEventlogRequest) (*GetCompactedEventlogResponse, error)

	// GetStatus returns a single status for a document.
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)

	// GetStatusHistory returns the history of a status for a document.
	GetStatusHistory(context.Context, *GetStatusHistoryRequest) (*GetStatusHistoryReponse, error)

	// GetNilStatuses returns all the statuses for a document where version is -1.
	GetNilStatuses(context.Context, *GetNilStatusesRequest) (*GetNilStatusesResponse, error)

	// GetStatusOverview returns the current version and a set of statuses for a
	// gven list of documents.
	GetStatusOverview(context.Context, *GetStatusOverviewRequest) (*GetStatusOverviewResponse, error)

	// GetPermissions returns the permissions you have for the document.
	GetPermissions(context.Context, *GetPermissionsRequest) (*GetPermissionsResponse, error)

	// Lock attempts to acquire a write lock on a document.
	Lock(context.Context, *LockRequest) (*LockResponse, error)

	// ExtendLock extends the expiration of an existing lock.
	ExtendLock(context.Context, *ExtendLockRequest) (*LockResponse, error)

	// Unlock releases a write lock on a document.
	Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error)

	// GetWithheld returns the next upcoming scheduled publish actions. This is
	// not a complete list, but a list of the next N documents that are considered
	// eligible for publishing.
	GetWithheld(context.Context, *GetWithheldRequest) (*GetWithheldResponse, error)

	// GetDeliverableInfo returns available information related to the deliverable.
	GetDeliverableInfo(context.Context, *GetDeliverableInfoRequest) (*GetDeliverableInfoResponse, error)

	// CreateUpload is used to start the process of uploading objects that then
	// can be attached to a document.
	CreateUpload(context.Context, *CreateUploadRequest) (*CreateUploadResponse, error)

	// GetAttachments returns download links for the requested attachments.
	GetAttachments(context.Context, *GetAttachmentsRequest) (*GetAttachmentsResponse, error)
}

// =========================
// Documents Protobuf Client
// =========================

type documentsProtobufClient struct {
	client      HTTPClient
	urls        [25]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewDocumentsProtobufClient creates a Protobuf client that implements the Documents interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewDocumentsProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Documents {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "elephant.repository", "Documents")
	urls := [25]string{
		serviceURL + "Get",
		serviceURL + "BulkGet",
		serviceURL + "GetHistory",
		serviceURL + "Update",
		serviceURL + "BulkUpdate",
		serviceURL + "Validate",
		serviceURL + "Delete",
		serviceURL + "ListDeleted",
		serviceURL + "Restore",
		serviceURL + "Purge",
		serviceURL + "GetMeta",
		serviceURL + "Eventlog",
		serviceURL + "CompactedEventlog",
		serviceURL + "GetStatus",
		serviceURL + "GetStatusHistory",
		serviceURL + "GetNilStatuses",
		serviceURL + "GetStatusOverview",
		serviceURL + "GetPermissions",
		serviceURL + "Lock",
		serviceURL + "ExtendLock",
		serviceURL + "Unlock",
		serviceURL + "GetWithheld",
		serviceURL + "GetDeliverableInfo",
		serviceURL + "CreateUpload",
		serviceURL + "GetAttachments",
	}

	return &documentsProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *documentsProtobufClient) Get(ctx context.Context, in *GetDocumentRequest) (*GetDocumentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	caller := c.callGet
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetDocumentRequest) (*GetDocumentResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetDocumentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetDocumentRequest) when calling interceptor")
					}
					return c.callGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetDocumentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetDocumentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callGet(ctx context.Context, in *GetDocumentRequest) (*GetDocumentResponse, error) {
	out := new(GetDocumentResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) BulkGet(ctx context.Context, in *BulkGetRequest) (*BulkGetResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "BulkGet")
	caller := c.callBulkGet
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *BulkGetRequest) (*BulkGetResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BulkGetRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BulkGetRequest) when calling interceptor")
					}
					return c.callBulkGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BulkGetResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BulkGetResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callBulkGet(ctx context.Context, in *BulkGetRequest) (*BulkGetResponse, error) {
	out := new(BulkGetResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) GetHistory(ctx context.Context, in *GetHistoryRequest) (*GetHistoryResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetHistory")
	caller := c.callGetHistory
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetHistoryRequest) (*GetHistoryResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetHistoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetHistoryRequest) when calling interceptor")
					}
					return c.callGetHistory(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetHistoryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetHistoryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callGetHistory(ctx context.Context, in *GetHistoryRequest) (*GetHistoryResponse, error) {
	out := new(GetHistoryResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) Update(ctx context.Context, in *UpdateRequest) (*UpdateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Update")
	caller := c.callUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateRequest) when calling interceptor")
					}
					return c.callUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callUpdate(ctx context.Context, in *UpdateRequest) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) BulkUpdate(ctx context.Context, in *BulkUpdateRequest) (*BulkUpdateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "BulkUpdate")
	caller := c.callBulkUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *BulkUpdateRequest) (*BulkUpdateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BulkUpdateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BulkUpdateRequest) when calling interceptor")
					}
					return c.callBulkUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BulkUpdateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BulkUpdateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callBulkUpdate(ctx context.Context, in *BulkUpdateRequest) (*BulkUpdateResponse, error) {
	out := new(BulkUpdateResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) Validate(ctx context.Context, in *ValidateRequest) (*ValidateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Validate")
	caller := c.callValidate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ValidateRequest) (*ValidateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ValidateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ValidateRequest) when calling interceptor")
					}
					return c.callValidate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ValidateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ValidateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callValidate(ctx context.Context, in *ValidateRequest) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) Delete(ctx context.Context, in *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Delete")
	caller := c.callDelete
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteDocumentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteDocumentRequest) when calling interceptor")
					}
					return c.callDelete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteDocumentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteDocumentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callDelete(ctx context.Context, in *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
	out := new(DeleteDocumentResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) ListDeleted(ctx context.Context, in *ListDeletedRequest) (*ListDeletedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "ListDeleted")
	caller := c.callListDeleted
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListDeletedRequest) (*ListDeletedResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListDeletedRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListDeletedRequest) when calling interceptor")
					}
					return c.callListDeleted(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListDeletedResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListDeletedResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callListDeleted(ctx context.Context, in *ListDeletedRequest) (*ListDeletedResponse, error) {
	out := new(ListDeletedResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) Restore(ctx context.Context, in *RestoreRequest) (*RestoreResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Restore")
	caller := c.callRestore
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RestoreRequest) (*RestoreResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RestoreRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RestoreRequest) when calling interceptor")
					}
					return c.callRestore(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RestoreResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RestoreResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callRestore(ctx context.Context, in *RestoreRequest) (*RestoreResponse, error) {
	out := new(RestoreResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) Purge(ctx context.Context, in *PurgeRequest) (*PurgeResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Purge")
	caller := c.callPurge
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PurgeRequest) (*PurgeResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PurgeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PurgeRequest) when calling interceptor")
					}
					return c.callPurge(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PurgeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PurgeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callPurge(ctx context.Context, in *PurgeRequest) (*PurgeResponse, error) {
	out := new(PurgeResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) GetMeta(ctx context.Context, in *GetMetaRequest) (*GetMetaResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetMeta")
	caller := c.callGetMeta
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetMetaRequest) (*GetMetaResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetMetaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetMetaRequest) when calling interceptor")
					}
					return c.callGetMeta(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetMetaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetMetaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callGetMeta(ctx context.Context, in *GetMetaRequest) (*GetMetaResponse, error) {
	out := new(GetMetaResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) Eventlog(ctx context.Context, in *GetEventlogRequest) (*GetEventlogResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Eventlog")
	caller := c.callEventlog
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetEventlogRequest) (*GetEventlogResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetEventlogRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetEventlogRequest) when calling interceptor")
					}
					return c.callEventlog(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetEventlogResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetEventlogResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callEventlog(ctx context.Context, in *GetEventlogRequest) (*GetEventlogResponse, error) {
	out := new(GetEventlogResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) CompactedEventlog(ctx context.Context, in *GetCompactedEventlogRequest) (*GetCompactedEventlogResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "CompactedEventlog")
	caller := c.callCompactedEventlog
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetCompactedEventlogRequest) (*GetCompactedEventlogResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCompactedEventlogRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCompactedEventlogRequest) when calling interceptor")
					}
					return c.callCompactedEventlog(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetCompactedEventlogResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetCompactedEventlogResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callCompactedEventlog(ctx context.Context, in *GetCompactedEventlogRequest) (*GetCompactedEventlogResponse, error) {
	out := new(GetCompactedEventlogResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) GetStatus(ctx context.Context, in *GetStatusRequest) (*GetStatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetStatus")
	caller := c.callGetStatus
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetStatusRequest) (*GetStatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusRequest) when calling interceptor")
					}
					return c.callGetStatus(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callGetStatus(ctx context.Context, in *GetStatusRequest) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[13], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) GetStatusHistory(ctx context.Context, in *GetStatusHistoryRequest) (*GetStatusHistoryReponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetStatusHistory")
	caller := c.callGetStatusHistory
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetStatusHistoryRequest) (*GetStatusHistoryReponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusHistoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusHistoryRequest) when calling interceptor")
					}
					return c.callGetStatusHistory(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusHistoryReponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusHistoryReponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callGetStatusHistory(ctx context.Context, in *GetStatusHistoryRequest) (*GetStatusHistoryReponse, error) {
	out := new(GetStatusHistoryReponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[14], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) GetNilStatuses(ctx context.Context, in *GetNilStatusesRequest) (*GetNilStatusesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetNilStatuses")
	caller := c.callGetNilStatuses
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetNilStatusesRequest) (*GetNilStatusesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetNilStatusesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetNilStatusesRequest) when calling interceptor")
					}
					return c.callGetNilStatuses(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetNilStatusesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetNilStatusesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callGetNilStatuses(ctx context.Context, in *GetNilStatusesRequest) (*GetNilStatusesResponse, error) {
	out := new(GetNilStatusesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[15], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) GetStatusOverview(ctx context.Context, in *GetStatusOverviewRequest) (*GetStatusOverviewResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetStatusOverview")
	caller := c.callGetStatusOverview
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetStatusOverviewRequest) (*GetStatusOverviewResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusOverviewRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusOverviewRequest) when calling interceptor")
					}
					return c.callGetStatusOverview(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusOverviewResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusOverviewResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callGetStatusOverview(ctx context.Context, in *GetStatusOverviewRequest) (*GetStatusOverviewResponse, error) {
	out := new(GetStatusOverviewResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[16], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) GetPermissions(ctx context.Context, in *GetPermissionsRequest) (*GetPermissionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetPermissions")
	caller := c.callGetPermissions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetPermissionsRequest) (*GetPermissionsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPermissionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPermissionsRequest) when calling interceptor")
					}
					return c.callGetPermissions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPermissionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPermissionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callGetPermissions(ctx context.Context, in *GetPermissionsRequest) (*GetPermissionsResponse, error) {
	out := new(GetPermissionsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[17], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) Lock(ctx context.Context, in *LockRequest) (*LockResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Lock")
	caller := c.callLock
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *LockRequest) (*LockResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LockRequest) when calling interceptor")
					}
					return c.callLock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LockResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LockResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callLock(ctx context.Context, in *LockRequest) (*LockResponse, error) {
	out := new(LockResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[18], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) ExtendLock(ctx context.Context, in *ExtendLockRequest) (*LockResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "ExtendLock")
	caller := c.callExtendLock
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ExtendLockRequest) (*LockResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExtendLockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExtendLockRequest) when calling interceptor")
					}
					return c.callExtendLock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LockResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LockResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callExtendLock(ctx context.Context, in *ExtendLockRequest) (*LockResponse, error) {
	out := new(LockResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[19], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) Unlock(ctx context.Context, in *UnlockRequest) (*UnlockResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Unlock")
	caller := c.callUnlock
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UnlockRequest) (*UnlockResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UnlockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UnlockRequest) when calling interceptor")
					}
					return c.callUnlock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UnlockResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UnlockResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callUnlock(ctx context.Context, in *UnlockRequest) (*UnlockResponse, error) {
	out := new(UnlockResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[20], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) GetWithheld(ctx context.Context, in *GetWithheldRequest) (*GetWithheldResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetWithheld")
	caller := c.callGetWithheld
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetWithheldRequest) (*GetWithheldResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWithheldRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWithheldRequest) when calling interceptor")
					}
					return c.callGetWithheld(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetWithheldResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetWithheldResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callGetWithheld(ctx context.Context, in *GetWithheldRequest) (*GetWithheldResponse, error) {
	out := new(GetWithheldResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[21], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) GetDeliverableInfo(ctx context.Context, in *GetDeliverableInfoRequest) (*GetDeliverableInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetDeliverableInfo")
	caller := c.callGetDeliverableInfo
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetDeliverableInfoRequest) (*GetDeliverableInfoResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetDeliverableInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetDeliverableInfoRequest) when calling interceptor")
					}
					return c.callGetDeliverableInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetDeliverableInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetDeliverableInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callGetDeliverableInfo(ctx context.Context, in *GetDeliverableInfoRequest) (*GetDeliverableInfoResponse, error) {
	out := new(GetDeliverableInfoResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[22], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) CreateUpload(ctx context.Context, in *CreateUploadRequest) (*CreateUploadResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "CreateUpload")
	caller := c.callCreateUpload
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateUploadRequest) (*CreateUploadResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateUploadRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateUploadRequest) when calling interceptor")
					}
					return c.callCreateUpload(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateUploadResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateUploadResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callCreateUpload(ctx context.Context, in *CreateUploadRequest) (*CreateUploadResponse, error) {
	out := new(CreateUploadResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[23], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsProtobufClient) GetAttachments(ctx context.Context, in *GetAttachmentsRequest) (*GetAttachmentsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetAttachments")
	caller := c.callGetAttachments
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetAttachmentsRequest) (*GetAttachmentsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetAttachmentsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetAttachmentsRequest) when calling interceptor")
					}
					return c.callGetAttachments(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetAttachmentsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetAttachmentsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsProtobufClient) callGetAttachments(ctx context.Context, in *GetAttachmentsRequest) (*GetAttachmentsResponse, error) {
	out := new(GetAttachmentsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[24], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =====================
// Documents JSON Client
// =====================

type documentsJSONClient struct {
	client      HTTPClient
	urls        [25]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewDocumentsJSONClient creates a JSON client that implements the Documents interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewDocumentsJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Documents {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "elephant.repository", "Documents")
	urls := [25]string{
		serviceURL + "Get",
		serviceURL + "BulkGet",
		serviceURL + "GetHistory",
		serviceURL + "Update",
		serviceURL + "BulkUpdate",
		serviceURL + "Validate",
		serviceURL + "Delete",
		serviceURL + "ListDeleted",
		serviceURL + "Restore",
		serviceURL + "Purge",
		serviceURL + "GetMeta",
		serviceURL + "Eventlog",
		serviceURL + "CompactedEventlog",
		serviceURL + "GetStatus",
		serviceURL + "GetStatusHistory",
		serviceURL + "GetNilStatuses",
		serviceURL + "GetStatusOverview",
		serviceURL + "GetPermissions",
		serviceURL + "Lock",
		serviceURL + "ExtendLock",
		serviceURL + "Unlock",
		serviceURL + "GetWithheld",
		serviceURL + "GetDeliverableInfo",
		serviceURL + "CreateUpload",
		serviceURL + "GetAttachments",
	}

	return &documentsJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *documentsJSONClient) Get(ctx context.Context, in *GetDocumentRequest) (*GetDocumentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	caller := c.callGet
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetDocumentRequest) (*GetDocumentResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetDocumentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetDocumentRequest) when calling interceptor")
					}
					return c.callGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetDocumentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetDocumentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callGet(ctx context.Context, in *GetDocumentRequest) (*GetDocumentResponse, error) {
	out := new(GetDocumentResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) BulkGet(ctx context.Context, in *BulkGetRequest) (*BulkGetResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "BulkGet")
	caller := c.callBulkGet
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *BulkGetRequest) (*BulkGetResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BulkGetRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BulkGetRequest) when calling interceptor")
					}
					return c.callBulkGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BulkGetResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BulkGetResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callBulkGet(ctx context.Context, in *BulkGetRequest) (*BulkGetResponse, error) {
	out := new(BulkGetResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) GetHistory(ctx context.Context, in *GetHistoryRequest) (*GetHistoryResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetHistory")
	caller := c.callGetHistory
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetHistoryRequest) (*GetHistoryResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetHistoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetHistoryRequest) when calling interceptor")
					}
					return c.callGetHistory(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetHistoryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetHistoryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callGetHistory(ctx context.Context, in *GetHistoryRequest) (*GetHistoryResponse, error) {
	out := new(GetHistoryResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) Update(ctx context.Context, in *UpdateRequest) (*UpdateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Update")
	caller := c.callUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateRequest) when calling interceptor")
					}
					return c.callUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callUpdate(ctx context.Context, in *UpdateRequest) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) BulkUpdate(ctx context.Context, in *BulkUpdateRequest) (*BulkUpdateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "BulkUpdate")
	caller := c.callBulkUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *BulkUpdateRequest) (*BulkUpdateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BulkUpdateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BulkUpdateRequest) when calling interceptor")
					}
					return c.callBulkUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BulkUpdateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BulkUpdateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callBulkUpdate(ctx context.Context, in *BulkUpdateRequest) (*BulkUpdateResponse, error) {
	out := new(BulkUpdateResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) Validate(ctx context.Context, in *ValidateRequest) (*ValidateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Validate")
	caller := c.callValidate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ValidateRequest) (*ValidateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ValidateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ValidateRequest) when calling interceptor")
					}
					return c.callValidate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ValidateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ValidateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callValidate(ctx context.Context, in *ValidateRequest) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) Delete(ctx context.Context, in *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Delete")
	caller := c.callDelete
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteDocumentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteDocumentRequest) when calling interceptor")
					}
					return c.callDelete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteDocumentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteDocumentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callDelete(ctx context.Context, in *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
	out := new(DeleteDocumentResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) ListDeleted(ctx context.Context, in *ListDeletedRequest) (*ListDeletedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "ListDeleted")
	caller := c.callListDeleted
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListDeletedRequest) (*ListDeletedResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListDeletedRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListDeletedRequest) when calling interceptor")
					}
					return c.callListDeleted(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListDeletedResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListDeletedResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callListDeleted(ctx context.Context, in *ListDeletedRequest) (*ListDeletedResponse, error) {
	out := new(ListDeletedResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) Restore(ctx context.Context, in *RestoreRequest) (*RestoreResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Restore")
	caller := c.callRestore
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RestoreRequest) (*RestoreResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RestoreRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RestoreRequest) when calling interceptor")
					}
					return c.callRestore(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RestoreResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RestoreResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callRestore(ctx context.Context, in *RestoreRequest) (*RestoreResponse, error) {
	out := new(RestoreResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) Purge(ctx context.Context, in *PurgeRequest) (*PurgeResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Purge")
	caller := c.callPurge
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PurgeRequest) (*PurgeResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PurgeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PurgeRequest) when calling interceptor")
					}
					return c.callPurge(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PurgeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PurgeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callPurge(ctx context.Context, in *PurgeRequest) (*PurgeResponse, error) {
	out := new(PurgeResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) GetMeta(ctx context.Context, in *GetMetaRequest) (*GetMetaResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetMeta")
	caller := c.callGetMeta
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetMetaRequest) (*GetMetaResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetMetaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetMetaRequest) when calling interceptor")
					}
					return c.callGetMeta(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetMetaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetMetaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callGetMeta(ctx context.Context, in *GetMetaRequest) (*GetMetaResponse, error) {
	out := new(GetMetaResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) Eventlog(ctx context.Context, in *GetEventlogRequest) (*GetEventlogResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Eventlog")
	caller := c.callEventlog
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetEventlogRequest) (*GetEventlogResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetEventlogRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetEventlogRequest) when calling interceptor")
					}
					return c.callEventlog(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetEventlogResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetEventlogResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callEventlog(ctx context.Context, in *GetEventlogRequest) (*GetEventlogResponse, error) {
	out := new(GetEventlogResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) CompactedEventlog(ctx context.Context, in *GetCompactedEventlogRequest) (*GetCompactedEventlogResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "CompactedEventlog")
	caller := c.callCompactedEventlog
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetCompactedEventlogRequest) (*GetCompactedEventlogResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCompactedEventlogRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCompactedEventlogRequest) when calling interceptor")
					}
					return c.callCompactedEventlog(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetCompactedEventlogResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetCompactedEventlogResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callCompactedEventlog(ctx context.Context, in *GetCompactedEventlogRequest) (*GetCompactedEventlogResponse, error) {
	out := new(GetCompactedEventlogResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) GetStatus(ctx context.Context, in *GetStatusRequest) (*GetStatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetStatus")
	caller := c.callGetStatus
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetStatusRequest) (*GetStatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusRequest) when calling interceptor")
					}
					return c.callGetStatus(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callGetStatus(ctx context.Context, in *GetStatusRequest) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[13], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) GetStatusHistory(ctx context.Context, in *GetStatusHistoryRequest) (*GetStatusHistoryReponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetStatusHistory")
	caller := c.callGetStatusHistory
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetStatusHistoryRequest) (*GetStatusHistoryReponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusHistoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusHistoryRequest) when calling interceptor")
					}
					return c.callGetStatusHistory(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusHistoryReponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusHistoryReponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callGetStatusHistory(ctx context.Context, in *GetStatusHistoryRequest) (*GetStatusHistoryReponse, error) {
	out := new(GetStatusHistoryReponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[14], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) GetNilStatuses(ctx context.Context, in *GetNilStatusesRequest) (*GetNilStatusesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetNilStatuses")
	caller := c.callGetNilStatuses
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetNilStatusesRequest) (*GetNilStatusesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetNilStatusesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetNilStatusesRequest) when calling interceptor")
					}
					return c.callGetNilStatuses(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetNilStatusesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetNilStatusesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callGetNilStatuses(ctx context.Context, in *GetNilStatusesRequest) (*GetNilStatusesResponse, error) {
	out := new(GetNilStatusesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[15], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) GetStatusOverview(ctx context.Context, in *GetStatusOverviewRequest) (*GetStatusOverviewResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetStatusOverview")
	caller := c.callGetStatusOverview
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetStatusOverviewRequest) (*GetStatusOverviewResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusOverviewRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusOverviewRequest) when calling interceptor")
					}
					return c.callGetStatusOverview(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusOverviewResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusOverviewResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callGetStatusOverview(ctx context.Context, in *GetStatusOverviewRequest) (*GetStatusOverviewResponse, error) {
	out := new(GetStatusOverviewResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[16], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) GetPermissions(ctx context.Context, in *GetPermissionsRequest) (*GetPermissionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetPermissions")
	caller := c.callGetPermissions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetPermissionsRequest) (*GetPermissionsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPermissionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPermissionsRequest) when calling interceptor")
					}
					return c.callGetPermissions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPermissionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPermissionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callGetPermissions(ctx context.Context, in *GetPermissionsRequest) (*GetPermissionsResponse, error) {
	out := new(GetPermissionsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[17], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) Lock(ctx context.Context, in *LockRequest) (*LockResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Lock")
	caller := c.callLock
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *LockRequest) (*LockResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LockRequest) when calling interceptor")
					}
					return c.callLock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LockResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LockResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callLock(ctx context.Context, in *LockRequest) (*LockResponse, error) {
	out := new(LockResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[18], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) ExtendLock(ctx context.Context, in *ExtendLockRequest) (*LockResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "ExtendLock")
	caller := c.callExtendLock
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ExtendLockRequest) (*LockResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExtendLockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExtendLockRequest) when calling interceptor")
					}
					return c.callExtendLock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LockResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LockResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callExtendLock(ctx context.Context, in *ExtendLockRequest) (*LockResponse, error) {
	out := new(LockResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[19], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) Unlock(ctx context.Context, in *UnlockRequest) (*UnlockResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "Unlock")
	caller := c.callUnlock
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UnlockRequest) (*UnlockResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UnlockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UnlockRequest) when calling interceptor")
					}
					return c.callUnlock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UnlockResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UnlockResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callUnlock(ctx context.Context, in *UnlockRequest) (*UnlockResponse, error) {
	out := new(UnlockResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[20], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) GetWithheld(ctx context.Context, in *GetWithheldRequest) (*GetWithheldResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetWithheld")
	caller := c.callGetWithheld
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetWithheldRequest) (*GetWithheldResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWithheldRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWithheldRequest) when calling interceptor")
					}
					return c.callGetWithheld(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetWithheldResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetWithheldResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callGetWithheld(ctx context.Context, in *GetWithheldRequest) (*GetWithheldResponse, error) {
	out := new(GetWithheldResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[21], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) GetDeliverableInfo(ctx context.Context, in *GetDeliverableInfoRequest) (*GetDeliverableInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetDeliverableInfo")
	caller := c.callGetDeliverableInfo
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetDeliverableInfoRequest) (*GetDeliverableInfoResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetDeliverableInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetDeliverableInfoRequest) when calling interceptor")
					}
					return c.callGetDeliverableInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetDeliverableInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetDeliverableInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callGetDeliverableInfo(ctx context.Context, in *GetDeliverableInfoRequest) (*GetDeliverableInfoResponse, error) {
	out := new(GetDeliverableInfoResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[22], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) CreateUpload(ctx context.Context, in *CreateUploadRequest) (*CreateUploadResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "CreateUpload")
	caller := c.callCreateUpload
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateUploadRequest) (*CreateUploadResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateUploadRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateUploadRequest) when calling interceptor")
					}
					return c.callCreateUpload(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateUploadResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateUploadResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callCreateUpload(ctx context.Context, in *CreateUploadRequest) (*CreateUploadResponse, error) {
	out := new(CreateUploadResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[23], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *documentsJSONClient) GetAttachments(ctx context.Context, in *GetAttachmentsRequest) (*GetAttachmentsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithMethodName(ctx, "GetAttachments")
	caller := c.callGetAttachments
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetAttachmentsRequest) (*GetAttachmentsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetAttachmentsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetAttachmentsRequest) when calling interceptor")
					}
					return c.callGetAttachments(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetAttachmentsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetAttachmentsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *documentsJSONClient) callGetAttachments(ctx context.Context, in *GetAttachmentsRequest) (*GetAttachmentsResponse, error) {
	out := new(GetAttachmentsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[24], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ========================
// Documents Server Handler
// ========================

type documentsServer struct {
	Documents
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewDocumentsServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewDocumentsServer(svc Documents, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &documentsServer{
		Documents:        svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *documentsServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *documentsServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// DocumentsPathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const DocumentsPathPrefix = "/twirp/elephant.repository.Documents/"

func (s *documentsServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Documents")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "elephant.repository.Documents" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "Get":
		s.serveGet(ctx, resp, req)
		return
	case "BulkGet":
		s.serveBulkGet(ctx, resp, req)
		return
	case "GetHistory":
		s.serveGetHistory(ctx, resp, req)
		return
	case "Update":
		s.serveUpdate(ctx, resp, req)
		return
	case "BulkUpdate":
		s.serveBulkUpdate(ctx, resp, req)
		return
	case "Validate":
		s.serveValidate(ctx, resp, req)
		return
	case "Delete":
		s.serveDelete(ctx, resp, req)
		return
	case "ListDeleted":
		s.serveListDeleted(ctx, resp, req)
		return
	case "Restore":
		s.serveRestore(ctx, resp, req)
		return
	case "Purge":
		s.servePurge(ctx, resp, req)
		return
	case "GetMeta":
		s.serveGetMeta(ctx, resp, req)
		return
	case "Eventlog":
		s.serveEventlog(ctx, resp, req)
		return
	case "CompactedEventlog":
		s.serveCompactedEventlog(ctx, resp, req)
		return
	case "GetStatus":
		s.serveGetStatus(ctx, resp, req)
		return
	case "GetStatusHistory":
		s.serveGetStatusHistory(ctx, resp, req)
		return
	case "GetNilStatuses":
		s.serveGetNilStatuses(ctx, resp, req)
		return
	case "GetStatusOverview":
		s.serveGetStatusOverview(ctx, resp, req)
		return
	case "GetPermissions":
		s.serveGetPermissions(ctx, resp, req)
		return
	case "Lock":
		s.serveLock(ctx, resp, req)
		return
	case "ExtendLock":
		s.serveExtendLock(ctx, resp, req)
		return
	case "Unlock":
		s.serveUnlock(ctx, resp, req)
		return
	case "GetWithheld":
		s.serveGetWithheld(ctx, resp, req)
		return
	case "GetDeliverableInfo":
		s.serveGetDeliverableInfo(ctx, resp, req)
		return
	case "CreateUpload":
		s.serveCreateUpload(ctx, resp, req)
		return
	case "GetAttachments":
		s.serveGetAttachments(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *documentsServer) serveGet(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveGetJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetDocumentRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.Get
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetDocumentRequest) (*GetDocumentResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetDocumentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetDocumentRequest) when calling interceptor")
					}
					return s.Documents.Get(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetDocumentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetDocumentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetDocumentResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetDocumentResponse and nil error while calling Get. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetDocumentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.Get
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetDocumentRequest) (*GetDocumentResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetDocumentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetDocumentRequest) when calling interceptor")
					}
					return s.Documents.Get(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetDocumentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetDocumentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetDocumentResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetDocumentResponse and nil error while calling Get. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveBulkGet(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveBulkGetJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveBulkGetProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveBulkGetJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BulkGet")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(BulkGetRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.BulkGet
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *BulkGetRequest) (*BulkGetResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BulkGetRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BulkGetRequest) when calling interceptor")
					}
					return s.Documents.BulkGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BulkGetResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BulkGetResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *BulkGetResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BulkGetResponse and nil error while calling BulkGet. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveBulkGetProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BulkGet")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(BulkGetRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.BulkGet
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *BulkGetRequest) (*BulkGetResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BulkGetRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BulkGetRequest) when calling interceptor")
					}
					return s.Documents.BulkGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BulkGetResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BulkGetResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *BulkGetResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BulkGetResponse and nil error while calling BulkGet. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetHistory(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetHistoryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetHistoryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveGetHistoryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetHistory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetHistoryRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.GetHistory
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetHistoryRequest) (*GetHistoryResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetHistoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetHistoryRequest) when calling interceptor")
					}
					return s.Documents.GetHistory(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetHistoryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetHistoryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetHistoryResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetHistoryResponse and nil error while calling GetHistory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetHistoryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetHistory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetHistoryRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.GetHistory
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetHistoryRequest) (*GetHistoryResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetHistoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetHistoryRequest) when calling interceptor")
					}
					return s.Documents.GetHistory(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetHistoryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetHistoryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetHistoryResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetHistoryResponse and nil error while calling GetHistory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveUpdate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveUpdateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Update")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdateRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.Update
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateRequest) when calling interceptor")
					}
					return s.Documents.Update(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateResponse and nil error while calling Update. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveUpdateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Update")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdateRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.Update
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateRequest) when calling interceptor")
					}
					return s.Documents.Update(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateResponse and nil error while calling Update. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveBulkUpdate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveBulkUpdateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveBulkUpdateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveBulkUpdateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BulkUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(BulkUpdateRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.BulkUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *BulkUpdateRequest) (*BulkUpdateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BulkUpdateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BulkUpdateRequest) when calling interceptor")
					}
					return s.Documents.BulkUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BulkUpdateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BulkUpdateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *BulkUpdateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BulkUpdateResponse and nil error while calling BulkUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveBulkUpdateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BulkUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(BulkUpdateRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.BulkUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *BulkUpdateRequest) (*BulkUpdateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BulkUpdateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BulkUpdateRequest) when calling interceptor")
					}
					return s.Documents.BulkUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BulkUpdateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BulkUpdateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *BulkUpdateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BulkUpdateResponse and nil error while calling BulkUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveValidate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveValidateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveValidateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveValidateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Validate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ValidateRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.Validate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ValidateRequest) (*ValidateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ValidateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ValidateRequest) when calling interceptor")
					}
					return s.Documents.Validate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ValidateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ValidateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ValidateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ValidateResponse and nil error while calling Validate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveValidateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Validate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ValidateRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.Validate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ValidateRequest) (*ValidateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ValidateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ValidateRequest) when calling interceptor")
					}
					return s.Documents.Validate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ValidateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ValidateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ValidateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ValidateResponse and nil error while calling Validate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveDelete(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveDeleteJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Delete")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteDocumentRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.Delete
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteDocumentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteDocumentRequest) when calling interceptor")
					}
					return s.Documents.Delete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteDocumentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteDocumentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteDocumentResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteDocumentResponse and nil error while calling Delete. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveDeleteProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Delete")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteDocumentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.Delete
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteDocumentRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteDocumentRequest) when calling interceptor")
					}
					return s.Documents.Delete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteDocumentResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteDocumentResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteDocumentResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteDocumentResponse and nil error while calling Delete. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveListDeleted(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListDeletedJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListDeletedProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveListDeletedJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListDeleted")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListDeletedRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.ListDeleted
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListDeletedRequest) (*ListDeletedResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListDeletedRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListDeletedRequest) when calling interceptor")
					}
					return s.Documents.ListDeleted(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListDeletedResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListDeletedResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListDeletedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListDeletedResponse and nil error while calling ListDeleted. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveListDeletedProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListDeleted")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListDeletedRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.ListDeleted
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListDeletedRequest) (*ListDeletedResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListDeletedRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListDeletedRequest) when calling interceptor")
					}
					return s.Documents.ListDeleted(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListDeletedResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListDeletedResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListDeletedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListDeletedResponse and nil error while calling ListDeleted. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveRestore(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRestoreJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRestoreProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveRestoreJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Restore")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RestoreRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.Restore
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RestoreRequest) (*RestoreResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RestoreRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RestoreRequest) when calling interceptor")
					}
					return s.Documents.Restore(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RestoreResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RestoreResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RestoreResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RestoreResponse and nil error while calling Restore. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveRestoreProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Restore")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RestoreRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.Restore
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RestoreRequest) (*RestoreResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RestoreRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RestoreRequest) when calling interceptor")
					}
					return s.Documents.Restore(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RestoreResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RestoreResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RestoreResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RestoreResponse and nil error while calling Restore. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) servePurge(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePurgeJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePurgeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) servePurgeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Purge")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(PurgeRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.Purge
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PurgeRequest) (*PurgeResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PurgeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PurgeRequest) when calling interceptor")
					}
					return s.Documents.Purge(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PurgeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PurgeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PurgeResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PurgeResponse and nil error while calling Purge. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) servePurgeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Purge")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(PurgeRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.Purge
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PurgeRequest) (*PurgeResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PurgeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PurgeRequest) when calling interceptor")
					}
					return s.Documents.Purge(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PurgeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PurgeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PurgeResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PurgeResponse and nil error while calling Purge. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetMeta(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetMetaJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetMetaProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveGetMetaJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMeta")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetMetaRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.GetMeta
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetMetaRequest) (*GetMetaResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetMetaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetMetaRequest) when calling interceptor")
					}
					return s.Documents.GetMeta(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetMetaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetMetaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetMetaResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetMetaResponse and nil error while calling GetMeta. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetMetaProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMeta")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetMetaRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.GetMeta
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetMetaRequest) (*GetMetaResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetMetaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetMetaRequest) when calling interceptor")
					}
					return s.Documents.GetMeta(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetMetaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetMetaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetMetaResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetMetaResponse and nil error while calling GetMeta. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveEventlog(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveEventlogJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveEventlogProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveEventlogJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Eventlog")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetEventlogRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.Eventlog
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetEventlogRequest) (*GetEventlogResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetEventlogRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetEventlogRequest) when calling interceptor")
					}
					return s.Documents.Eventlog(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetEventlogResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetEventlogResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetEventlogResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetEventlogResponse and nil error while calling Eventlog. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveEventlogProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Eventlog")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetEventlogRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.Eventlog
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetEventlogRequest) (*GetEventlogResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetEventlogRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetEventlogRequest) when calling interceptor")
					}
					return s.Documents.Eventlog(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetEventlogResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetEventlogResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetEventlogResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetEventlogResponse and nil error while calling Eventlog. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveCompactedEventlog(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCompactedEventlogJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCompactedEventlogProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveCompactedEventlogJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CompactedEventlog")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetCompactedEventlogRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.CompactedEventlog
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetCompactedEventlogRequest) (*GetCompactedEventlogResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCompactedEventlogRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCompactedEventlogRequest) when calling interceptor")
					}
					return s.Documents.CompactedEventlog(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetCompactedEventlogResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetCompactedEventlogResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetCompactedEventlogResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetCompactedEventlogResponse and nil error while calling CompactedEventlog. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveCompactedEventlogProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CompactedEventlog")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetCompactedEventlogRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.CompactedEventlog
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetCompactedEventlogRequest) (*GetCompactedEventlogResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCompactedEventlogRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCompactedEventlogRequest) when calling interceptor")
					}
					return s.Documents.CompactedEventlog(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetCompactedEventlogResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetCompactedEventlogResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetCompactedEventlogResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetCompactedEventlogResponse and nil error while calling CompactedEventlog. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetStatus(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetStatusJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetStatusProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveGetStatusJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetStatusRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.GetStatus
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetStatusRequest) (*GetStatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusRequest) when calling interceptor")
					}
					return s.Documents.GetStatus(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetStatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStatusResponse and nil error while calling GetStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetStatusProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetStatusRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.GetStatus
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetStatusRequest) (*GetStatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusRequest) when calling interceptor")
					}
					return s.Documents.GetStatus(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetStatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStatusResponse and nil error while calling GetStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetStatusHistory(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetStatusHistoryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetStatusHistoryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveGetStatusHistoryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStatusHistory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetStatusHistoryRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.GetStatusHistory
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetStatusHistoryRequest) (*GetStatusHistoryReponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusHistoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusHistoryRequest) when calling interceptor")
					}
					return s.Documents.GetStatusHistory(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusHistoryReponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusHistoryReponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetStatusHistoryReponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStatusHistoryReponse and nil error while calling GetStatusHistory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetStatusHistoryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStatusHistory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetStatusHistoryRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.GetStatusHistory
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetStatusHistoryRequest) (*GetStatusHistoryReponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusHistoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusHistoryRequest) when calling interceptor")
					}
					return s.Documents.GetStatusHistory(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusHistoryReponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusHistoryReponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetStatusHistoryReponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStatusHistoryReponse and nil error while calling GetStatusHistory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetNilStatuses(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetNilStatusesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetNilStatusesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveGetNilStatusesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetNilStatuses")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetNilStatusesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.GetNilStatuses
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetNilStatusesRequest) (*GetNilStatusesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetNilStatusesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetNilStatusesRequest) when calling interceptor")
					}
					return s.Documents.GetNilStatuses(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetNilStatusesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetNilStatusesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetNilStatusesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetNilStatusesResponse and nil error while calling GetNilStatuses. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetNilStatusesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetNilStatuses")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetNilStatusesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.GetNilStatuses
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetNilStatusesRequest) (*GetNilStatusesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetNilStatusesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetNilStatusesRequest) when calling interceptor")
					}
					return s.Documents.GetNilStatuses(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetNilStatusesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetNilStatusesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetNilStatusesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetNilStatusesResponse and nil error while calling GetNilStatuses. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetStatusOverview(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetStatusOverviewJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetStatusOverviewProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveGetStatusOverviewJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStatusOverview")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetStatusOverviewRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.GetStatusOverview
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetStatusOverviewRequest) (*GetStatusOverviewResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusOverviewRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusOverviewRequest) when calling interceptor")
					}
					return s.Documents.GetStatusOverview(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusOverviewResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusOverviewResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetStatusOverviewResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStatusOverviewResponse and nil error while calling GetStatusOverview. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetStatusOverviewProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStatusOverview")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetStatusOverviewRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.GetStatusOverview
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetStatusOverviewRequest) (*GetStatusOverviewResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusOverviewRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusOverviewRequest) when calling interceptor")
					}
					return s.Documents.GetStatusOverview(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusOverviewResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusOverviewResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetStatusOverviewResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStatusOverviewResponse and nil error while calling GetStatusOverview. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetPermissions(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPermissionsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPermissionsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveGetPermissionsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPermissions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetPermissionsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.GetPermissions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetPermissionsRequest) (*GetPermissionsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPermissionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPermissionsRequest) when calling interceptor")
					}
					return s.Documents.GetPermissions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPermissionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPermissionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetPermissionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetPermissionsResponse and nil error while calling GetPermissions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetPermissionsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPermissions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetPermissionsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.GetPermissions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetPermissionsRequest) (*GetPermissionsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPermissionsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPermissionsRequest) when calling interceptor")
					}
					return s.Documents.GetPermissions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPermissionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPermissionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetPermissionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetPermissionsResponse and nil error while calling GetPermissions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveLock(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveLockJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveLockProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveLockJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Lock")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(LockRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.Lock
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *LockRequest) (*LockResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LockRequest) when calling interceptor")
					}
					return s.Documents.Lock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LockResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LockResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LockResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LockResponse and nil error while calling Lock. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveLockProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Lock")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(LockRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.Lock
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *LockRequest) (*LockResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LockRequest) when calling interceptor")
					}
					return s.Documents.Lock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LockResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LockResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LockResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LockResponse and nil error while calling Lock. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveExtendLock(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveExtendLockJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveExtendLockProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveExtendLockJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ExtendLock")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ExtendLockRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.ExtendLock
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ExtendLockRequest) (*LockResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExtendLockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExtendLockRequest) when calling interceptor")
					}
					return s.Documents.ExtendLock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LockResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LockResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LockResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LockResponse and nil error while calling ExtendLock. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveExtendLockProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ExtendLock")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ExtendLockRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.ExtendLock
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ExtendLockRequest) (*LockResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ExtendLockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ExtendLockRequest) when calling interceptor")
					}
					return s.Documents.ExtendLock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LockResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LockResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LockResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LockResponse and nil error while calling ExtendLock. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveUnlock(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUnlockJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUnlockProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveUnlockJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Unlock")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UnlockRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.Unlock
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UnlockRequest) (*UnlockResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UnlockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UnlockRequest) when calling interceptor")
					}
					return s.Documents.Unlock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UnlockResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UnlockResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UnlockResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UnlockResponse and nil error while calling Unlock. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveUnlockProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Unlock")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UnlockRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.Unlock
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UnlockRequest) (*UnlockResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UnlockRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UnlockRequest) when calling interceptor")
					}
					return s.Documents.Unlock(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UnlockResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UnlockResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UnlockResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UnlockResponse and nil error while calling Unlock. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetWithheld(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetWithheldJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetWithheldProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveGetWithheldJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetWithheld")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetWithheldRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.GetWithheld
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetWithheldRequest) (*GetWithheldResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWithheldRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWithheldRequest) when calling interceptor")
					}
					return s.Documents.GetWithheld(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetWithheldResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetWithheldResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetWithheldResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetWithheldResponse and nil error while calling GetWithheld. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetWithheldProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetWithheld")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetWithheldRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.GetWithheld
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetWithheldRequest) (*GetWithheldResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWithheldRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWithheldRequest) when calling interceptor")
					}
					return s.Documents.GetWithheld(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetWithheldResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetWithheldResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetWithheldResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetWithheldResponse and nil error while calling GetWithheld. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetDeliverableInfo(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetDeliverableInfoJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetDeliverableInfoProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveGetDeliverableInfoJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetDeliverableInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetDeliverableInfoRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.GetDeliverableInfo
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetDeliverableInfoRequest) (*GetDeliverableInfoResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetDeliverableInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetDeliverableInfoRequest) when calling interceptor")
					}
					return s.Documents.GetDeliverableInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetDeliverableInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetDeliverableInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetDeliverableInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetDeliverableInfoResponse and nil error while calling GetDeliverableInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetDeliverableInfoProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetDeliverableInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetDeliverableInfoRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.GetDeliverableInfo
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetDeliverableInfoRequest) (*GetDeliverableInfoResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetDeliverableInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetDeliverableInfoRequest) when calling interceptor")
					}
					return s.Documents.GetDeliverableInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetDeliverableInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetDeliverableInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetDeliverableInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetDeliverableInfoResponse and nil error while calling GetDeliverableInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveCreateUpload(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateUploadJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateUploadProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveCreateUploadJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateUpload")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateUploadRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.CreateUpload
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateUploadRequest) (*CreateUploadResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateUploadRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateUploadRequest) when calling interceptor")
					}
					return s.Documents.CreateUpload(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateUploadResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateUploadResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateUploadResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateUploadResponse and nil error while calling CreateUpload. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveCreateUploadProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateUpload")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateUploadRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.CreateUpload
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateUploadRequest) (*CreateUploadResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateUploadRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateUploadRequest) when calling interceptor")
					}
					return s.Documents.CreateUpload(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateUploadResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateUploadResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateUploadResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateUploadResponse and nil error while calling CreateUpload. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetAttachments(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetAttachmentsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetAttachmentsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *documentsServer) serveGetAttachmentsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAttachments")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetAttachmentsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Documents.GetAttachments
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetAttachmentsRequest) (*GetAttachmentsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetAttachmentsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetAttachmentsRequest) when calling interceptor")
					}
					return s.Documents.GetAttachments(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetAttachmentsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetAttachmentsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetAttachmentsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetAttachmentsResponse and nil error while calling GetAttachments. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) serveGetAttachmentsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAttachments")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetAttachmentsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Documents.GetAttachments
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetAttachmentsRequest) (*GetAttachmentsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetAttachmentsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetAttachmentsRequest) when calling interceptor")
					}
					return s.Documents.GetAttachments(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetAttachmentsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetAttachmentsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetAttachmentsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetAttachmentsResponse and nil error while calling GetAttachments. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *documentsServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 0
}

func (s *documentsServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *documentsServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "elephant.repository", "Documents")
}

// =================
// Schemas Interface
// =================

type Schemas interface {
	// Register register a new validation schema version.
	Register(context.Context, *RegisterSchemaRequest) (*RegisterSchemaResponse, error)

	// SetActive activates schema versions.
	SetActive(context.Context, *SetActiveSchemaRequest) (*SetActiveSchemaResponse, error)

	// Get retrieves a schema.
	Get(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error)

	// GetAllActiveSchemas returns the currently active schemas.
	GetAllActive(context.Context, *GetAllActiveSchemasRequest) (*GetAllActiveSchemasResponse, error)

	// RegisterMetaType registers a type that can be used for meta documents.
	RegisterMetaType(context.Context, *RegisterMetaTypeRequest) (*RegisterMetaTypeResponse, error)

	// RegisterMetaTypeUse registers a meta type for use with a main type.
	RegisterMetaTypeUse(context.Context, *RegisterMetaTypeUseRequest) (*RegisterMetaTypeUseResponse, error)

	// GetDeprecations lists all deprecations.
	GetDeprecations(context.Context, *GetDeprecationsRequest) (*GetDeprecationsResponse, error)

	// UpdateDeprecation creates or updates a deprecation.
	UpdateDeprecation(context.Context, *UpdateDeprecationRequest) (*UpdateDeprecationResponse, error)
}

// =======================
// Schemas Protobuf Client
// =======================

type schemasProtobufClient struct {
	client      HTTPClient
	urls        [8]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewSchemasProtobufClient creates a Protobuf client that implements the Schemas interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewSchemasProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Schemas {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "elephant.repository", "Schemas")
	urls := [8]string{
		serviceURL + "Register",
		serviceURL + "SetActive",
		serviceURL + "Get",
		serviceURL + "GetAllActive",
		serviceURL + "RegisterMetaType",
		serviceURL + "RegisterMetaTypeUse",
		serviceURL + "GetDeprecations",
		serviceURL + "UpdateDeprecation",
	}

	return &schemasProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *schemasProtobufClient) Register(ctx context.Context, in *RegisterSchemaRequest) (*RegisterSchemaResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	caller := c.callRegister
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RegisterSchemaRequest) (*RegisterSchemaResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterSchemaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterSchemaRequest) when calling interceptor")
					}
					return c.callRegister(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterSchemaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterSchemaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasProtobufClient) callRegister(ctx context.Context, in *RegisterSchemaRequest) (*RegisterSchemaResponse, error) {
	out := new(RegisterSchemaResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *schemasProtobufClient) SetActive(ctx context.Context, in *SetActiveSchemaRequest) (*SetActiveSchemaResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "SetActive")
	caller := c.callSetActive
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SetActiveSchemaRequest) (*SetActiveSchemaResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetActiveSchemaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetActiveSchemaRequest) when calling interceptor")
					}
					return c.callSetActive(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SetActiveSchemaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SetActiveSchemaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasProtobufClient) callSetActive(ctx context.Context, in *SetActiveSchemaRequest) (*SetActiveSchemaResponse, error) {
	out := new(SetActiveSchemaResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *schemasProtobufClient) Get(ctx context.Context, in *GetSchemaRequest) (*GetSchemaResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	caller := c.callGet
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSchemaRequest) (*GetSchemaResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSchemaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSchemaRequest) when calling interceptor")
					}
					return c.callGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSchemaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSchemaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasProtobufClient) callGet(ctx context.Context, in *GetSchemaRequest) (*GetSchemaResponse, error) {
	out := new(GetSchemaResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *schemasProtobufClient) GetAllActive(ctx context.Context, in *GetAllActiveSchemasRequest) (*GetAllActiveSchemasResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "GetAllActive")
	caller := c.callGetAllActive
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetAllActiveSchemasRequest) (*GetAllActiveSchemasResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetAllActiveSchemasRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetAllActiveSchemasRequest) when calling interceptor")
					}
					return c.callGetAllActive(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetAllActiveSchemasResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetAllActiveSchemasResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasProtobufClient) callGetAllActive(ctx context.Context, in *GetAllActiveSchemasRequest) (*GetAllActiveSchemasResponse, error) {
	out := new(GetAllActiveSchemasResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *schemasProtobufClient) RegisterMetaType(ctx context.Context, in *RegisterMetaTypeRequest) (*RegisterMetaTypeResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMetaType")
	caller := c.callRegisterMetaType
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RegisterMetaTypeRequest) (*RegisterMetaTypeResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetaTypeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetaTypeRequest) when calling interceptor")
					}
					return c.callRegisterMetaType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetaTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetaTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasProtobufClient) callRegisterMetaType(ctx context.Context, in *RegisterMetaTypeRequest) (*RegisterMetaTypeResponse, error) {
	out := new(RegisterMetaTypeResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *schemasProtobufClient) RegisterMetaTypeUse(ctx context.Context, in *RegisterMetaTypeUseRequest) (*RegisterMetaTypeUseResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMetaTypeUse")
	caller := c.callRegisterMetaTypeUse
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RegisterMetaTypeUseRequest) (*RegisterMetaTypeUseResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetaTypeUseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetaTypeUseRequest) when calling interceptor")
					}
					return c.callRegisterMetaTypeUse(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetaTypeUseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetaTypeUseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasProtobufClient) callRegisterMetaTypeUse(ctx context.Context, in *RegisterMetaTypeUseRequest) (*RegisterMetaTypeUseResponse, error) {
	out := new(RegisterMetaTypeUseResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *schemasProtobufClient) GetDeprecations(ctx context.Context, in *GetDeprecationsRequest) (*GetDeprecationsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "GetDeprecations")
	caller := c.callGetDeprecations
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetDeprecationsRequest) (*GetDeprecationsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetDeprecationsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetDeprecationsRequest) when calling interceptor")
					}
					return c.callGetDeprecations(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetDeprecationsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetDeprecationsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasProtobufClient) callGetDeprecations(ctx context.Context, in *GetDeprecationsRequest) (*GetDeprecationsResponse, error) {
	out := new(GetDeprecationsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *schemasProtobufClient) UpdateDeprecation(ctx context.Context, in *UpdateDeprecationRequest) (*UpdateDeprecationResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateDeprecation")
	caller := c.callUpdateDeprecation
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateDeprecationRequest) (*UpdateDeprecationResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateDeprecationRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateDeprecationRequest) when calling interceptor")
					}
					return c.callUpdateDeprecation(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateDeprecationResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateDeprecationResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasProtobufClient) callUpdateDeprecation(ctx context.Context, in *UpdateDeprecationRequest) (*UpdateDeprecationResponse, error) {
	out := new(UpdateDeprecationResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===================
// Schemas JSON Client
// ===================

type schemasJSONClient struct {
	client      HTTPClient
	urls        [8]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewSchemasJSONClient creates a JSON client that implements the Schemas interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewSchemasJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Schemas {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "elephant.repository", "Schemas")
	urls := [8]string{
		serviceURL + "Register",
		serviceURL + "SetActive",
		serviceURL + "Get",
		serviceURL + "GetAllActive",
		serviceURL + "RegisterMetaType",
		serviceURL + "RegisterMetaTypeUse",
		serviceURL + "GetDeprecations",
		serviceURL + "UpdateDeprecation",
	}

	return &schemasJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *schemasJSONClient) Register(ctx context.Context, in *RegisterSchemaRequest) (*RegisterSchemaResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	caller := c.callRegister
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RegisterSchemaRequest) (*RegisterSchemaResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterSchemaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterSchemaRequest) when calling interceptor")
					}
					return c.callRegister(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterSchemaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterSchemaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasJSONClient) callRegister(ctx context.Context, in *RegisterSchemaRequest) (*RegisterSchemaResponse, error) {
	out := new(RegisterSchemaResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *schemasJSONClient) SetActive(ctx context.Context, in *SetActiveSchemaRequest) (*SetActiveSchemaResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "SetActive")
	caller := c.callSetActive
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SetActiveSchemaRequest) (*SetActiveSchemaResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetActiveSchemaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetActiveSchemaRequest) when calling interceptor")
					}
					return c.callSetActive(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SetActiveSchemaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SetActiveSchemaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasJSONClient) callSetActive(ctx context.Context, in *SetActiveSchemaRequest) (*SetActiveSchemaResponse, error) {
	out := new(SetActiveSchemaResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *schemasJSONClient) Get(ctx context.Context, in *GetSchemaRequest) (*GetSchemaResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	caller := c.callGet
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSchemaRequest) (*GetSchemaResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSchemaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSchemaRequest) when calling interceptor")
					}
					return c.callGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSchemaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSchemaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasJSONClient) callGet(ctx context.Context, in *GetSchemaRequest) (*GetSchemaResponse, error) {
	out := new(GetSchemaResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *schemasJSONClient) GetAllActive(ctx context.Context, in *GetAllActiveSchemasRequest) (*GetAllActiveSchemasResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "GetAllActive")
	caller := c.callGetAllActive
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetAllActiveSchemasRequest) (*GetAllActiveSchemasResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetAllActiveSchemasRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetAllActiveSchemasRequest) when calling interceptor")
					}
					return c.callGetAllActive(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetAllActiveSchemasResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetAllActiveSchemasResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasJSONClient) callGetAllActive(ctx context.Context, in *GetAllActiveSchemasRequest) (*GetAllActiveSchemasResponse, error) {
	out := new(GetAllActiveSchemasResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *schemasJSONClient) RegisterMetaType(ctx context.Context, in *RegisterMetaTypeRequest) (*RegisterMetaTypeResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMetaType")
	caller := c.callRegisterMetaType
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RegisterMetaTypeRequest) (*RegisterMetaTypeResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetaTypeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetaTypeRequest) when calling interceptor")
					}
					return c.callRegisterMetaType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetaTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetaTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasJSONClient) callRegisterMetaType(ctx context.Context, in *RegisterMetaTypeRequest) (*RegisterMetaTypeResponse, error) {
	out := new(RegisterMetaTypeResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *schemasJSONClient) RegisterMetaTypeUse(ctx context.Context, in *RegisterMetaTypeUseRequest) (*RegisterMetaTypeUseResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMetaTypeUse")
	caller := c.callRegisterMetaTypeUse
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RegisterMetaTypeUseRequest) (*RegisterMetaTypeUseResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetaTypeUseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetaTypeUseRequest) when calling interceptor")
					}
					return c.callRegisterMetaTypeUse(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetaTypeUseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetaTypeUseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasJSONClient) callRegisterMetaTypeUse(ctx context.Context, in *RegisterMetaTypeUseRequest) (*RegisterMetaTypeUseResponse, error) {
	out := new(RegisterMetaTypeUseResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *schemasJSONClient) GetDeprecations(ctx context.Context, in *GetDeprecationsRequest) (*GetDeprecationsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "GetDeprecations")
	caller := c.callGetDeprecations
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetDeprecationsRequest) (*GetDeprecationsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetDeprecationsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetDeprecationsRequest) when calling interceptor")
					}
					return c.callGetDeprecations(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetDeprecationsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetDeprecationsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasJSONClient) callGetDeprecations(ctx context.Context, in *GetDeprecationsRequest) (*GetDeprecationsResponse, error) {
	out := new(GetDeprecationsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *schemasJSONClient) UpdateDeprecation(ctx context.Context, in *UpdateDeprecationRequest) (*UpdateDeprecationResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateDeprecation")
	caller := c.callUpdateDeprecation
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateDeprecationRequest) (*UpdateDeprecationResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateDeprecationRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateDeprecationRequest) when calling interceptor")
					}
					return c.callUpdateDeprecation(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateDeprecationResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateDeprecationResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *schemasJSONClient) callUpdateDeprecation(ctx context.Context, in *UpdateDeprecationRequest) (*UpdateDeprecationResponse, error) {
	out := new(UpdateDeprecationResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ======================
// Schemas Server Handler
// ======================

type schemasServer struct {
	Schemas
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewSchemasServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewSchemasServer(svc Schemas, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &schemasServer{
		Schemas:          svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *schemasServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *schemasServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// SchemasPathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const SchemasPathPrefix = "/twirp/elephant.repository.Schemas/"

func (s *schemasServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Schemas")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "elephant.repository.Schemas" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "Register":
		s.serveRegister(ctx, resp, req)
		return
	case "SetActive":
		s.serveSetActive(ctx, resp, req)
		return
	case "Get":
		s.serveGet(ctx, resp, req)
		return
	case "GetAllActive":
		s.serveGetAllActive(ctx, resp, req)
		return
	case "RegisterMetaType":
		s.serveRegisterMetaType(ctx, resp, req)
		return
	case "RegisterMetaTypeUse":
		s.serveRegisterMetaTypeUse(ctx, resp, req)
		return
	case "GetDeprecations":
		s.serveGetDeprecations(ctx, resp, req)
		return
	case "UpdateDeprecation":
		s.serveUpdateDeprecation(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *schemasServer) serveRegister(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegisterJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegisterProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *schemasServer) serveRegisterJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RegisterSchemaRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Schemas.Register
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RegisterSchemaRequest) (*RegisterSchemaResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterSchemaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterSchemaRequest) when calling interceptor")
					}
					return s.Schemas.Register(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterSchemaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterSchemaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegisterSchemaResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterSchemaResponse and nil error while calling Register. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) serveRegisterProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RegisterSchemaRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Schemas.Register
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RegisterSchemaRequest) (*RegisterSchemaResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterSchemaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterSchemaRequest) when calling interceptor")
					}
					return s.Schemas.Register(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterSchemaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterSchemaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegisterSchemaResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterSchemaResponse and nil error while calling Register. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) serveSetActive(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetActiveJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetActiveProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *schemasServer) serveSetActiveJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetActive")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(SetActiveSchemaRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Schemas.SetActive
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SetActiveSchemaRequest) (*SetActiveSchemaResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetActiveSchemaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetActiveSchemaRequest) when calling interceptor")
					}
					return s.Schemas.SetActive(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SetActiveSchemaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SetActiveSchemaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SetActiveSchemaResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SetActiveSchemaResponse and nil error while calling SetActive. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) serveSetActiveProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetActive")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(SetActiveSchemaRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Schemas.SetActive
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SetActiveSchemaRequest) (*SetActiveSchemaResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetActiveSchemaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetActiveSchemaRequest) when calling interceptor")
					}
					return s.Schemas.SetActive(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SetActiveSchemaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SetActiveSchemaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SetActiveSchemaResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SetActiveSchemaResponse and nil error while calling SetActive. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) serveGet(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *schemasServer) serveGetJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetSchemaRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Schemas.Get
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSchemaRequest) (*GetSchemaResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSchemaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSchemaRequest) when calling interceptor")
					}
					return s.Schemas.Get(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSchemaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSchemaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetSchemaResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSchemaResponse and nil error while calling Get. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) serveGetProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetSchemaRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Schemas.Get
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSchemaRequest) (*GetSchemaResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSchemaRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSchemaRequest) when calling interceptor")
					}
					return s.Schemas.Get(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSchemaResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSchemaResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetSchemaResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSchemaResponse and nil error while calling Get. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) serveGetAllActive(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetAllActiveJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetAllActiveProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *schemasServer) serveGetAllActiveJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAllActive")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetAllActiveSchemasRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Schemas.GetAllActive
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetAllActiveSchemasRequest) (*GetAllActiveSchemasResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetAllActiveSchemasRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetAllActiveSchemasRequest) when calling interceptor")
					}
					return s.Schemas.GetAllActive(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetAllActiveSchemasResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetAllActiveSchemasResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetAllActiveSchemasResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetAllActiveSchemasResponse and nil error while calling GetAllActive. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) serveGetAllActiveProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAllActive")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetAllActiveSchemasRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Schemas.GetAllActive
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetAllActiveSchemasRequest) (*GetAllActiveSchemasResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetAllActiveSchemasRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetAllActiveSchemasRequest) when calling interceptor")
					}
					return s.Schemas.GetAllActive(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetAllActiveSchemasResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetAllActiveSchemasResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetAllActiveSchemasResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetAllActiveSchemasResponse and nil error while calling GetAllActive. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) serveRegisterMetaType(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegisterMetaTypeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegisterMetaTypeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *schemasServer) serveRegisterMetaTypeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMetaType")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RegisterMetaTypeRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Schemas.RegisterMetaType
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RegisterMetaTypeRequest) (*RegisterMetaTypeResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetaTypeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetaTypeRequest) when calling interceptor")
					}
					return s.Schemas.RegisterMetaType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetaTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetaTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegisterMetaTypeResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterMetaTypeResponse and nil error while calling RegisterMetaType. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) serveRegisterMetaTypeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMetaType")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RegisterMetaTypeRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Schemas.RegisterMetaType
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RegisterMetaTypeRequest) (*RegisterMetaTypeResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetaTypeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetaTypeRequest) when calling interceptor")
					}
					return s.Schemas.RegisterMetaType(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetaTypeResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetaTypeResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegisterMetaTypeResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterMetaTypeResponse and nil error while calling RegisterMetaType. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) serveRegisterMetaTypeUse(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegisterMetaTypeUseJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegisterMetaTypeUseProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *schemasServer) serveRegisterMetaTypeUseJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMetaTypeUse")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RegisterMetaTypeUseRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Schemas.RegisterMetaTypeUse
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RegisterMetaTypeUseRequest) (*RegisterMetaTypeUseResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetaTypeUseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetaTypeUseRequest) when calling interceptor")
					}
					return s.Schemas.RegisterMetaTypeUse(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetaTypeUseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetaTypeUseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegisterMetaTypeUseResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterMetaTypeUseResponse and nil error while calling RegisterMetaTypeUse. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) serveRegisterMetaTypeUseProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMetaTypeUse")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RegisterMetaTypeUseRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Schemas.RegisterMetaTypeUse
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RegisterMetaTypeUseRequest) (*RegisterMetaTypeUseResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetaTypeUseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetaTypeUseRequest) when calling interceptor")
					}
					return s.Schemas.RegisterMetaTypeUse(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetaTypeUseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetaTypeUseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegisterMetaTypeUseResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterMetaTypeUseResponse and nil error while calling RegisterMetaTypeUse. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) serveGetDeprecations(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetDeprecationsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetDeprecationsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *schemasServer) serveGetDeprecationsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetDeprecations")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetDeprecationsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Schemas.GetDeprecations
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetDeprecationsRequest) (*GetDeprecationsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetDeprecationsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetDeprecationsRequest) when calling interceptor")
					}
					return s.Schemas.GetDeprecations(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetDeprecationsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetDeprecationsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetDeprecationsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetDeprecationsResponse and nil error while calling GetDeprecations. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) serveGetDeprecationsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetDeprecations")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetDeprecationsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Schemas.GetDeprecations
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetDeprecationsRequest) (*GetDeprecationsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetDeprecationsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetDeprecationsRequest) when calling interceptor")
					}
					return s.Schemas.GetDeprecations(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetDeprecationsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetDeprecationsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetDeprecationsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetDeprecationsResponse and nil error while calling GetDeprecations. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) serveUpdateDeprecation(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateDeprecationJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateDeprecationProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *schemasServer) serveUpdateDeprecationJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateDeprecation")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdateDeprecationRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Schemas.UpdateDeprecation
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateDeprecationRequest) (*UpdateDeprecationResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateDeprecationRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateDeprecationRequest) when calling interceptor")
					}
					return s.Schemas.UpdateDeprecation(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateDeprecationResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateDeprecationResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdateDeprecationResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateDeprecationResponse and nil error while calling UpdateDeprecation. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) serveUpdateDeprecationProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateDeprecation")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdateDeprecationRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Schemas.UpdateDeprecation
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateDeprecationRequest) (*UpdateDeprecationResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateDeprecationRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateDeprecationRequest) when calling interceptor")
					}
					return s.Schemas.UpdateDeprecation(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateDeprecationResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateDeprecationResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdateDeprecationResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateDeprecationResponse and nil error while calling UpdateDeprecation. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *schemasServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 1
}

func (s *schemasServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *schemasServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "elephant.repository", "Schemas")
}

// ===================
// Workflows Interface
// ===================

type Workflows interface {
	// UpdateStatus creates or updates a status that can be used for documents.
	UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error)

	// GetStatuses lists all enabled statuses.
	GetStatuses(context.Context, *GetStatusesRequest) (*GetStatusesResponse, error)

	// CreateStatusRule creates or updates a status rule that should be applied
	// when setting statuses.
	CreateStatusRule(context.Context, *CreateStatusRuleRequest) (*CreateStatusRuleResponse, error)

	// DeleteStatusRule removes a status rule.
	DeleteStatusRule(context.Context, *DeleteStatusRuleRequest) (*DeleteStatusRuleResponse, error)

	// GetStatusRules returns all status rules.
	GetStatusRules(context.Context, *GetStatusRulesRequest) (*GetStatusRulesResponse, error)

	// SetWorkflow configures a workflow for a document type.
	SetWorkflow(context.Context, *SetWorkflowRequest) (*SetWorkflowResponse, error)

	// GetWorkflow for a document type.
	GetWorkflow(context.Context, *GetWorkflowRequest) (*GetWorkflowResponse, error)

	// DeleteWorkflow removes the workflow configuration for a document type.
	DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*DeleteWorkflowResponse, error)
}

// =========================
// Workflows Protobuf Client
// =========================

type workflowsProtobufClient struct {
	client      HTTPClient
	urls        [8]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewWorkflowsProtobufClient creates a Protobuf client that implements the Workflows interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewWorkflowsProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Workflows {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "elephant.repository", "Workflows")
	urls := [8]string{
		serviceURL + "UpdateStatus",
		serviceURL + "GetStatuses",
		serviceURL + "CreateStatusRule",
		serviceURL + "DeleteStatusRule",
		serviceURL + "GetStatusRules",
		serviceURL + "SetWorkflow",
		serviceURL + "GetWorkflow",
		serviceURL + "DeleteWorkflow",
	}

	return &workflowsProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *workflowsProtobufClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateStatus")
	caller := c.callUpdateStatus
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateStatusRequest) (*UpdateStatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateStatusRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateStatusRequest) when calling interceptor")
					}
					return c.callUpdateStatus(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateStatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateStatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsProtobufClient) callUpdateStatus(ctx context.Context, in *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	out := new(UpdateStatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowsProtobufClient) GetStatuses(ctx context.Context, in *GetStatusesRequest) (*GetStatusesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "GetStatuses")
	caller := c.callGetStatuses
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetStatusesRequest) (*GetStatusesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusesRequest) when calling interceptor")
					}
					return c.callGetStatuses(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsProtobufClient) callGetStatuses(ctx context.Context, in *GetStatusesRequest) (*GetStatusesResponse, error) {
	out := new(GetStatusesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowsProtobufClient) CreateStatusRule(ctx context.Context, in *CreateStatusRuleRequest) (*CreateStatusRuleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "CreateStatusRule")
	caller := c.callCreateStatusRule
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateStatusRuleRequest) (*CreateStatusRuleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateStatusRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateStatusRuleRequest) when calling interceptor")
					}
					return c.callCreateStatusRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateStatusRuleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateStatusRuleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsProtobufClient) callCreateStatusRule(ctx context.Context, in *CreateStatusRuleRequest) (*CreateStatusRuleResponse, error) {
	out := new(CreateStatusRuleResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowsProtobufClient) DeleteStatusRule(ctx context.Context, in *DeleteStatusRuleRequest) (*DeleteStatusRuleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteStatusRule")
	caller := c.callDeleteStatusRule
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteStatusRuleRequest) (*DeleteStatusRuleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteStatusRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteStatusRuleRequest) when calling interceptor")
					}
					return c.callDeleteStatusRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteStatusRuleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteStatusRuleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsProtobufClient) callDeleteStatusRule(ctx context.Context, in *DeleteStatusRuleRequest) (*DeleteStatusRuleResponse, error) {
	out := new(DeleteStatusRuleResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowsProtobufClient) GetStatusRules(ctx context.Context, in *GetStatusRulesRequest) (*GetStatusRulesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "GetStatusRules")
	caller := c.callGetStatusRules
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetStatusRulesRequest) (*GetStatusRulesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusRulesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusRulesRequest) when calling interceptor")
					}
					return c.callGetStatusRules(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusRulesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusRulesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsProtobufClient) callGetStatusRules(ctx context.Context, in *GetStatusRulesRequest) (*GetStatusRulesResponse, error) {
	out := new(GetStatusRulesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowsProtobufClient) SetWorkflow(ctx context.Context, in *SetWorkflowRequest) (*SetWorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "SetWorkflow")
	caller := c.callSetWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SetWorkflowRequest) (*SetWorkflowResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetWorkflowRequest) when calling interceptor")
					}
					return c.callSetWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SetWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SetWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsProtobufClient) callSetWorkflow(ctx context.Context, in *SetWorkflowRequest) (*SetWorkflowResponse, error) {
	out := new(SetWorkflowResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowsProtobufClient) GetWorkflow(ctx context.Context, in *GetWorkflowRequest) (*GetWorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflow")
	caller := c.callGetWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetWorkflowRequest) (*GetWorkflowResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWorkflowRequest) when calling interceptor")
					}
					return c.callGetWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsProtobufClient) callGetWorkflow(ctx context.Context, in *GetWorkflowRequest) (*GetWorkflowResponse, error) {
	out := new(GetWorkflowResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowsProtobufClient) DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest) (*DeleteWorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteWorkflow")
	caller := c.callDeleteWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteWorkflowRequest) (*DeleteWorkflowResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteWorkflowRequest) when calling interceptor")
					}
					return c.callDeleteWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsProtobufClient) callDeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest) (*DeleteWorkflowResponse, error) {
	out := new(DeleteWorkflowResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =====================
// Workflows JSON Client
// =====================

type workflowsJSONClient struct {
	client      HTTPClient
	urls        [8]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewWorkflowsJSONClient creates a JSON client that implements the Workflows interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewWorkflowsJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Workflows {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "elephant.repository", "Workflows")
	urls := [8]string{
		serviceURL + "UpdateStatus",
		serviceURL + "GetStatuses",
		serviceURL + "CreateStatusRule",
		serviceURL + "DeleteStatusRule",
		serviceURL + "GetStatusRules",
		serviceURL + "SetWorkflow",
		serviceURL + "GetWorkflow",
		serviceURL + "DeleteWorkflow",
	}

	return &workflowsJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *workflowsJSONClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateStatus")
	caller := c.callUpdateStatus
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateStatusRequest) (*UpdateStatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateStatusRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateStatusRequest) when calling interceptor")
					}
					return c.callUpdateStatus(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateStatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateStatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsJSONClient) callUpdateStatus(ctx context.Context, in *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	out := new(UpdateStatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowsJSONClient) GetStatuses(ctx context.Context, in *GetStatusesRequest) (*GetStatusesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "GetStatuses")
	caller := c.callGetStatuses
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetStatusesRequest) (*GetStatusesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusesRequest) when calling interceptor")
					}
					return c.callGetStatuses(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsJSONClient) callGetStatuses(ctx context.Context, in *GetStatusesRequest) (*GetStatusesResponse, error) {
	out := new(GetStatusesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowsJSONClient) CreateStatusRule(ctx context.Context, in *CreateStatusRuleRequest) (*CreateStatusRuleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "CreateStatusRule")
	caller := c.callCreateStatusRule
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateStatusRuleRequest) (*CreateStatusRuleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateStatusRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateStatusRuleRequest) when calling interceptor")
					}
					return c.callCreateStatusRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateStatusRuleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateStatusRuleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsJSONClient) callCreateStatusRule(ctx context.Context, in *CreateStatusRuleRequest) (*CreateStatusRuleResponse, error) {
	out := new(CreateStatusRuleResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowsJSONClient) DeleteStatusRule(ctx context.Context, in *DeleteStatusRuleRequest) (*DeleteStatusRuleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteStatusRule")
	caller := c.callDeleteStatusRule
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteStatusRuleRequest) (*DeleteStatusRuleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteStatusRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteStatusRuleRequest) when calling interceptor")
					}
					return c.callDeleteStatusRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteStatusRuleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteStatusRuleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsJSONClient) callDeleteStatusRule(ctx context.Context, in *DeleteStatusRuleRequest) (*DeleteStatusRuleResponse, error) {
	out := new(DeleteStatusRuleResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowsJSONClient) GetStatusRules(ctx context.Context, in *GetStatusRulesRequest) (*GetStatusRulesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "GetStatusRules")
	caller := c.callGetStatusRules
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetStatusRulesRequest) (*GetStatusRulesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusRulesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusRulesRequest) when calling interceptor")
					}
					return c.callGetStatusRules(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusRulesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusRulesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsJSONClient) callGetStatusRules(ctx context.Context, in *GetStatusRulesRequest) (*GetStatusRulesResponse, error) {
	out := new(GetStatusRulesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowsJSONClient) SetWorkflow(ctx context.Context, in *SetWorkflowRequest) (*SetWorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "SetWorkflow")
	caller := c.callSetWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SetWorkflowRequest) (*SetWorkflowResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetWorkflowRequest) when calling interceptor")
					}
					return c.callSetWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SetWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SetWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsJSONClient) callSetWorkflow(ctx context.Context, in *SetWorkflowRequest) (*SetWorkflowResponse, error) {
	out := new(SetWorkflowResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowsJSONClient) GetWorkflow(ctx context.Context, in *GetWorkflowRequest) (*GetWorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflow")
	caller := c.callGetWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetWorkflowRequest) (*GetWorkflowResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWorkflowRequest) when calling interceptor")
					}
					return c.callGetWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsJSONClient) callGetWorkflow(ctx context.Context, in *GetWorkflowRequest) (*GetWorkflowResponse, error) {
	out := new(GetWorkflowResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *workflowsJSONClient) DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest) (*DeleteWorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteWorkflow")
	caller := c.callDeleteWorkflow
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteWorkflowRequest) (*DeleteWorkflowResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteWorkflowRequest) when calling interceptor")
					}
					return c.callDeleteWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *workflowsJSONClient) callDeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest) (*DeleteWorkflowResponse, error) {
	out := new(DeleteWorkflowResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ========================
// Workflows Server Handler
// ========================

type workflowsServer struct {
	Workflows
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewWorkflowsServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewWorkflowsServer(svc Workflows, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &workflowsServer{
		Workflows:        svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *workflowsServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *workflowsServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// WorkflowsPathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const WorkflowsPathPrefix = "/twirp/elephant.repository.Workflows/"

func (s *workflowsServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Workflows")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "elephant.repository.Workflows" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "UpdateStatus":
		s.serveUpdateStatus(ctx, resp, req)
		return
	case "GetStatuses":
		s.serveGetStatuses(ctx, resp, req)
		return
	case "CreateStatusRule":
		s.serveCreateStatusRule(ctx, resp, req)
		return
	case "DeleteStatusRule":
		s.serveDeleteStatusRule(ctx, resp, req)
		return
	case "GetStatusRules":
		s.serveGetStatusRules(ctx, resp, req)
		return
	case "SetWorkflow":
		s.serveSetWorkflow(ctx, resp, req)
		return
	case "GetWorkflow":
		s.serveGetWorkflow(ctx, resp, req)
		return
	case "DeleteWorkflow":
		s.serveDeleteWorkflow(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *workflowsServer) serveUpdateStatus(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateStatusJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateStatusProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowsServer) serveUpdateStatusJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdateStatusRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Workflows.UpdateStatus
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateStatusRequest) (*UpdateStatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateStatusRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateStatusRequest) when calling interceptor")
					}
					return s.Workflows.UpdateStatus(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateStatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateStatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdateStatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateStatusResponse and nil error while calling UpdateStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) serveUpdateStatusProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdateStatusRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Workflows.UpdateStatus
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateStatusRequest) (*UpdateStatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateStatusRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateStatusRequest) when calling interceptor")
					}
					return s.Workflows.UpdateStatus(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateStatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateStatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdateStatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateStatusResponse and nil error while calling UpdateStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) serveGetStatuses(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetStatusesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetStatusesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowsServer) serveGetStatusesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStatuses")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetStatusesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Workflows.GetStatuses
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetStatusesRequest) (*GetStatusesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusesRequest) when calling interceptor")
					}
					return s.Workflows.GetStatuses(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetStatusesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStatusesResponse and nil error while calling GetStatuses. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) serveGetStatusesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStatuses")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetStatusesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Workflows.GetStatuses
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetStatusesRequest) (*GetStatusesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusesRequest) when calling interceptor")
					}
					return s.Workflows.GetStatuses(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetStatusesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStatusesResponse and nil error while calling GetStatuses. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) serveCreateStatusRule(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateStatusRuleJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateStatusRuleProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowsServer) serveCreateStatusRuleJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateStatusRule")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateStatusRuleRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Workflows.CreateStatusRule
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateStatusRuleRequest) (*CreateStatusRuleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateStatusRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateStatusRuleRequest) when calling interceptor")
					}
					return s.Workflows.CreateStatusRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateStatusRuleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateStatusRuleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateStatusRuleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateStatusRuleResponse and nil error while calling CreateStatusRule. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) serveCreateStatusRuleProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateStatusRule")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateStatusRuleRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Workflows.CreateStatusRule
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateStatusRuleRequest) (*CreateStatusRuleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateStatusRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateStatusRuleRequest) when calling interceptor")
					}
					return s.Workflows.CreateStatusRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateStatusRuleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateStatusRuleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateStatusRuleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateStatusRuleResponse and nil error while calling CreateStatusRule. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) serveDeleteStatusRule(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteStatusRuleJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteStatusRuleProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowsServer) serveDeleteStatusRuleJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteStatusRule")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteStatusRuleRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Workflows.DeleteStatusRule
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteStatusRuleRequest) (*DeleteStatusRuleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteStatusRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteStatusRuleRequest) when calling interceptor")
					}
					return s.Workflows.DeleteStatusRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteStatusRuleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteStatusRuleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteStatusRuleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteStatusRuleResponse and nil error while calling DeleteStatusRule. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) serveDeleteStatusRuleProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteStatusRule")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteStatusRuleRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Workflows.DeleteStatusRule
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteStatusRuleRequest) (*DeleteStatusRuleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteStatusRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteStatusRuleRequest) when calling interceptor")
					}
					return s.Workflows.DeleteStatusRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteStatusRuleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteStatusRuleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteStatusRuleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteStatusRuleResponse and nil error while calling DeleteStatusRule. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) serveGetStatusRules(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetStatusRulesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetStatusRulesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowsServer) serveGetStatusRulesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStatusRules")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetStatusRulesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Workflows.GetStatusRules
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetStatusRulesRequest) (*GetStatusRulesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusRulesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusRulesRequest) when calling interceptor")
					}
					return s.Workflows.GetStatusRules(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusRulesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusRulesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetStatusRulesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStatusRulesResponse and nil error while calling GetStatusRules. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) serveGetStatusRulesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStatusRules")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetStatusRulesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Workflows.GetStatusRules
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetStatusRulesRequest) (*GetStatusRulesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetStatusRulesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetStatusRulesRequest) when calling interceptor")
					}
					return s.Workflows.GetStatusRules(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetStatusRulesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetStatusRulesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetStatusRulesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStatusRulesResponse and nil error while calling GetStatusRules. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) serveSetWorkflow(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetWorkflowJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetWorkflowProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowsServer) serveSetWorkflowJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(SetWorkflowRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Workflows.SetWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SetWorkflowRequest) (*SetWorkflowResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetWorkflowRequest) when calling interceptor")
					}
					return s.Workflows.SetWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SetWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SetWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SetWorkflowResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SetWorkflowResponse and nil error while calling SetWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) serveSetWorkflowProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(SetWorkflowRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Workflows.SetWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SetWorkflowRequest) (*SetWorkflowResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetWorkflowRequest) when calling interceptor")
					}
					return s.Workflows.SetWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SetWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SetWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SetWorkflowResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SetWorkflowResponse and nil error while calling SetWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) serveGetWorkflow(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetWorkflowJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetWorkflowProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowsServer) serveGetWorkflowJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetWorkflowRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Workflows.GetWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetWorkflowRequest) (*GetWorkflowResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWorkflowRequest) when calling interceptor")
					}
					return s.Workflows.GetWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetWorkflowResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetWorkflowResponse and nil error while calling GetWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) serveGetWorkflowProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetWorkflowRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Workflows.GetWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetWorkflowRequest) (*GetWorkflowResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetWorkflowRequest) when calling interceptor")
					}
					return s.Workflows.GetWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetWorkflowResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetWorkflowResponse and nil error while calling GetWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) serveDeleteWorkflow(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteWorkflowJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteWorkflowProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowsServer) serveDeleteWorkflowJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteWorkflowRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Workflows.DeleteWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteWorkflowRequest) (*DeleteWorkflowResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteWorkflowRequest) when calling interceptor")
					}
					return s.Workflows.DeleteWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteWorkflowResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteWorkflowResponse and nil error while calling DeleteWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) serveDeleteWorkflowProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteWorkflowRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Workflows.DeleteWorkflow
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteWorkflowRequest) (*DeleteWorkflowResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteWorkflowRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteWorkflowRequest) when calling interceptor")
					}
					return s.Workflows.DeleteWorkflow(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteWorkflowResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteWorkflowResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteWorkflowResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteWorkflowResponse and nil error while calling DeleteWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowsServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 2
}

func (s *workflowsServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *workflowsServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "elephant.repository", "Workflows")
}

// =================
// Metrics Interface
// =================

type Metrics interface {
	// Register a metric kind
	RegisterKind(context.Context, *RegisterMetricKindRequest) (*RegisterMetricKindResponse, error)

	// Delete a metric kind
	DeleteKind(context.Context, *DeleteMetricKindRequest) (*DeleteMetricKindResponse, error)

	// List all metric kinds
	GetKinds(context.Context, *GetMetricKindsRequest) (*GetMetricKindsResponse, error)

	// Register a data point
	RegisterMetric(context.Context, *RegisterMetricRequest) (*RegisterMetricResponse, error)

	// GetMetrics returns metrics related to a document.
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
}

// =======================
// Metrics Protobuf Client
// =======================

type metricsProtobufClient struct {
	client      HTTPClient
	urls        [5]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewMetricsProtobufClient creates a Protobuf client that implements the Metrics interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewMetricsProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Metrics {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "elephant.repository", "Metrics")
	urls := [5]string{
		serviceURL + "RegisterKind",
		serviceURL + "DeleteKind",
		serviceURL + "GetKinds",
		serviceURL + "RegisterMetric",
		serviceURL + "GetMetrics",
	}

	return &metricsProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *metricsProtobufClient) RegisterKind(ctx context.Context, in *RegisterMetricKindRequest) (*RegisterMetricKindResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Metrics")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterKind")
	caller := c.callRegisterKind
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RegisterMetricKindRequest) (*RegisterMetricKindResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetricKindRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetricKindRequest) when calling interceptor")
					}
					return c.callRegisterKind(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetricKindResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetricKindResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *metricsProtobufClient) callRegisterKind(ctx context.Context, in *RegisterMetricKindRequest) (*RegisterMetricKindResponse, error) {
	out := new(RegisterMetricKindResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *metricsProtobufClient) DeleteKind(ctx context.Context, in *DeleteMetricKindRequest) (*DeleteMetricKindResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Metrics")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteKind")
	caller := c.callDeleteKind
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteMetricKindRequest) (*DeleteMetricKindResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteMetricKindRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteMetricKindRequest) when calling interceptor")
					}
					return c.callDeleteKind(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteMetricKindResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteMetricKindResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *metricsProtobufClient) callDeleteKind(ctx context.Context, in *DeleteMetricKindRequest) (*DeleteMetricKindResponse, error) {
	out := new(DeleteMetricKindResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *metricsProtobufClient) GetKinds(ctx context.Context, in *GetMetricKindsRequest) (*GetMetricKindsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Metrics")
	ctx = ctxsetters.WithMethodName(ctx, "GetKinds")
	caller := c.callGetKinds
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetMetricKindsRequest) (*GetMetricKindsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetMetricKindsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetMetricKindsRequest) when calling interceptor")
					}
					return c.callGetKinds(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetMetricKindsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetMetricKindsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *metricsProtobufClient) callGetKinds(ctx context.Context, in *GetMetricKindsRequest) (*GetMetricKindsResponse, error) {
	out := new(GetMetricKindsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *metricsProtobufClient) RegisterMetric(ctx context.Context, in *RegisterMetricRequest) (*RegisterMetricResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Metrics")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMetric")
	caller := c.callRegisterMetric
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RegisterMetricRequest) (*RegisterMetricResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetricRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetricRequest) when calling interceptor")
					}
					return c.callRegisterMetric(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetricResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetricResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *metricsProtobufClient) callRegisterMetric(ctx context.Context, in *RegisterMetricRequest) (*RegisterMetricResponse, error) {
	out := new(RegisterMetricResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *metricsProtobufClient) GetMetrics(ctx context.Context, in *GetMetricsRequest) (*GetMetricsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Metrics")
	ctx = ctxsetters.WithMethodName(ctx, "GetMetrics")
	caller := c.callGetMetrics
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetMetricsRequest) (*GetMetricsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetMetricsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetMetricsRequest) when calling interceptor")
					}
					return c.callGetMetrics(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetMetricsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetMetricsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *metricsProtobufClient) callGetMetrics(ctx context.Context, in *GetMetricsRequest) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===================
// Metrics JSON Client
// ===================

type metricsJSONClient struct {
	client      HTTPClient
	urls        [5]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewMetricsJSONClient creates a JSON client that implements the Metrics interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewMetricsJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Metrics {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "elephant.repository", "Metrics")
	urls := [5]string{
		serviceURL + "RegisterKind",
		serviceURL + "DeleteKind",
		serviceURL + "GetKinds",
		serviceURL + "RegisterMetric",
		serviceURL + "GetMetrics",
	}

	return &metricsJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *metricsJSONClient) RegisterKind(ctx context.Context, in *RegisterMetricKindRequest) (*RegisterMetricKindResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Metrics")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterKind")
	caller := c.callRegisterKind
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RegisterMetricKindRequest) (*RegisterMetricKindResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetricKindRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetricKindRequest) when calling interceptor")
					}
					return c.callRegisterKind(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetricKindResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetricKindResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *metricsJSONClient) callRegisterKind(ctx context.Context, in *RegisterMetricKindRequest) (*RegisterMetricKindResponse, error) {
	out := new(RegisterMetricKindResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *metricsJSONClient) DeleteKind(ctx context.Context, in *DeleteMetricKindRequest) (*DeleteMetricKindResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Metrics")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteKind")
	caller := c.callDeleteKind
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteMetricKindRequest) (*DeleteMetricKindResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteMetricKindRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteMetricKindRequest) when calling interceptor")
					}
					return c.callDeleteKind(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteMetricKindResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteMetricKindResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *metricsJSONClient) callDeleteKind(ctx context.Context, in *DeleteMetricKindRequest) (*DeleteMetricKindResponse, error) {
	out := new(DeleteMetricKindResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *metricsJSONClient) GetKinds(ctx context.Context, in *GetMetricKindsRequest) (*GetMetricKindsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Metrics")
	ctx = ctxsetters.WithMethodName(ctx, "GetKinds")
	caller := c.callGetKinds
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetMetricKindsRequest) (*GetMetricKindsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetMetricKindsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetMetricKindsRequest) when calling interceptor")
					}
					return c.callGetKinds(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetMetricKindsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetMetricKindsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *metricsJSONClient) callGetKinds(ctx context.Context, in *GetMetricKindsRequest) (*GetMetricKindsResponse, error) {
	out := new(GetMetricKindsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *metricsJSONClient) RegisterMetric(ctx context.Context, in *RegisterMetricRequest) (*RegisterMetricResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Metrics")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMetric")
	caller := c.callRegisterMetric
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RegisterMetricRequest) (*RegisterMetricResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetricRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetricRequest) when calling interceptor")
					}
					return c.callRegisterMetric(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetricResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetricResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *metricsJSONClient) callRegisterMetric(ctx context.Context, in *RegisterMetricRequest) (*RegisterMetricResponse, error) {
	out := new(RegisterMetricResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *metricsJSONClient) GetMetrics(ctx context.Context, in *GetMetricsRequest) (*GetMetricsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Metrics")
	ctx = ctxsetters.WithMethodName(ctx, "GetMetrics")
	caller := c.callGetMetrics
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetMetricsRequest) (*GetMetricsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetMetricsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetMetricsRequest) when calling interceptor")
					}
					return c.callGetMetrics(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetMetricsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetMetricsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *metricsJSONClient) callGetMetrics(ctx context.Context, in *GetMetricsRequest) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ======================
// Metrics Server Handler
// ======================

type metricsServer struct {
	Metrics
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewMetricsServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewMetricsServer(svc Metrics, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &metricsServer{
		Metrics:          svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *metricsServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *metricsServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// MetricsPathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const MetricsPathPrefix = "/twirp/elephant.repository.Metrics/"

func (s *metricsServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "elephant.repository")
	ctx = ctxsetters.WithServiceName(ctx, "Metrics")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "elephant.repository.Metrics" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "RegisterKind":
		s.serveRegisterKind(ctx, resp, req)
		return
	case "DeleteKind":
		s.serveDeleteKind(ctx, resp, req)
		return
	case "GetKinds":
		s.serveGetKinds(ctx, resp, req)
		return
	case "RegisterMetric":
		s.serveRegisterMetric(ctx, resp, req)
		return
	case "GetMetrics":
		s.serveGetMetrics(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *metricsServer) serveRegisterKind(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegisterKindJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegisterKindProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *metricsServer) serveRegisterKindJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterKind")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RegisterMetricKindRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Metrics.RegisterKind
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RegisterMetricKindRequest) (*RegisterMetricKindResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetricKindRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetricKindRequest) when calling interceptor")
					}
					return s.Metrics.RegisterKind(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetricKindResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetricKindResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegisterMetricKindResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterMetricKindResponse and nil error while calling RegisterKind. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *metricsServer) serveRegisterKindProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterKind")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RegisterMetricKindRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Metrics.RegisterKind
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RegisterMetricKindRequest) (*RegisterMetricKindResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetricKindRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetricKindRequest) when calling interceptor")
					}
					return s.Metrics.RegisterKind(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetricKindResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetricKindResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegisterMetricKindResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterMetricKindResponse and nil error while calling RegisterKind. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *metricsServer) serveDeleteKind(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteKindJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteKindProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *metricsServer) serveDeleteKindJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteKind")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteMetricKindRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Metrics.DeleteKind
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteMetricKindRequest) (*DeleteMetricKindResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteMetricKindRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteMetricKindRequest) when calling interceptor")
					}
					return s.Metrics.DeleteKind(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteMetricKindResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteMetricKindResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteMetricKindResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteMetricKindResponse and nil error while calling DeleteKind. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *metricsServer) serveDeleteKindProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteKind")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteMetricKindRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Metrics.DeleteKind
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteMetricKindRequest) (*DeleteMetricKindResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteMetricKindRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteMetricKindRequest) when calling interceptor")
					}
					return s.Metrics.DeleteKind(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteMetricKindResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteMetricKindResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteMetricKindResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteMetricKindResponse and nil error while calling DeleteKind. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *metricsServer) serveGetKinds(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetKindsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetKindsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *metricsServer) serveGetKindsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetKinds")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetMetricKindsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Metrics.GetKinds
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetMetricKindsRequest) (*GetMetricKindsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetMetricKindsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetMetricKindsRequest) when calling interceptor")
					}
					return s.Metrics.GetKinds(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetMetricKindsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetMetricKindsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetMetricKindsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetMetricKindsResponse and nil error while calling GetKinds. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *metricsServer) serveGetKindsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetKinds")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetMetricKindsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Metrics.GetKinds
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetMetricKindsRequest) (*GetMetricKindsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetMetricKindsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetMetricKindsRequest) when calling interceptor")
					}
					return s.Metrics.GetKinds(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetMetricKindsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetMetricKindsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetMetricKindsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetMetricKindsResponse and nil error while calling GetKinds. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *metricsServer) serveRegisterMetric(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegisterMetricJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegisterMetricProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *metricsServer) serveRegisterMetricJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMetric")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RegisterMetricRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Metrics.RegisterMetric
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RegisterMetricRequest) (*RegisterMetricResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetricRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetricRequest) when calling interceptor")
					}
					return s.Metrics.RegisterMetric(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetricResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetricResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegisterMetricResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterMetricResponse and nil error while calling RegisterMetric. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *metricsServer) serveRegisterMetricProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterMetric")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RegisterMetricRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Metrics.RegisterMetric
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RegisterMetricRequest) (*RegisterMetricResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterMetricRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterMetricRequest) when calling interceptor")
					}
					return s.Metrics.RegisterMetric(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterMetricResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterMetricResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegisterMetricResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterMetricResponse and nil error while calling RegisterMetric. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *metricsServer) serveGetMetrics(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetMetricsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetMetricsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *metricsServer) serveGetMetricsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMetrics")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetMetricsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Metrics.GetMetrics
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetMetricsRequest) (*GetMetricsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetMetricsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetMetricsRequest) when calling interceptor")
					}
					return s.Metrics.GetMetrics(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetMetricsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetMetricsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetMetricsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetMetricsResponse and nil error while calling GetMetrics. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *metricsServer) serveGetMetricsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMetrics")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetMetricsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Metrics.GetMetrics
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetMetricsRequest) (*GetMetricsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetMetricsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetMetricsRequest) when calling interceptor")
					}
					return s.Metrics.GetMetrics(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetMetricsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetMetricsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetMetricsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetMetricsResponse and nil error while calling GetMetrics. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *metricsServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 3
}

func (s *metricsServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *metricsServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "elephant.repository", "Metrics")
}

// =====
// Utils
// =====

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
//
// HTTPClient implementations should not follow redirects. Redirects are
// automatically disabled if *(net/http).Client is passed to client
// constructors. See the withoutRedirects function in this file for more
// details.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// TwirpServer is the interface generated server structs will support: they're
// HTTP handlers with additional methods for accessing metadata about the
// service. Those accessors are a low-level API for building reflection tools.
// Most people can think of TwirpServers as just http.Handlers.
type TwirpServer interface {
	http.Handler

	// ServiceDescriptor returns gzipped bytes describing the .proto file that
	// this service was generated from. Once unzipped, the bytes can be
	// unmarshalled as a
	// google.golang.org/protobuf/types/descriptorpb.FileDescriptorProto.
	//
	// The returned integer is the index of this particular service within that
	// FileDescriptorProto's 'Service' slice of ServiceDescriptorProtos. This is a
	// low-level field, expected to be used for reflection.
	ServiceDescriptor() ([]byte, int)

	// ProtocGenTwirpVersion is the semantic version string of the version of
	// twirp used to generate this file.
	ProtocGenTwirpVersion() string

	// PathPrefix returns the HTTP URL path prefix for all methods handled by this
	// service. This can be used with an HTTP mux to route Twirp requests.
	// The path prefix is in the form: "/<prefix>/<package>.<Service>/"
	// that is, everything in a Twirp route except for the <Method> at the end.
	PathPrefix() string
}

func newServerOpts(opts []interface{}) *twirp.ServerOptions {
	serverOpts := &twirp.ServerOptions{}
	for _, opt := range opts {
		switch o := opt.(type) {
		case twirp.ServerOption:
			o(serverOpts)
		case *twirp.ServerHooks: // backwards compatibility, allow to specify hooks as an argument
			twirp.WithServerHooks(o)(serverOpts)
		case nil: // backwards compatibility, allow nil value for the argument
			continue
		default:
			panic(fmt.Sprintf("Invalid option type %T, please use a twirp.ServerOption", o))
		}
	}
	return serverOpts
}

// WriteError writes an HTTP response with a valid Twirp error format (code, msg, meta).
// Useful outside of the Twirp server (e.g. http middleware), but does not trigger hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func WriteError(resp http.ResponseWriter, err error) {
	writeError(context.Background(), resp, err, nil)
}

// writeError writes Twirp errors in the response and triggers hooks.
func writeError(ctx context.Context, resp http.ResponseWriter, err error, hooks *twirp.ServerHooks) {
	// Convert to a twirp.Error. Non-twirp errors are converted to internal errors.
	var twerr twirp.Error
	if !errors.As(err, &twerr) {
		twerr = twirp.InternalErrorWith(err)
	}

	statusCode := twirp.ServerHTTPStatusFromErrorCode(twerr.Code())
	ctx = ctxsetters.WithStatusCode(ctx, statusCode)
	ctx = callError(ctx, hooks, twerr)

	respBody := marshalErrorToJSON(twerr)

	resp.Header().Set("Content-Type", "application/json") // Error responses are always JSON
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBody)))
	resp.WriteHeader(statusCode) // set HTTP status code and send response

	_, writeErr := resp.Write(respBody)
	if writeErr != nil {
		// We have three options here. We could log the error, call the Error
		// hook, or just silently ignore the error.
		//
		// Logging is unacceptable because we don't have a user-controlled
		// logger; writing out to stderr without permission is too rude.
		//
		// Calling the Error hook would confuse users: it would mean the Error
		// hook got called twice for one request, which is likely to lead to
		// duplicated log messages and metrics, no matter how well we document
		// the behavior.
		//
		// Silently ignoring the error is our least-bad option. It's highly
		// likely that the connection is broken and the original 'err' says
		// so anyway.
		_ = writeErr
	}

	callResponseSent(ctx, hooks)
}

// sanitizeBaseURL parses the the baseURL, and adds the "http" scheme if needed.
// If the URL is unparsable, the baseURL is returned unchanged.
func sanitizeBaseURL(baseURL string) string {
	u, err := url.Parse(baseURL)
	if err != nil {
		return baseURL // invalid URL will fail later when making requests
	}
	if u.Scheme == "" {
		u.Scheme = "http"
	}
	return u.String()
}

// baseServicePath composes the path prefix for the service (without <Method>).
// e.g.: baseServicePath("/twirp", "my.pkg", "MyService")
//
//	returns => "/twirp/my.pkg.MyService/"
//
// e.g.: baseServicePath("", "", "MyService")
//
//	returns => "/MyService/"
func baseServicePath(prefix, pkg, service string) string {
	fullServiceName := service
	if pkg != "" {
		fullServiceName = pkg + "." + service
	}
	return path.Join("/", prefix, fullServiceName) + "/"
}

// parseTwirpPath extracts path components form a valid Twirp route.
// Expected format: "[<prefix>]/<package>.<Service>/<Method>"
// e.g.: prefix, pkgService, method := parseTwirpPath("/twirp/pkg.Svc/MakeHat")
func parseTwirpPath(path string) (string, string, string) {
	parts := strings.Split(path, "/")
	if len(parts) < 2 {
		return "", "", ""
	}
	method := parts[len(parts)-1]
	pkgService := parts[len(parts)-2]
	prefix := strings.Join(parts[0:len(parts)-2], "/")
	return prefix, pkgService, method
}

// getCustomHTTPReqHeaders retrieves a copy of any headers that are set in
// a context through the twirp.WithHTTPRequestHeaders function.
// If there are no headers set, or if they have the wrong type, nil is returned.
func getCustomHTTPReqHeaders(ctx context.Context) http.Header {
	header, ok := twirp.HTTPRequestHeaders(ctx)
	if !ok || header == nil {
		return nil
	}
	copied := make(http.Header)
	for k, vv := range header {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}
	return copied
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if customHeader := getCustomHTTPReqHeaders(ctx); customHeader != nil {
		req.Header = customHeader
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	req.Header.Set("Twirp-Version", "v8.1.3")
	return req, nil
}

// JSON serialization for errors
type twerrJSON struct {
	Code string            `json:"code"`
	Msg  string            `json:"msg"`
	Meta map[string]string `json:"meta,omitempty"`
}

// marshalErrorToJSON returns JSON from a twirp.Error, that can be used as HTTP error response body.
// If serialization fails, it will use a descriptive Internal error instead.
func marshalErrorToJSON(twerr twirp.Error) []byte {
	// make sure that msg is not too large
	msg := twerr.Msg()
	if len(msg) > 1e6 {
		msg = msg[:1e6]
	}

	tj := twerrJSON{
		Code: string(twerr.Code()),
		Msg:  msg,
		Meta: twerr.MetaMap(),
	}

	buf, err := json.Marshal(&tj)
	if err != nil {
		buf = []byte("{\"type\": \"" + twirp.Internal + "\", \"msg\": \"There was an error but it could not be serialized into JSON\"}") // fallback
	}

	return buf
}

// errorFromResponse builds a twirp.Error from a non-200 HTTP response.
// If the response has a valid serialized Twirp error, then it's returned.
// If not, the response status code is used to generate a similar twirp
// error. See twirpErrorFromIntermediary for more info on intermediary errors.
func errorFromResponse(resp *http.Response) twirp.Error {
	statusCode := resp.StatusCode
	statusText := http.StatusText(statusCode)

	if isHTTPRedirect(statusCode) {
		// Unexpected redirect: it must be an error from an intermediary.
		// Twirp clients don't follow redirects automatically, Twirp only handles
		// POST requests, redirects should only happen on GET and HEAD requests.
		location := resp.Header.Get("Location")
		msg := fmt.Sprintf("unexpected HTTP status code %d %q received, Location=%q", statusCode, statusText, location)
		return twirpErrorFromIntermediary(statusCode, msg, location)
	}

	respBodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return wrapInternal(err, "failed to read server error response body")
	}

	var tj twerrJSON
	dec := json.NewDecoder(bytes.NewReader(respBodyBytes))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&tj); err != nil || tj.Code == "" {
		// Invalid JSON response; it must be an error from an intermediary.
		msg := fmt.Sprintf("Error from intermediary with HTTP status code %d %q", statusCode, statusText)
		return twirpErrorFromIntermediary(statusCode, msg, string(respBodyBytes))
	}

	errorCode := twirp.ErrorCode(tj.Code)
	if !twirp.IsValidErrorCode(errorCode) {
		msg := "invalid type returned from server error response: " + tj.Code
		return twirp.InternalError(msg).WithMeta("body", string(respBodyBytes))
	}

	twerr := twirp.NewError(errorCode, tj.Msg)
	for k, v := range tj.Meta {
		twerr = twerr.WithMeta(k, v)
	}
	return twerr
}

// twirpErrorFromIntermediary maps HTTP errors from non-twirp sources to twirp errors.
// The mapping is similar to gRPC: https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md.
// Returned twirp Errors have some additional metadata for inspection.
func twirpErrorFromIntermediary(status int, msg string, bodyOrLocation string) twirp.Error {
	var code twirp.ErrorCode
	if isHTTPRedirect(status) { // 3xx
		code = twirp.Internal
	} else {
		switch status {
		case 400: // Bad Request
			code = twirp.Internal
		case 401: // Unauthorized
			code = twirp.Unauthenticated
		case 403: // Forbidden
			code = twirp.PermissionDenied
		case 404: // Not Found
			code = twirp.BadRoute
		case 429: // Too Many Requests
			code = twirp.ResourceExhausted
		case 502, 503, 504: // Bad Gateway, Service Unavailable, Gateway Timeout
			code = twirp.Unavailable
		default: // All other codes
			code = twirp.Unknown
		}
	}

	twerr := twirp.NewError(code, msg)
	twerr = twerr.WithMeta("http_error_from_intermediary", "true") // to easily know if this error was from intermediary
	twerr = twerr.WithMeta("status_code", strconv.Itoa(status))
	if isHTTPRedirect(status) {
		twerr = twerr.WithMeta("location", bodyOrLocation)
	} else {
		twerr = twerr.WithMeta("body", bodyOrLocation)
	}
	return twerr
}

func isHTTPRedirect(status int) bool {
	return status >= 300 && status <= 399
}

// wrapInternal wraps an error with a prefix as an Internal error.
// The original error cause is accessible by github.com/pkg/errors.Cause.
func wrapInternal(err error, prefix string) twirp.Error {
	return twirp.InternalErrorWith(&wrappedError{prefix: prefix, cause: err})
}

type wrappedError struct {
	prefix string
	cause  error
}

func (e *wrappedError) Error() string { return e.prefix + ": " + e.cause.Error() }
func (e *wrappedError) Unwrap() error { return e.cause } // for go1.13 + errors.Is/As
func (e *wrappedError) Cause() error  { return e.cause } // for github.com/pkg/errors

// ensurePanicResponses makes sure that rpc methods causing a panic still result in a Twirp Internal
// error response (status 500), and error hooks are properly called with the panic wrapped as an error.
// The panic is re-raised so it can be handled normally with middleware.
func ensurePanicResponses(ctx context.Context, resp http.ResponseWriter, hooks *twirp.ServerHooks) {
	if r := recover(); r != nil {
		// Wrap the panic as an error so it can be passed to error hooks.
		// The original error is accessible from error hooks, but not visible in the response.
		err := errFromPanic(r)
		twerr := &internalWithCause{msg: "Internal service panic", cause: err}
		// Actually write the error
		writeError(ctx, resp, twerr, hooks)
		// If possible, flush the error to the wire.
		f, ok := resp.(http.Flusher)
		if ok {
			f.Flush()
		}

		panic(r)
	}
}

// errFromPanic returns the typed error if the recovered panic is an error, otherwise formats as error.
func errFromPanic(p interface{}) error {
	if err, ok := p.(error); ok {
		return err
	}
	return fmt.Errorf("panic: %v", p)
}

// internalWithCause is a Twirp Internal error wrapping an original error cause,
// but the original error message is not exposed on Msg(). The original error
// can be checked with go1.13+ errors.Is/As, and also by (github.com/pkg/errors).Unwrap
type internalWithCause struct {
	msg   string
	cause error
}

func (e *internalWithCause) Unwrap() error                               { return e.cause } // for go1.13 + errors.Is/As
func (e *internalWithCause) Cause() error                                { return e.cause } // for github.com/pkg/errors
func (e *internalWithCause) Error() string                               { return e.msg + ": " + e.cause.Error() }
func (e *internalWithCause) Code() twirp.ErrorCode                       { return twirp.Internal }
func (e *internalWithCause) Msg() string                                 { return e.msg }
func (e *internalWithCause) Meta(key string) string                      { return "" }
func (e *internalWithCause) MetaMap() map[string]string                  { return nil }
func (e *internalWithCause) WithMeta(key string, val string) twirp.Error { return e }

// malformedRequestError is used when the twirp server cannot unmarshal a request
func malformedRequestError(msg string) twirp.Error {
	return twirp.NewError(twirp.Malformed, msg)
}

// badRouteError is used when the twirp server cannot route a request
func badRouteError(msg string, method, url string) twirp.Error {
	err := twirp.NewError(twirp.BadRoute, msg)
	err = err.WithMeta("twirp_invalid_route", method+" "+url)
	return err
}

// withoutRedirects makes sure that the POST request can not be redirected.
// The standard library will, by default, redirect requests (including POSTs) if it gets a 302 or
// 303 response, and also 301s in go1.8. It redirects by making a second request, changing the
// method to GET and removing the body. This produces very confusing error messages, so instead we
// set a redirect policy that always errors. This stops Go from executing the redirect.
//
// We have to be a little careful in case the user-provided http.Client has its own CheckRedirect
// policy - if so, we'll run through that policy first.
//
// Because this requires modifying the http.Client, we make a new copy of the client and return it.
func withoutRedirects(in *http.Client) *http.Client {
	copy := *in
	copy.CheckRedirect = func(req *http.Request, via []*http.Request) error {
		if in.CheckRedirect != nil {
			// Run the input's redirect if it exists, in case it has side effects, but ignore any error it
			// returns, since we want to use ErrUseLastResponse.
			err := in.CheckRedirect(req, via)
			_ = err // Silly, but this makes sure generated code passes errcheck -blank, which some people use.
		}
		return http.ErrUseLastResponse
	}
	return &copy
}

// doProtobufRequest makes a Protobuf request to the remote Twirp service.
func doProtobufRequest(ctx context.Context, client HTTPClient, hooks *twirp.ClientHooks, url string, in, out proto.Message) (_ context.Context, err error) {
	reqBodyBytes, err := proto.Marshal(in)
	if err != nil {
		return ctx, wrapInternal(err, "failed to marshal proto request")
	}
	reqBody := bytes.NewBuffer(reqBodyBytes)
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, reqBody, "application/protobuf")
	if err != nil {
		return ctx, wrapInternal(err, "could not build request")
	}
	ctx, err = callClientRequestPrepared(ctx, hooks, req)
	if err != nil {
		return ctx, err
	}

	req = req.WithContext(ctx)
	resp, err := client.Do(req)
	if err != nil {
		return ctx, wrapInternal(err, "failed to do request")
	}
	defer func() { _ = resp.Body.Close() }()

	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return ctx, errorFromResponse(resp)
	}

	respBodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return ctx, wrapInternal(err, "failed to read response body")
	}
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	if err = proto.Unmarshal(respBodyBytes, out); err != nil {
		return ctx, wrapInternal(err, "failed to unmarshal proto response")
	}
	return ctx, nil
}

// doJSONRequest makes a JSON request to the remote Twirp service.
func doJSONRequest(ctx context.Context, client HTTPClient, hooks *twirp.ClientHooks, url string, in, out proto.Message) (_ context.Context, err error) {
	marshaler := &protojson.MarshalOptions{UseProtoNames: true}
	reqBytes, err := marshaler.Marshal(in)
	if err != nil {
		return ctx, wrapInternal(err, "failed to marshal json request")
	}
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, bytes.NewReader(reqBytes), "application/json")
	if err != nil {
		return ctx, wrapInternal(err, "could not build request")
	}
	ctx, err = callClientRequestPrepared(ctx, hooks, req)
	if err != nil {
		return ctx, err
	}

	req = req.WithContext(ctx)
	resp, err := client.Do(req)
	if err != nil {
		return ctx, wrapInternal(err, "failed to do request")
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = wrapInternal(cerr, "failed to close response body")
		}
	}()

	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return ctx, errorFromResponse(resp)
	}

	d := json.NewDecoder(resp.Body)
	rawRespBody := json.RawMessage{}
	if err := d.Decode(&rawRespBody); err != nil {
		return ctx, wrapInternal(err, "failed to unmarshal json response")
	}
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawRespBody, out); err != nil {
		return ctx, wrapInternal(err, "failed to unmarshal json response")
	}
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}
	return ctx, nil
}

// Call twirp.ServerHooks.RequestReceived if the hook is available
func callRequestReceived(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestReceived == nil {
		return ctx, nil
	}
	return h.RequestReceived(ctx)
}

// Call twirp.ServerHooks.RequestRouted if the hook is available
func callRequestRouted(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestRouted == nil {
		return ctx, nil
	}
	return h.RequestRouted(ctx)
}

// Call twirp.ServerHooks.ResponsePrepared if the hook is available
func callResponsePrepared(ctx context.Context, h *twirp.ServerHooks) context.Context {
	if h == nil || h.ResponsePrepared == nil {
		return ctx
	}
	return h.ResponsePrepared(ctx)
}

// Call twirp.ServerHooks.ResponseSent if the hook is available
func callResponseSent(ctx context.Context, h *twirp.ServerHooks) {
	if h == nil || h.ResponseSent == nil {
		return
	}
	h.ResponseSent(ctx)
}

// Call twirp.ServerHooks.Error if the hook is available
func callError(ctx context.Context, h *twirp.ServerHooks, err twirp.Error) context.Context {
	if h == nil || h.Error == nil {
		return ctx
	}
	return h.Error(ctx, err)
}

func callClientResponseReceived(ctx context.Context, h *twirp.ClientHooks) {
	if h == nil || h.ResponseReceived == nil {
		return
	}
	h.ResponseReceived(ctx)
}

func callClientRequestPrepared(ctx context.Context, h *twirp.ClientHooks, req *http.Request) (context.Context, error) {
	if h == nil || h.RequestPrepared == nil {
		return ctx, nil
	}
	return h.RequestPrepared(ctx, req)
}

func callClientError(ctx context.Context, h *twirp.ClientHooks, err twirp.Error) {
	if h == nil || h.Error == nil {
		return
	}
	h.Error(ctx, err)
}

var twirpFileDescriptor0 = []byte{
	// 4710 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3c, 0x4d, 0x73, 0x1b, 0x47,
	0x76, 0x01, 0x40, 0x7c, 0x3d, 0x80, 0x20, 0x38, 0xa4, 0x24, 0x08, 0x92, 0x6c, 0x69, 0x24, 0xeb,
	0xd3, 0x22, 0x6d, 0x39, 0xf2, 0x5a, 0x5e, 0xaf, 0x2d, 0x8a, 0x64, 0x28, 0xae, 0x25, 0x4a, 0x1e,
	0x92, 0x52, 0xec, 0x5a, 0x2f, 0x3c, 0xc4, 0x34, 0xc8, 0x59, 0x0e, 0x66, 0xb0, 0x33, 0x03, 0x49,
	0xf4, 0x25, 0x55, 0xf9, 0xaa, 0x4a, 0x52, 0x95, 0x4a, 0x55, 0x52, 0x49, 0xe5, 0x1f, 0xe4, 0x90,
	0x6b, 0x52, 0xb9, 0xe6, 0x9c, 0xca, 0x56, 0xa5, 0x72, 0xc8, 0x4f, 0x48, 0x0e, 0x39, 0xe5, 0x92,
	0x6b, 0xaa, 0x3f, 0xa7, 0xe7, 0xa3, 0x07, 0x43, 0xc5, 0xbb, 0x27, 0xa2, 0x5f, 0xbf, 0x7e, 0xfd,
	0xfa, 0x75, 0xbf, 0xd7, 0xef, 0xa3, 0x87, 0xd0, 0xf3, 0xd1, 0xc4, 0x0b, 0xec, 0xd0, 0xf3, 0x4f,
	0x56, 0x03, 0xe4, 0xbf, 0xb2, 0x87, 0x68, 0x65, 0xe2, 0x7b, 0xa1, 0xa7, 0x2d, 0x21, 0x07, 0x4d,
	0x8e, 0x4c, 0x37, 0x5c, 0x89, 0x50, 0xfa, 0x67, 0x5c, 0xf4, 0x3a, 0xb0, 0xbc, 0xe1, 0x2a, 0xfb,
	0x4b, 0x71, 0xf5, 0x9f, 0x42, 0x77, 0x0b, 0x85, 0xbb, 0xa1, 0x19, 0x4e, 0x03, 0x03, 0xfd, 0x72,
	0x8a, 0x82, 0x50, 0xd3, 0x60, 0x6e, 0x3a, 0xb5, 0xad, 0x5e, 0xe9, 0x72, 0xe9, 0x66, 0xd3, 0x20,
	0xbf, 0x31, 0xcc, 0x35, 0xc7, 0xa8, 0x57, 0xa6, 0x30, 0xfc, 0x5b, 0xeb, 0x40, 0xd9, 0xb6, 0x7a,
	0x95, 0xcb, 0xa5, 0x9b, 0x15, 0xa3, 0x6c, 0x5b, 0xfa, 0x63, 0x58, 0x94, 0x68, 0x05, 0x13, 0xcf,
	0x0d, 0x90, 0xf6, 0x11, 0xd4, 0x02, 0x02, 0x21, 0xe4, 0x5a, 0xf7, 0x2e, 0xac, 0x64, 0x70, 0xb7,
	0xc2, 0x06, 0x31, 0x54, 0xfd, 0x6b, 0x38, 0x27, 0x28, 0x3d, 0xb6, 0x03, 0x8c, 0x72, 0x5a, 0xe6,
	0xce, 0x42, 0xed, 0x00, 0x8d, 0x3c, 0x1f, 0x31, 0x06, 0x59, 0x4b, 0x37, 0xb2, 0x48, 0x53, 0x56,
	0x7f, 0x04, 0x0d, 0x3a, 0x3f, 0xc2, 0xcc, 0x56, 0x66, 0x31, 0x2b, 0x90, 0xf5, 0x35, 0x38, 0xb3,
	0x85, 0xc2, 0x1d, 0xdb, 0xd9, 0x65, 0x90, 0x3c, 0x66, 0x97, 0xa1, 0x8a, 0x19, 0x0c, 0x7a, 0xe5,
	0xcb, 0x95, 0x9b, 0x4d, 0x83, 0x36, 0xf4, 0x7f, 0x2f, 0xc1, 0xd9, 0x24, 0x0d, 0x26, 0xc1, 0xfd,
	0x14, 0x5b, 0x0f, 0x32, 0xd9, 0xca, 0x1e, 0xbe, 0xc2, 0x01, 0x9b, 0x6e, 0xe8, 0x9f, 0x44, 0x4c,
	0xf7, 0x0f, 0x60, 0x3e, 0xd6, 0xa5, 0x75, 0xa1, 0x72, 0x8c, 0x4e, 0x18, 0xaf, 0xf8, 0xa7, 0xf6,
	0x63, 0xa8, 0xbe, 0x32, 0x9d, 0x29, 0x15, 0x6c, 0xeb, 0xde, 0x7b, 0x99, 0xd3, 0x6e, 0x78, 0xc3,
	0xe9, 0x18, 0xb9, 0xa1, 0x98, 0x98, 0x8e, 0xf9, 0xb4, 0xfc, 0x49, 0x49, 0x3f, 0x84, 0x9e, 0x10,
	0xf6, 0xb3, 0x57, 0xf8, 0x90, 0xa2, 0xd7, 0x5c, 0x36, 0xcb, 0x50, 0xc5, 0xf2, 0xa0, 0x6b, 0x6a,
	0x1a, 0xb4, 0xa1, 0xf5, 0xa5, 0xc5, 0x52, 0x01, 0x89, 0xb6, 0x76, 0x1e, 0x1a, 0x87, 0x28, 0x1c,
	0x8c, 0x51, 0x68, 0x92, 0x4d, 0x6d, 0x18, 0xf5, 0x43, 0x14, 0x3e, 0x45, 0xa1, 0xa9, 0x7f, 0x03,
	0xe7, 0x33, 0x26, 0x62, 0x02, 0xfc, 0x09, 0x54, 0xed, 0x10, 0x8d, 0xb9, 0xf4, 0x6e, 0xe4, 0x6c,
	0x2a, 0x1f, 0xbb, 0x1d, 0xa2, 0xb1, 0x41, 0x47, 0xe9, 0xff, 0x51, 0x06, 0x2d, 0xdd, 0x9b, 0xb9,
	0xb7, 0x3d, 0xa8, 0xbf, 0x42, 0x7e, 0x60, 0x7b, 0x2e, 0x11, 0x59, 0xc5, 0xe0, 0x4d, 0xbc, 0xae,
	0xb1, 0x67, 0xd9, 0x23, 0x1b, 0x51, 0x8d, 0x69, 0x1a, 0xa2, 0xad, 0x3d, 0x86, 0xea, 0x11, 0x32,
	0xad, 0xa0, 0x37, 0x47, 0xf8, 0xbb, 0x57, 0x90, 0xbf, 0x95, 0xc7, 0x78, 0x10, 0xdd, 0x56, 0x4a,
	0x40, 0x7b, 0x0f, 0x3a, 0xaf, 0x3d, 0xff, 0x78, 0xe4, 0x78, 0xaf, 0x07, 0x58, 0x6c, 0xa8, 0x57,
	0x25, 0x73, 0xcd, 0x73, 0x28, 0xa6, 0x82, 0xb4, 0x55, 0x58, 0x12, 0x68, 0xc3, 0x23, 0x34, 0x3c,
	0x9e, 0x78, 0xb6, 0x1b, 0xf6, 0x6a, 0x04, 0x57, 0xe3, 0x5d, 0xeb, 0xa2, 0xa7, 0xbf, 0x0f, 0x10,
	0x4d, 0x96, 0x71, 0x50, 0x3e, 0x8c, 0x1f, 0x94, 0x5c, 0xb5, 0x91, 0x8e, 0xc7, 0x1d, 0xa2, 0x37,
	0xcf, 0x91, 0x3f, 0xb6, 0x03, 0x2c, 0xa5, 0x3c, 0xbd, 0xd1, 0xff, 0x89, 0x6a, 0x48, 0x0c, 0x9b,
	0x6d, 0xf0, 0xcf, 0xa1, 0x35, 0x89, 0xc0, 0x6c, 0x9b, 0x3f, 0x53, 0x29, 0x49, 0x06, 0x85, 0x15,
	0x09, 0x46, 0x05, 0x2a, 0x13, 0xec, 0x7f, 0x0e, 0xdd, 0x24, 0x42, 0x86, 0x10, 0x96, 0x65, 0x21,
	0x34, 0xe5, 0x75, 0xfe, 0x71, 0x09, 0xb4, 0x2d, 0x14, 0x6e, 0xbe, 0x42, 0x6e, 0xe8, 0x78, 0x87,
	0x92, 0x06, 0x98, 0xa3, 0x10, 0xf9, 0x84, 0x48, 0xc5, 0xa0, 0x0d, 0xed, 0x1c, 0xd4, 0x5f, 0x9b,
	0x76, 0x38, 0x18, 0x07, 0x84, 0x50, 0xd5, 0xa8, 0xe1, 0xe6, 0xd3, 0x40, 0xbb, 0x04, 0x70, 0x60,
	0x86, 0xc3, 0xa3, 0x41, 0x60, 0x7f, 0x4f, 0xad, 0x5a, 0xd5, 0x68, 0x12, 0xc8, 0xae, 0xfd, 0x3d,
	0xd2, 0x74, 0x98, 0xa7, 0xdd, 0x7c, 0xf4, 0x1c, 0xc1, 0x68, 0x11, 0xe0, 0x4b, 0x42, 0x42, 0xdf,
	0x81, 0xa5, 0x18, 0x1f, 0x01, 0x37, 0x7c, 0x31, 0x05, 0xb9, 0x92, 0x29, 0x39, 0x3e, 0x4a, 0x56,
	0x8d, 0x3f, 0x2b, 0xc1, 0x85, 0x2d, 0x14, 0xae, 0x7b, 0xe3, 0x89, 0x39, 0x0c, 0x91, 0x55, 0x6c,
	0x85, 0x58, 0xf3, 0xdd, 0xd0, 0x76, 0x98, 0x65, 0xa6, 0x0d, 0x0c, 0x75, 0xec, 0xb1, 0x1d, 0x32,
	0xbe, 0x69, 0x03, 0x9b, 0x71, 0x6f, 0x34, 0x0a, 0x50, 0x48, 0x4e, 0x72, 0xd5, 0x60, 0x2d, 0x7c,
	0x42, 0xc2, 0x93, 0x09, 0x62, 0x67, 0x96, 0xfc, 0xd6, 0x5f, 0xc2, 0xc5, 0x6c, 0x66, 0xfe, 0xbf,
	0xcb, 0xfc, 0xbb, 0x2a, 0xb4, 0x65, 0x38, 0xbb, 0xf9, 0x4a, 0xfc, 0xe6, 0xc3, 0xbc, 0x23, 0xdc,
	0xcf, 0xb7, 0x9e, 0x34, 0xc4, 0x29, 0xae, 0x48, 0x16, 0xe2, 0x22, 0x34, 0x43, 0x7b, 0x8c, 0x82,
	0xd0, 0x1c, 0x4f, 0xc8, 0x4a, 0x9b, 0x46, 0x04, 0x90, 0xed, 0x47, 0x35, 0x6e, 0x3f, 0xce, 0x8a,
	0x6b, 0x94, 0xae, 0x98, 0xb5, 0xb4, 0x0b, 0xd0, 0xa4, 0xbf, 0x06, 0xb6, 0xd5, 0xab, 0x93, 0x31,
	0xcc, 0x60, 0x6e, 0x5b, 0xda, 0x2a, 0x54, 0xcc, 0xa1, 0xd3, 0x6b, 0x90, 0xe5, 0x5e, 0xca, 0x5c,
	0xee, 0xda, 0xfa, 0x13, 0x7a, 0xe0, 0x31, 0xa6, 0xf6, 0x2e, 0xb4, 0xa6, 0x13, 0xcb, 0x0c, 0x91,
	0x3f, 0x98, 0xfa, 0x76, 0xaf, 0x49, 0xa6, 0x02, 0x06, 0xda, 0xf7, 0x6d, 0x21, 0x76, 0x88, 0xc4,
	0x8e, 0x4d, 0x9b, 0x63, 0xba, 0x87, 0x53, 0xf3, 0x10, 0xf5, 0x5a, 0xd4, 0xb4, 0xf1, 0xb6, 0x76,
	0x05, 0xda, 0x9e, 0x63, 0x0d, 0x44, 0x7f, 0x9b, 0xf4, 0xb7, 0x3c, 0xc7, 0x7a, 0xc2, 0x51, 0xae,
	0xc2, 0xfc, 0xd8, 0xb4, 0xdd, 0x81, 0xc5, 0xee, 0x91, 0xde, 0x3c, 0xc1, 0x69, 0x63, 0x20, 0xbf,
	0x5b, 0x30, 0x9d, 0xe0, 0x24, 0x08, 0xd1, 0x98, 0x99, 0xb5, 0x0e, 0xa5, 0x43, 0x61, 0xd4, 0xa8,
	0xa5, 0x6d, 0xdf, 0xc2, 0x29, 0x6c, 0x5f, 0x57, 0x65, 0xfb, 0xb4, 0xf7, 0x41, 0x8b, 0xf1, 0x37,
	0x20, 0x02, 0x58, 0x24, 0xf8, 0x5d, 0x99, 0xc9, 0x3d, 0x2c, 0x8c, 0x5b, 0xd0, 0x35, 0xc3, 0xd0,
	0x1c, 0x1e, 0x21, 0x6b, 0xe0, 0x1d, 0xfc, 0x02, 0x0d, 0xc3, 0xa0, 0xa7, 0x91, 0x7b, 0x6c, 0x81,
	0xc3, 0x9f, 0x51, 0x30, 0x46, 0xb5, 0x50, 0x02, 0x75, 0x89, 0xa2, 0x72, 0x38, 0x47, 0xbd, 0x89,
	0x51, 0x1d, 0x14, 0xa2, 0x81, 0x8f, 0x86, 0x9e, 0x6f, 0xe1, 0xcd, 0x5e, 0x26, 0x9b, 0xdd, 0xa1,
	0x70, 0x83, 0x80, 0xb7, 0x2d, 0xfd, 0x1c, 0x31, 0xa9, 0xcc, 0xd4, 0x4e, 0x1d, 0xe1, 0x8a, 0xe8,
	0xcf, 0x88, 0xf5, 0x8c, 0x75, 0x30, 0xb5, 0xb8, 0x0f, 0x55, 0x1f, 0x03, 0x98, 0x5a, 0xbc, 0x9b,
	0x67, 0xbc, 0xa7, 0x0e, 0x32, 0x28, 0xb6, 0x7e, 0x93, 0xd8, 0xb4, 0x0c, 0x8f, 0x87, 0xc8, 0xa7,
	0x24, 0xe9, 0xe5, 0x31, 0x68, 0xbb, 0x28, 0x7c, 0xc9, 0x44, 0x9b, 0x83, 0xa9, 0xad, 0x41, 0x83,
	0xef, 0x40, 0x21, 0x9f, 0x43, 0xd0, 0x14, 0xc3, 0xf4, 0xbf, 0x2e, 0x41, 0x37, 0xd9, 0x4d, 0xb5,
	0x04, 0x4d, 0x06, 0xdf, 0x23, 0xdf, 0x63, 0x13, 0x36, 0x30, 0xe0, 0x1b, 0xe4, 0x7b, 0xda, 0x3b,
	0x00, 0xd2, 0x41, 0xa0, 0x1a, 0x2c, 0x41, 0xf0, 0x89, 0x71, 0xd1, 0xa1, 0x19, 0xda, 0xaf, 0x90,
	0x7c, 0x62, 0xa8, 0x56, 0x6b, 0xbc, 0x4b, 0x3a, 0x31, 0xcb, 0x50, 0xc5, 0xc4, 0xe9, 0x7d, 0xde,
	0x34, 0x68, 0x43, 0x3f, 0x03, 0x4b, 0x31, 0x29, 0x50, 0xe9, 0x33, 0x31, 0x16, 0x10, 0x8e, 0xfe,
	0x97, 0x25, 0x62, 0xbd, 0x93, 0x14, 0x62, 0x42, 0x2b, 0xbd, 0x95, 0xd0, 0x92, 0x7a, 0x5f, 0x4e,
	0xe9, 0x7d, 0x0f, 0xea, 0xb4, 0xc5, 0xad, 0x19, 0x6f, 0xe2, 0x3b, 0x7c, 0x83, 0x1c, 0xc1, 0x22,
	0x4b, 0xe8, 0xc1, 0xd9, 0x24, 0x32, 0x13, 0xc3, 0x27, 0xd0, 0x79, 0x29, 0xe9, 0xe9, 0x34, 0xc8,
	0x3c, 0x1f, 0x19, 0x8e, 0xbe, 0xfe, 0x82, 0x48, 0x25, 0xe5, 0x35, 0x7f, 0x91, 0xf2, 0x9a, 0xaf,
	0x66, 0x4a, 0x25, 0x3e, 0xab, 0xe4, 0xd4, 0x7f, 0x0d, 0x4b, 0xfb, 0x64, 0x8d, 0xa9, 0xe0, 0xa8,
	0x08, 0x5b, 0xd8, 0x2a, 0x5a, 0x76, 0x60, 0x1e, 0x38, 0x4c, 0x64, 0x0d, 0x43, 0xb4, 0xf5, 0xb3,
	0xb0, 0x1c, 0x27, 0xcd, 0x84, 0xb0, 0x03, 0xe7, 0xd6, 0x7d, 0x14, 0xc1, 0xb1, 0xb6, 0xb1, 0x69,
	0x3f, 0x82, 0x39, 0xac, 0x76, 0x6c, 0x83, 0x67, 0xea, 0x28, 0x41, 0xd6, 0xff, 0xb1, 0x04, 0x10,
	0x01, 0x0b, 0xb3, 0x7e, 0x19, 0x5a, 0x16, 0x0a, 0x86, 0xbe, 0x3d, 0x09, 0xf1, 0x4d, 0x44, 0x37,
	0x5c, 0x06, 0xe1, 0xf3, 0x62, 0x0e, 0x87, 0x28, 0x08, 0x06, 0x84, 0xa9, 0x39, 0xb2, 0x3e, 0xa0,
	0x20, 0x32, 0xd5, 0x25, 0x00, 0x73, 0x32, 0x71, 0x6c, 0x14, 0x0c, 0x42, 0xaf, 0x57, 0x25, 0x7a,
	0xd0, 0x64, 0x90, 0x3d, 0xa2, 0x72, 0xe8, 0xcd, 0xc4, 0x47, 0xc4, 0xa1, 0x22, 0xd7, 0x56, 0xd3,
	0x90, 0x20, 0x7a, 0x1f, 0x7a, 0x69, 0x41, 0x30, 0x21, 0xad, 0xc1, 0x39, 0x7a, 0x86, 0xd2, 0x42,
	0x2a, 0x7a, 0x64, 0xfa, 0xd0, 0x4b, 0x93, 0x60, 0xe4, 0xff, 0x8b, 0xfa, 0x6a, 0x5c, 0x59, 0xf2,
	0x22, 0x39, 0xb5, 0xb7, 0x1f, 0xdd, 0xd6, 0x95, 0xd8, 0x6d, 0xad, 0xc1, 0x9c, 0xe3, 0x0d, 0x8f,
	0x99, 0xc0, 0xc8, 0x6f, 0x6d, 0x03, 0xe6, 0x71, 0x44, 0x13, 0xdd, 0x7f, 0xf8, 0xe6, 0xef, 0x28,
	0xb6, 0x78, 0x8b, 0xc6, 0x3b, 0x1b, 0xde, 0xd0, 0x68, 0x8f, 0xe9, 0x0f, 0x7a, 0x41, 0xde, 0x83,
	0x33, 0x31, 0x2a, 0x03, 0xce, 0x59, 0x8d, 0x70, 0xb6, 0x24, 0x23, 0xbf, 0xa0, 0x5d, 0xfa, 0xdf,
	0x96, 0x89, 0xea, 0x44, 0x4b, 0x65, 0xaa, 0x73, 0x17, 0x1a, 0x82, 0x19, 0x7a, 0xde, 0x16, 0x57,
	0x78, 0xd6, 0x40, 0x20, 0x0b, 0x94, 0x1c, 0x31, 0x7c, 0x14, 0x13, 0x43, 0xb1, 0xd8, 0x5f, 0xbb,
	0x0f, 0x73, 0x24, 0xc2, 0x9b, 0x23, 0x43, 0xb2, 0x9d, 0xb4, 0xa7, 0xd2, 0x6a, 0x0c, 0x82, 0x8e,
	0xaf, 0x48, 0x3b, 0x18, 0xa4, 0x25, 0xd9, 0x30, 0x3a, 0x76, 0x20, 0xe3, 0xa7, 0x1d, 0x8e, 0x5a,
	0xda, 0xe1, 0xd0, 0xf7, 0xa1, 0xf3, 0x68, 0xea, 0x1c, 0x6f, 0x21, 0x71, 0x02, 0xd6, 0xa1, 0xc9,
	0x47, 0x70, 0x8b, 0x92, 0x6d, 0x67, 0xc5, 0xb8, 0x11, 0xf2, 0x91, 0x3b, 0x44, 0x46, 0x34, 0x4e,
	0x7f, 0x08, 0xdd, 0x64, 0xf7, 0xe9, 0x8e, 0x96, 0xbe, 0x0d, 0x0b, 0x82, 0x02, 0xdb, 0xaf, 0x8f,
	0xe3, 0x7e, 0xed, 0xe5, 0x3c, 0xae, 0x64, 0xb7, 0xf6, 0x05, 0xb4, 0x24, 0xe8, 0x0f, 0xb6, 0xed,
	0xfa, 0x4b, 0x68, 0xc7, 0x04, 0xfe, 0x83, 0x11, 0xb6, 0x48, 0x82, 0xa9, 0x40, 0x42, 0x28, 0x4a,
	0xfe, 0x94, 0xe5, 0xe4, 0x0f, 0xde, 0x7a, 0xc7, 0x33, 0xad, 0x81, 0xb8, 0x19, 0xa8, 0x65, 0x6e,
	0x63, 0x20, 0xbf, 0x41, 0xf4, 0x17, 0xc4, 0x00, 0x88, 0x59, 0x98, 0x90, 0x1f, 0x42, 0x83, 0xb1,
	0xc1, 0xe5, 0x7c, 0x2d, 0xf7, 0x96, 0x65, 0x4a, 0x66, 0x88, 0x51, 0xfa, 0x5f, 0x54, 0x60, 0x21,
	0xd1, 0x2b, 0xaf, 0xb5, 0x14, 0xd7, 0x9d, 0x1e, 0xd4, 0x87, 0xc4, 0x04, 0x5a, 0xcc, 0x74, 0xf1,
	0xa6, 0xe8, 0xf1, 0x7c, 0x7e, 0x17, 0xb3, 0xa6, 0xf6, 0x48, 0xa8, 0x0e, 0xe6, 0x6f, 0xa5, 0x08,
	0x7f, 0x44, 0x95, 0x68, 0x04, 0x40, 0xf5, 0x68, 0x47, 0xba, 0x37, 0xab, 0x39, 0xf9, 0x88, 0x24,
	0x1d, 0x55, 0x9a, 0xe9, 0x47, 0xd0, 0x14, 0x53, 0x9c, 0x26, 0x68, 0xfe, 0x8d, 0xe4, 0xa7, 0x36,
	0x23, 0x5f, 0x91, 0x77, 0x6b, 0x1f, 0x72, 0x6d, 0xaa, 0xce, 0x4e, 0x01, 0x32, 0x45, 0xfa, 0x93,
	0x3a, 0xcc, 0xd3, 0x0b, 0x3d, 0xef, 0x50, 0xca, 0x6a, 0x50, 0x9e, 0xad, 0x06, 0x0f, 0xd9, 0x66,
	0x56, 0x08, 0x1b, 0xef, 0x67, 0xb2, 0x11, 0x9b, 0x34, 0xb5, 0x95, 0xe7, 0xa1, 0x61, 0x8f, 0x06,
	0x63, 0x1c, 0xff, 0x13, 0x6b, 0x5a, 0x31, 0xea, 0xf6, 0xe8, 0x29, 0x6e, 0x6a, 0x0f, 0x84, 0x65,
	0xae, 0xe6, 0xc4, 0xc2, 0x74, 0x95, 0x6c, 0x12, 0x6e, 0x9f, 0x59, 0x50, 0x59, 0x2b, 0x1c, 0x54,
	0x3e, 0x83, 0xae, 0x3d, 0x9e, 0x78, 0x7e, 0x38, 0xb0, 0x6c, 0x1f, 0x0d, 0xb1, 0xb3, 0x4c, 0xae,
	0x7c, 0x95, 0x06, 0x6d, 0x13, 0xe4, 0x0d, 0x8e, 0x6b, 0x2c, 0xd8, 0x71, 0x00, 0x8e, 0xa1, 0xf1,
	0xcd, 0xb9, 0xe7, 0x1d, 0x23, 0xb7, 0xd7, 0xa0, 0x31, 0xb4, 0x00, 0x68, 0x1f, 0xc0, 0x32, 0xf5,
	0x4d, 0x13, 0x97, 0x41, 0x93, 0xa8, 0xba, 0x46, 0xfb, 0x62, 0xf6, 0xe9, 0x36, 0x2c, 0xda, 0xa3,
	0x41, 0x22, 0x78, 0xa4, 0x11, 0xee, 0x82, 0x3d, 0x7a, 0x19, 0x0b, 0x1f, 0xbf, 0x85, 0x05, 0x7b,
	0xc4, 0xec, 0xc7, 0x80, 0x66, 0xed, 0x5a, 0x44, 0x12, 0xf7, 0x0b, 0x6c, 0xd0, 0xf6, 0x88, 0xe5,
	0x9d, 0xa3, 0xc4, 0xdd, 0xbc, 0x2d, 0xc3, 0xb4, 0x9f, 0x41, 0x87, 0x86, 0x89, 0x22, 0x22, 0x6c,
	0x17, 0xa6, 0xbe, 0x46, 0x06, 0xb2, 0x90, 0x91, 0x51, 0x37, 0x65, 0x18, 0x0e, 0x91, 0x69, 0x64,
	0x29, 0xa8, 0xcf, 0x13, 0xcf, 0x6c, 0x9e, 0x42, 0x19, 0xda, 0xdb, 0xab, 0xec, 0x43, 0xd0, 0xd2,
	0x4b, 0x9c, 0x45, 0xa1, 0x92, 0xa0, 0x90, 0x5e, 0xc6, 0xa9, 0x72, 0x6d, 0xc7, 0xb0, 0x90, 0x38,
	0x40, 0xda, 0x5d, 0xd0, 0x3c, 0xdf, 0x3e, 0xb4, 0x5d, 0xd3, 0x71, 0x4e, 0x06, 0xdc, 0xaa, 0x52,
	0x6a, 0x8b, 0x51, 0xcf, 0x3a, 0xb3, 0xaf, 0xb7, 0xa0, 0xcb, 0x81, 0x03, 0x6e, 0x68, 0xe9, 0x34,
	0x0b, 0x1c, 0xbe, 0x4e, 0xc1, 0xfa, 0xe7, 0xd0, 0xe1, 0x7b, 0xc0, 0xae, 0x09, 0xb5, 0x41, 0xe7,
	0x26, 0xa1, 0x2c, 0xe5, 0x34, 0xbf, 0x82, 0x45, 0x7c, 0x03, 0xc7, 0x6d, 0xc7, 0x67, 0x3c, 0xd6,
	0xe2, 0x17, 0x8d, 0x3e, 0x7b, 0xf3, 0x79, 0x3c, 0x16, 0xe8, 0xbb, 0xa0, 0xc9, 0x24, 0x45, 0x0a,
	0x3c, 0x41, 0xf3, 0x6a, 0x2e, 0x4d, 0x3a, 0x2a, 0x22, 0xfa, 0x10, 0x16, 0x5e, 0x98, 0x8e, 0x2d,
	0x73, 0x79, 0xba, 0x4b, 0x5d, 0xff, 0x0a, 0xba, 0x11, 0x05, 0xc1, 0x54, 0x0d, 0xf9, 0xbe, 0xe7,
	0xe7, 0xbb, 0x53, 0x6c, 0x18, 0xbe, 0x4b, 0x51, 0x30, 0x75, 0x42, 0x83, 0x0d, 0xd2, 0xbf, 0x13,
	0x24, 0x45, 0x9f, 0xf6, 0x31, 0xd4, 0x90, 0x1b, 0xda, 0xe1, 0x09, 0x23, 0xf9, 0x4e, 0x76, 0x8e,
	0x8f, 0xa0, 0x18, 0x68, 0x64, 0x30, 0x6c, 0x92, 0xc0, 0xc3, 0x54, 0x45, 0x02, 0x0f, 0x37, 0xf4,
	0x3f, 0x2d, 0x41, 0x53, 0xe0, 0x62, 0x73, 0xea, 0xa3, 0xd1, 0x40, 0x8a, 0x30, 0xea, 0x3e, 0x1a,
	0xed, 0xb1, 0x20, 0xe3, 0xd8, 0x76, 0xc5, 0xde, 0xe2, 0xdf, 0x98, 0xa4, 0xed, 0x5a, 0xe8, 0x0d,
	0xcf, 0x72, 0x92, 0x86, 0x08, 0x47, 0xe6, 0xa4, 0x78, 0x8b, 0x87, 0x2d, 0x55, 0x29, 0x6c, 0xe9,
	0x42, 0xc5, 0x47, 0x0e, 0x73, 0x4d, 0xf1, 0x4f, 0xfd, 0xdf, 0x4a, 0xd0, 0x96, 0x0d, 0xb2, 0x20,
	0x55, 0x92, 0x48, 0xa9, 0x7d, 0xf1, 0x2f, 0x62, 0xd7, 0xc9, 0x9d, 0x99, 0xf6, 0xfe, 0x14, 0xb7,
	0xc9, 0x5b, 0x1b, 0x0c, 0xdd, 0x84, 0x1e, 0x9d, 0xad, 0x58, 0x0d, 0x40, 0xfb, 0x10, 0xe6, 0x1c,
	0x3b, 0x08, 0x49, 0x65, 0x68, 0xe6, 0xe5, 0x43, 0x50, 0xf5, 0x0b, 0x70, 0x3e, 0x63, 0x0a, 0x16,
	0xec, 0xfd, 0x67, 0x89, 0x67, 0x2f, 0x8a, 0xc4, 0x7b, 0x8f, 0x99, 0x08, 0xe9, 0xec, 0xbf, 0x9d,
	0xed, 0x6d, 0x64, 0x51, 0xcb, 0x95, 0x65, 0x25, 0x7e, 0x33, 0xe7, 0x5e, 0x6e, 0x6f, 0x2f, 0x69,
	0x91, 0x79, 0x49, 0x46, 0x7b, 0xfa, 0xef, 0x41, 0xc7, 0x40, 0xd8, 0xd7, 0xcd, 0x75, 0x5e, 0xb2,
	0x32, 0x90, 0xe5, 0xac, 0x0c, 0x24, 0xf7, 0x0f, 0x2a, 0x45, 0xfd, 0x03, 0x7d, 0x11, 0x16, 0x04,
	0x03, 0x8c, 0xa7, 0x27, 0xd0, 0x7e, 0x3e, 0xf5, 0x0f, 0x7f, 0x18, 0x8e, 0xf4, 0x05, 0x98, 0x67,
	0xd4, 0x18, 0xf9, 0xdf, 0x2f, 0x81, 0xf6, 0xc4, 0x0e, 0x42, 0x2a, 0x11, 0x2b, 0x6f, 0x96, 0x0b,
	0xd0, 0xa4, 0xb1, 0x43, 0x44, 0xbe, 0x41, 0x01, 0xdb, 0x96, 0xf6, 0x2e, 0xb4, 0x58, 0x27, 0x3e,
	0x60, 0xcc, 0x1b, 0x07, 0x0a, 0xda, 0xc0, 0x2a, 0xda, 0x87, 0x46, 0x68, 0x8f, 0xd1, 0xf7, 0x9e,
	0xcb, 0x35, 0x5e, 0xb4, 0x75, 0x03, 0x96, 0x62, 0x3c, 0x30, 0xa3, 0xf8, 0x63, 0xa8, 0x53, 0xf6,
	0xf3, 0xcb, 0x14, 0x1b, 0xd2, 0x12, 0x0d, 0x3e, 0x42, 0xff, 0x9f, 0x32, 0xb4, 0xe5, 0x9e, 0x54,
	0xa1, 0x22, 0xe3, 0x12, 0xc2, 0xc7, 0x68, 0xea, 0xdb, 0x8c, 0x7b, 0xfc, 0x53, 0x18, 0xa4, 0x39,
	0xc9, 0x20, 0xa9, 0x4b, 0x13, 0x52, 0xa4, 0x52, 0x53, 0x46, 0x2a, 0xf5, 0x78, 0xa4, 0xc2, 0xad,
	0x51, 0x23, 0xc7, 0x1a, 0xc9, 0x0b, 0x49, 0x69, 0x90, 0x5c, 0x74, 0x68, 0x26, 0x8a, 0x0e, 0x17,
	0xa1, 0x39, 0xc2, 0xb7, 0xb4, 0x1d, 0x20, 0x8b, 0xf9, 0x71, 0x11, 0x00, 0xc7, 0x86, 0x13, 0x7c,
	0x1a, 0x2c, 0x56, 0xac, 0x60, 0xad, 0xb7, 0x57, 0xad, 0x6b, 0xd0, 0x61, 0x69, 0x99, 0xbc, 0xf2,
	0xe5, 0x63, 0x58, 0x10, 0x58, 0x22, 0xf1, 0x4e, 0x85, 0x50, 0xca, 0xc9, 0x74, 0x70, 0x75, 0x25,
	0x03, 0x09, 0xba, 0xfe, 0x37, 0x55, 0x68, 0xcb, 0x60, 0x79, 0x03, 0x4a, 0xf1, 0x0d, 0x90, 0xab,
	0xce, 0xe5, 0x44, 0xd5, 0xf9, 0x06, 0x2c, 0x0c, 0xa7, 0xbe, 0x2f, 0xe7, 0x8a, 0xa8, 0x29, 0xea,
	0x30, 0x30, 0x8f, 0x51, 0x1f, 0xc5, 0xcb, 0xd3, 0xef, 0xcf, 0xe4, 0x33, 0xa3, 0x30, 0xcd, 0x8c,
	0x42, 0xb5, 0x70, 0xd0, 0x70, 0x97, 0x65, 0xca, 0x6a, 0x44, 0x36, 0xe7, 0x33, 0x47, 0x3c, 0xf1,
	0x86, 0xc7, 0x2c, 0x89, 0x96, 0x95, 0xfd, 0xa9, 0x17, 0xcb, 0xfe, 0x34, 0x32, 0xca, 0x4d, 0xe9,
	0x5a, 0x52, 0xf3, 0x14, 0xb5, 0x24, 0x50, 0xd6, 0x92, 0xde, 0x85, 0x16, 0xd3, 0x00, 0x92, 0x67,
	0x6f, 0xb1, 0x5a, 0x03, 0x05, 0xed, 0xfb, 0x76, 0x32, 0x11, 0xdf, 0x4e, 0x25, 0xe2, 0x37, 0xa0,
	0x45, 0x7d, 0x7a, 0x9a, 0x87, 0x9a, 0xcf, 0x71, 0x10, 0xd7, 0x04, 0x1e, 0xf6, 0x74, 0xe4, 0x61,
	0xbf, 0xae, 0x7a, 0xfe, 0x4f, 0x60, 0x3e, 0x36, 0xe9, 0xe9, 0x5c, 0x14, 0xfd, 0x0f, 0xcb, 0x50,
	0x63, 0xc9, 0xff, 0xa4, 0xdd, 0x52, 0xfb, 0x35, 0xea, 0x6c, 0x88, 0xa4, 0x16, 0x73, 0x71, 0xb5,
	0x78, 0xc0, 0x14, 0xaf, 0x9a, 0xe3, 0x76, 0x52, 0x46, 0x52, 0x76, 0xe7, 0x26, 0x74, 0xf9, 0x29,
	0x4b, 0xa4, 0x58, 0x3b, 0x2c, 0xc5, 0xca, 0xd4, 0xe6, 0xed, 0xed, 0xc9, 0xe7, 0xd0, 0xe0, 0xba,
	0xc0, 0x6d, 0x73, 0x29, 0xb2, 0xcd, 0x97, 0xe3, 0x6f, 0x1d, 0xe8, 0x1b, 0x19, 0x19, 0xa4, 0xff,
	0x79, 0x09, 0xe6, 0xb0, 0x6a, 0xe0, 0x29, 0x42, 0xe2, 0x46, 0xd0, 0xe1, 0xb4, 0xc1, 0x49, 0x96,
	0x23, 0x92, 0x92, 0xa0, 0x2a, 0x29, 0x03, 0x8e, 0xde, 0x4c, 0x6c, 0x1f, 0x05, 0x5c, 0x84, 0xac,
	0x89, 0xa9, 0x98, 0x93, 0x09, 0x73, 0x59, 0xf1, 0x4f, 0x42, 0xc5, 0x1b, 0x4b, 0x09, 0x55, 0xde,
	0xd4, 0xbf, 0x84, 0x73, 0x06, 0x3a, 0xb4, 0x83, 0x10, 0xf9, 0x58, 0x22, 0xd8, 0x63, 0xce, 0xcb,
	0xd8, 0x5f, 0x84, 0x26, 0x7a, 0x33, 0x74, 0xa6, 0x81, 0xfd, 0x8a, 0x4a, 0xa7, 0x61, 0x44, 0x00,
	0xbd, 0x0f, 0xbd, 0x34, 0x31, 0x76, 0xaf, 0xbf, 0x80, 0x7e, 0xb2, 0x6f, 0x3f, 0x10, 0x73, 0x5d,
	0x80, 0x26, 0xd1, 0x7c, 0x69, 0xc2, 0x06, 0x06, 0x10, 0x0f, 0x1e, 0x77, 0xe2, 0x7d, 0x25, 0x9d,
	0xdc, 0x54, 0x32, 0x1a, 0xfa, 0x25, 0xb8, 0x90, 0x49, 0x97, 0x4d, 0xfb, 0xf7, 0x25, 0x38, 0xc3,
	0xfb, 0x77, 0x87, 0x47, 0x68, 0x6c, 0x46, 0x55, 0x9b, 0x5a, 0x40, 0x00, 0xf9, 0x8f, 0xdf, 0xe8,
	0x18, 0x86, 0x8a, 0x8d, 0xb6, 0x89, 0x03, 0x57, 0x6c, 0x76, 0xe8, 0xf2, 0x45, 0x5b, 0xbb, 0x04,
	0x40, 0xb1, 0x06, 0x53, 0xdf, 0x61, 0xbb, 0xd5, 0xa4, 0x90, 0x7d, 0xdf, 0xc1, 0xc6, 0x8d, 0x75,
	0x07, 0x47, 0xe6, 0xbd, 0xfb, 0x1f, 0xb3, 0x5d, 0x6b, 0x53, 0xe0, 0x2e, 0x81, 0x61, 0x57, 0x30,
	0xc9, 0x2d, 0x5b, 0xc8, 0x08, 0xce, 0xee, 0xa2, 0x70, 0x8d, 0x44, 0xcd, 0xf1, 0x85, 0x14, 0x50,
	0xe4, 0x66, 0xa4, 0x93, 0xef, 0x00, 0x58, 0x48, 0xac, 0x81, 0xe6, 0x58, 0x25, 0x88, 0x7e, 0x1e,
	0xce, 0xa5, 0xe6, 0x61, 0x2c, 0x3c, 0xa4, 0xef, 0x11, 0xdf, 0x7e, 0x72, 0x7d, 0x8d, 0xbe, 0x42,
	0x8c, 0x91, 0x4d, 0x86, 0xe5, 0xcd, 0x58, 0x58, 0x1e, 0x4c, 0xd0, 0x90, 0x50, 0x69, 0x1b, 0xe4,
	0xb7, 0xfe, 0x2f, 0x25, 0xe8, 0x6f, 0xa1, 0x70, 0xcd, 0x71, 0x64, 0x1e, 0x45, 0x64, 0x72, 0x05,
	0xda, 0xe4, 0x8d, 0x4d, 0x80, 0x86, 0x9e, 0x6b, 0x05, 0xcc, 0x4c, 0xb5, 0x30, 0x6c, 0x97, 0x82,
	0xb4, 0xe7, 0x50, 0x3d, 0x76, 0xbd, 0xd7, 0x2e, 0x8b, 0x15, 0x3e, 0x55, 0x15, 0x73, 0x14, 0x53,
	0xac, 0x7c, 0x89, 0x07, 0xb3, 0x1b, 0x94, 0x10, 0xea, 0x7f, 0x02, 0x10, 0x01, 0x4f, 0x65, 0x4f,
	0xf6, 0xc8, 0x1b, 0x9d, 0xf4, 0x4c, 0xc2, 0x0b, 0xa9, 0xd3, 0xe3, 0x31, 0xe3, 0xd1, 0x23, 0x15,
	0x28, 0xc7, 0xd5, 0x7f, 0x0a, 0x35, 0x0a, 0x3a, 0xe5, 0xd9, 0xe0, 0xf2, 0x66, 0x8f, 0x62, 0x88,
	0xbc, 0x7b, 0xe4, 0x6d, 0xc2, 0x06, 0x9a, 0xf8, 0x68, 0x48, 0xa2, 0x79, 0xf1, 0x6a, 0xe1, 0x0b,
	0x68, 0x49, 0x60, 0xf2, 0x46, 0xc8, 0x3c, 0x40, 0x0e, 0xb7, 0x68, 0xa4, 0x81, 0x15, 0x06, 0xb9,
	0x23, 0xcf, 0x1f, 0x32, 0x2f, 0xa7, 0x61, 0x88, 0xb6, 0x3e, 0x20, 0xcf, 0x3d, 0xe3, 0xa4, 0xd9,
	0xc2, 0x37, 0xa0, 0x6d, 0x49, 0xf0, 0xdc, 0xea, 0x89, 0x44, 0xc0, 0x88, 0x8d, 0xd2, 0x7f, 0xce,
	0x43, 0x58, 0x19, 0x85, 0x1d, 0x94, 0x47, 0xd0, 0x92, 0x70, 0x99, 0x0d, 0x98, 0x3d, 0x81, 0x3c,
	0x28, 0x8a, 0x5f, 0x63, 0xf4, 0x99, 0xb6, 0x9c, 0xc0, 0x79, 0xc9, 0x30, 0xf9, 0xf6, 0xf0, 0x4b,
	0xdb, 0xb5, 0xf2, 0xd4, 0xe6, 0x31, 0xb4, 0xcc, 0xc3, 0x43, 0x9f, 0xbc, 0x59, 0x60, 0x7b, 0xd3,
	0xb9, 0x77, 0x5d, 0x55, 0x63, 0xf3, 0xed, 0xe1, 0x5a, 0x84, 0x6d, 0xc8, 0x43, 0xf5, 0x8b, 0x31,
	0x5b, 0x2b, 0xa6, 0x66, 0x8c, 0xdd, 0xe5, 0x45, 0xda, 0x42, 0x6c, 0x45, 0x05, 0xd9, 0x0c, 0x52,
	0xf4, 0x45, 0x4b, 0xd4, 0x91, 0x78, 0xd1, 0x12, 0xeb, 0x88, 0x5e, 0xb4, 0x1c, 0xdb, 0xae, 0x95,
	0xff, 0xa2, 0x45, 0x9a, 0x8a, 0x62, 0xeb, 0xbf, 0x00, 0x88, 0x80, 0xbf, 0x66, 0xf1, 0x1d, 0x47,
	0x57, 0x06, 0xc5, 0x9c, 0xf1, 0xbe, 0x39, 0x2b, 0xbd, 0x44, 0x55, 0xa1, 0x22, 0xab, 0x82, 0xb0,
	0x02, 0x55, 0x29, 0xb3, 0x2a, 0x5b, 0x7c, 0x3e, 0x19, 0x13, 0xee, 0x17, 0xc4, 0x58, 0x52, 0x60,
	0x90, 0xff, 0x32, 0x77, 0x99, 0x0b, 0x95, 0xbd, 0x5b, 0xa6, 0x32, 0xfb, 0x15, 0x2d, 0x97, 0x0b,
	0x0a, 0x6c, 0x07, 0xf6, 0xd2, 0xc5, 0xd2, 0x8f, 0x73, 0x0a, 0xda, 0xf2, 0x58, 0x11, 0x4a, 0xb0,
	0x08, 0x22, 0x22, 0xd4, 0x3f, 0x80, 0x4e, 0xbc, 0x33, 0xc3, 0x0e, 0x7e, 0x1a, 0x77, 0x5d, 0xaf,
	0xcd, 0x8a, 0x56, 0xc8, 0xd4, 0x92, 0xb5, 0xfc, 0x59, 0x54, 0xa4, 0x63, 0xbd, 0x99, 0x5b, 0x72,
	0x1f, 0xea, 0x63, 0xda, 0xcd, 0x4c, 0xfc, 0x85, 0x9c, 0x53, 0x60, 0x70, 0x5c, 0xfd, 0x31, 0xd4,
	0x28, 0x48, 0xec, 0x69, 0x29, 0x6b, 0x4f, 0xcb, 0x99, 0x7b, 0x5a, 0x91, 0xf7, 0x74, 0x00, 0x2d,
	0x12, 0xff, 0xe4, 0x1c, 0x9b, 0x2e, 0x54, 0xc2, 0xd0, 0x61, 0xaf, 0x48, 0xf1, 0x4f, 0xee, 0xb5,
	0x55, 0x32, 0xbd, 0xb6, 0xb9, 0xb8, 0xd7, 0xf6, 0x39, 0xb4, 0xe9, 0x04, 0x6c, 0x4b, 0xb3, 0xbd,
	0x49, 0xc9, 0x43, 0x2c, 0xc7, 0x3c, 0x44, 0xfd, 0x19, 0x2c, 0x6e, 0xbe, 0x09, 0x91, 0x6b, 0x9d,
	0x9e, 0x4d, 0x31, 0x55, 0x45, 0x9a, 0x4a, 0x7f, 0x00, 0xf3, 0xfb, 0xae, 0x33, 0x83, 0x98, 0x18,
	0x5a, 0x96, 0x87, 0x76, 0xa1, 0xc3, 0x87, 0xb2, 0x83, 0xbf, 0x4c, 0x9f, 0x5d, 0xd9, 0xe1, 0xd1,
	0x11, 0x72, 0xb8, 0x6d, 0xd2, 0x77, 0xe9, 0x0b, 0x2b, 0x01, 0x65, 0x4b, 0xff, 0x2c, 0x5e, 0x60,
	0xbf, 0xae, 0xbc, 0x20, 0xad, 0xa9, 0x83, 0x2c, 0x91, 0x61, 0x63, 0xd5, 0xc1, 0x3f, 0x2a, 0xc3,
	0x62, 0xaa, 0x53, 0xa5, 0xe7, 0x92, 0xff, 0x49, 0xbd, 0xe1, 0xd8, 0x03, 0xcf, 0x4a, 0xe2, 0x81,
	0xe7, 0x2d, 0xe8, 0xa6, 0x1e, 0x7c, 0xd0, 0xdc, 0xec, 0x82, 0x95, 0xa8, 0x34, 0x5f, 0x85, 0xf9,
	0x89, 0x63, 0xba, 0xae, 0xed, 0x1e, 0x0e, 0x30, 0x5f, 0xcc, 0x75, 0x6f, 0x73, 0x20, 0x79, 0x02,
	0xf0, 0x0e, 0x80, 0x19, 0x04, 0xf6, 0xa1, 0x2b, 0xb9, 0xf1, 0x12, 0x04, 0xef, 0xf6, 0x64, 0x7a,
	0xe0, 0xd8, 0xc1, 0x11, 0x4f, 0xe8, 0xb0, 0x26, 0x79, 0xa0, 0xc9, 0xd7, 0x38, 0x38, 0x38, 0x61,
	0x51, 0x75, 0x4b, 0xc0, 0x1e, 0x9d, 0xe8, 0xab, 0xe4, 0x8d, 0xfe, 0x06, 0x72, 0xec, 0x57, 0xc8,
	0x37, 0x0f, 0x1c, 0xb4, 0xed, 0x8e, 0xbc, 0xbc, 0x94, 0xc9, 0x3f, 0x50, 0x37, 0x2c, 0x35, 0x82,
	0xed, 0xca, 0x6d, 0x58, 0x3c, 0x32, 0x83, 0x41, 0xb4, 0x2a, 0x77, 0x44, 0x1f, 0xf7, 0x35, 0x8c,
	0x85, 0x23, 0x33, 0x78, 0xce, 0x17, 0xe6, 0x8e, 0xbc, 0xd8, 0xea, 0xa5, 0x04, 0x98, 0x58, 0xfd,
	0x3e, 0x16, 0xff, 0x0d, 0x58, 0x88, 0xd6, 0x3a, 0x90, 0x9e, 0xee, 0x76, 0x22, 0x30, 0x41, 0xbc,
	0x04, 0x40, 0x5e, 0xf8, 0x52, 0x1c, 0xf6, 0x8a, 0x97, 0x40, 0x70, 0xb7, 0xfe, 0xaf, 0x25, 0x58,
	0xa2, 0xc5, 0xa4, 0xfd, 0x89, 0xe3, 0x99, 0xb9, 0x17, 0xf2, 0x15, 0x68, 0x0f, 0x3d, 0x37, 0x14,
	0xef, 0x4a, 0x29, 0x5f, 0x2d, 0x06, 0x23, 0xa1, 0xc9, 0xef, 0xc4, 0x32, 0xf7, 0xd9, 0xd5, 0xf8,
	0x8c, 0xe9, 0x92, 0xa1, 0xeb, 0xdb, 0x07, 0xa4, 0x9f, 0xc0, 0x72, 0x9c, 0x3e, 0xdb, 0x80, 0x28,
	0x48, 0x6f, 0x92, 0x20, 0x9d, 0x44, 0x96, 0x4e, 0x14, 0x59, 0x3a, 0xfa, 0x1f, 0x94, 0xc8, 0xe5,
	0x1d, 0x25, 0x05, 0xc4, 0x1d, 0x73, 0x31, 0x79, 0x41, 0x34, 0x25, 0x43, 0x4f, 0x76, 0x42, 0x8c,
	0x19, 0x48, 0xef, 0xb7, 0x3a, 0x11, 0x78, 0x07, 0x8b, 0xef, 0x2a, 0xcc, 0x5b, 0xde, 0x6b, 0x97,
	0x3c, 0xea, 0x70, 0x6c, 0xf7, 0x98, 0x3f, 0xe8, 0xe0, 0xc0, 0x27, 0xb6, 0x7b, 0xac, 0x1f, 0x10,
	0x47, 0x21, 0xc6, 0x04, 0x5b, 0xc1, 0xe3, 0x78, 0x36, 0x25, 0x4f, 0xbd, 0xa3, 0xe1, 0x1b, 0x28,
	0x34, 0x6d, 0x27, 0x88, 0x65, 0x54, 0xf4, 0x7f, 0x2e, 0xc1, 0x62, 0x0a, 0x85, 0x3c, 0x02, 0x94,
	0x8b, 0x64, 0x4d, 0xa9, 0xbe, 0x9f, 0xf5, 0xf2, 0x4e, 0x72, 0x9b, 0x2b, 0xf1, 0x34, 0x47, 0x6a,
	0xa1, 0x2c, 0xb2, 0x93, 0x17, 0x8a, 0xa7, 0x1b, 0xd9, 0x0e, 0x22, 0x64, 0xa9, 0x7a, 0x8b, 0x76,
	0xea, 0xa0, 0xd5, 0x52, 0x07, 0xed, 0xf6, 0x67, 0x00, 0xd1, 0xfb, 0x32, 0x6d, 0x1e, 0x9a, 0x4f,
	0x37, 0xf7, 0xd6, 0x06, 0x3b, 0xcf, 0x76, 0x36, 0xbb, 0xbf, 0xa5, 0x75, 0xa1, 0x4d, 0x9a, 0xdb,
	0x3b, 0xeb, 0x4f, 0xf6, 0x37, 0x36, 0xbb, 0x25, 0x81, 0xf0, 0x6c, 0xe7, 0xc9, 0xd7, 0xdd, 0xf2,
	0xed, 0x07, 0xb0, 0x98, 0xf2, 0x79, 0xb4, 0x06, 0xcc, 0xb1, 0xf1, 0x2d, 0xa8, 0x1b, 0x9b, 0xcf,
	0x9f, 0xac, 0xad, 0xb3, 0xa1, 0xdb, 0x3b, 0xeb, 0xc6, 0xe6, 0xd3, 0xcd, 0x9d, 0xbd, 0x6e, 0xf9,
	0xde, 0xff, 0x6a, 0xd0, 0x14, 0x17, 0xbb, 0xf6, 0xbb, 0x50, 0xd9, 0x42, 0xa1, 0x76, 0x43, 0xe5,
	0x2f, 0x24, 0x8a, 0x2b, 0xfd, 0x9b, 0xb3, 0x11, 0x85, 0x57, 0x52, 0x67, 0x0f, 0x9e, 0xb4, 0xab,
	0xf9, 0x4f, 0xb7, 0x28, 0xe5, 0x6b, 0xf9, 0x48, 0x8c, 0xea, 0xb7, 0x44, 0x6c, 0xec, 0xbd, 0x90,
	0x76, 0x5d, 0xc5, 0x4d, 0xfc, 0xd9, 0x52, 0xff, 0xc6, 0x4c, 0x3c, 0x46, 0xfe, 0x2b, 0xa8, 0xb1,
	0x82, 0x5f, 0x81, 0x3a, 0x70, 0xbf, 0x48, 0x5d, 0x17, 0x73, 0x1c, 0xd5, 0x88, 0x15, 0x1c, 0xa7,
	0xea, 0xd2, 0x0a, 0x8e, 0x33, 0x8a, 0xcd, 0x2f, 0xa1, 0xc1, 0x6b, 0xbd, 0xda, 0xb5, 0xbc, 0x9a,
	0xae, 0x20, 0xfd, 0xde, 0x0c, 0x2c, 0x46, 0xd8, 0x84, 0x1a, 0x0d, 0x13, 0xb4, 0xdb, 0xc5, 0x8b,
	0x6f, 0xfd, 0x3b, 0x85, 0x70, 0xd9, 0x14, 0xdf, 0x41, 0x4b, 0xaa, 0xca, 0x28, 0x0e, 0x61, 0xba,
	0x76, 0xa4, 0x38, 0x84, 0x59, 0x05, 0x9e, 0x3d, 0xa8, 0xb3, 0x72, 0x97, 0xe2, 0x10, 0xc6, 0xab,
	0x71, 0x8a, 0x43, 0x98, 0xa8, 0x98, 0x69, 0x3b, 0x50, 0x25, 0x35, 0x2e, 0x2d, 0xbb, 0x8c, 0x20,
	0x57, 0xd3, 0xfa, 0x7a, 0x1e, 0x4a, 0xc4, 0x25, 0xb3, 0x05, 0x0a, 0x2e, 0xe3, 0x25, 0x0f, 0x05,
	0x97, 0xc9, 0x8a, 0xc7, 0xb7, 0xd0, 0xe0, 0xdf, 0xd1, 0xa8, 0xf5, 0x3b, 0xf1, 0x11, 0x91, 0x5a,
	0xbf, 0x53, 0x1f, 0xf8, 0xbc, 0x81, 0xc5, 0xd4, 0xd7, 0x3f, 0xda, 0x07, 0xaa, 0xe1, 0xaa, 0xaf,
	0x96, 0xfa, 0x1f, 0x9e, 0x62, 0x04, 0x9b, 0xf9, 0x1b, 0x68, 0x8a, 0x47, 0xe8, 0xda, 0x7b, 0xaa,
	0xf1, 0xb1, 0x97, 0xe4, 0xfd, 0xeb, 0xb3, 0xd0, 0x18, 0x6d, 0x57, 0xfa, 0x44, 0x97, 0x5b, 0x99,
	0xf7, 0xf3, 0xc7, 0x26, 0x6c, 0x4d, 0x51, 0x6c, 0x3a, 0x9f, 0x4d, 0xea, 0x59, 0xd2, 0xa7, 0xa4,
	0x0a, 0x6d, 0xcb, 0xfc, 0xe4, 0x55, 0xa1, 0x6d, 0x8a, 0x4f, 0x5b, 0x7d, 0xe9, 0x8b, 0x61, 0xfe,
	0x69, 0xa3, 0x76, 0x37, 0x9f, 0xdb, 0xc4, 0x77, 0xa4, 0xfd, 0x95, 0xa2, 0xe8, 0x81, 0xbc, 0x3c,
	0xe9, 0x35, 0x80, 0x7a, 0x79, 0xe9, 0x57, 0x09, 0xea, 0xe5, 0x65, 0x7d, 0x97, 0xf8, 0x25, 0x4b,
	0xc4, 0x5f, 0x56, 0x97, 0xaf, 0x18, 0xd9, 0x2b, 0x39, 0x18, 0xc2, 0xaa, 0x42, 0x14, 0x4f, 0x29,
	0x8c, 0x76, 0x2a, 0xe0, 0x2a, 0x42, 0x18, 0x5f, 0x30, 0x24, 0x38, 0x52, 0x5d, 0x30, 0x72, 0xd0,
	0xa5, 0xba, 0x60, 0x62, 0xd1, 0x15, 0xb6, 0xa2, 0x52, 0x1c, 0xa5, 0x56, 0xf5, 0x44, 0xfc, 0xa5,
	0x56, 0xf5, 0x54, 0x48, 0x36, 0xa5, 0xaf, 0xf4, 0xe3, 0xa1, 0x81, 0xa6, 0x3c, 0x0b, 0xd9, 0x51,
	0x47, 0x7f, 0xb5, 0x30, 0x3e, 0x9b, 0x76, 0x08, 0x6d, 0xd9, 0x15, 0xd6, 0x6e, 0x16, 0xf5, 0xc6,
	0xfb, 0xb7, 0x0a, 0x60, 0xc6, 0x4e, 0xa8, 0xe4, 0xaf, 0xaa, 0x4f, 0x68, 0xda, 0xb3, 0x56, 0x9f,
	0xd0, 0x0c, 0x07, 0xf8, 0xde, 0x7f, 0xd7, 0xa0, 0xce, 0x12, 0xc2, 0xda, 0x10, 0x1a, 0x3c, 0x4b,
	0xa4, 0x98, 0x30, 0xb3, 0xc8, 0xa1, 0x98, 0x30, 0xbb, 0xc4, 0xa0, 0x8d, 0xa0, 0x29, 0x52, 0xff,
	0x9a, 0xe2, 0x15, 0x52, 0x66, 0x09, 0x42, 0x61, 0xc4, 0x14, 0x75, 0x04, 0x6d, 0x8f, 0x3a, 0x91,
	0x6a, 0x53, 0x1c, 0xa3, 0x7d, 0x7d, 0x16, 0x1a, 0xa3, 0xfa, 0x4b, 0x68, 0xcb, 0xa9, 0x74, 0x6d,
	0xf5, 0x94, 0x79, 0xfd, 0xfe, 0x07, 0xc5, 0x07, 0xb0, 0x29, 0x3d, 0xe8, 0x26, 0x6b, 0x4f, 0x0a,
	0xeb, 0xaf, 0xa8, 0xb1, 0xf5, 0xef, 0x16, 0xc4, 0x16, 0x97, 0xe8, 0x52, 0x46, 0xb1, 0x4b, 0xb1,
	0x54, 0x75, 0xb9, 0x4d, 0xb1, 0xd4, 0x9c, 0x3a, 0x9a, 0xe6, 0x90, 0x27, 0x12, 0x72, 0xae, 0x5e,
	0xbb, 0xa3, 0x56, 0xd0, 0x54, 0xb1, 0x40, 0x7d, 0xcd, 0x65, 0xa6, 0xff, 0x7d, 0x58, 0x4c, 0x25,
	0xd6, 0x15, 0x77, 0x8f, 0x2a, 0xc1, 0xaf, 0xb8, 0x7b, 0x94, 0xf9, 0xfa, 0x7b, 0xbf, 0xaa, 0x41,
	0x93, 0xbf, 0x27, 0xc6, 0x0a, 0xd7, 0x96, 0x3f, 0x03, 0x53, 0x18, 0x93, 0x8c, 0x8f, 0xd0, 0x14,
	0xc6, 0x24, 0xeb, 0x9b, 0x32, 0x66, 0x8a, 0xc5, 0x55, 0x7e, 0x23, 0xff, 0xb6, 0x8c, 0xee, 0xf1,
	0x9b, 0xb3, 0x11, 0xa3, 0x13, 0x9a, 0xfc, 0x58, 0x4b, 0x71, 0x42, 0x15, 0x1f, 0xb7, 0x29, 0x4e,
	0xa8, 0xea, 0x0b, 0x30, 0x3c, 0x61, 0xf2, 0xf3, 0x2d, 0xc5, 0x84, 0x8a, 0x0f, 0xc5, 0x14, 0x13,
	0xaa, 0xbe, 0x09, 0x63, 0x06, 0x59, 0xfa, 0x76, 0x56, 0x6d, 0x90, 0xd3, 0x5f, 0xde, 0xaa, 0x0d,
	0x72, 0xd6, 0xc7, 0xb8, 0xdf, 0x41, 0x4b, 0xfa, 0x4a, 0x54, 0xb1, 0x5d, 0xe9, 0xaf, 0x69, 0x15,
	0xdb, 0x95, 0xf1, 0xc1, 0x29, 0xbf, 0x9b, 0xf3, 0x67, 0xd8, 0x2a, 0x3a, 0x43, 0xd6, 0x07, 0xa9,
	0x36, 0x74, 0xe2, 0x5f, 0x79, 0xe6, 0x86, 0x6b, 0xc9, 0x79, 0xee, 0x14, 0xc2, 0x65, 0x0a, 0xf5,
	0x57, 0x73, 0x50, 0xe7, 0x69, 0x7a, 0x0f, 0xda, 0xdc, 0xba, 0x90, 0x02, 0xce, 0xca, 0x2c, 0x03,
	0x14, 0x2f, 0x4c, 0xf5, 0x57, 0x0b, 0xe3, 0x8b, 0x75, 0x02, 0x65, 0x8b, 0x4c, 0x97, 0x77, 0x02,
	0xd3, 0x93, 0xdd, 0x2d, 0x88, 0x2d, 0xfc, 0x8e, 0xc6, 0x16, 0x0a, 0x49, 0x95, 0x4b, 0x7d, 0xf6,
	0xd2, 0x35, 0x32, 0xf5, 0xd9, 0xcb, 0x2a, 0x9b, 0xd9, 0xd0, 0x89, 0xaf, 0x76, 0x86, 0x1b, 0x10,
	0x2b, 0x5c, 0xcd, 0x70, 0x03, 0xe2, 0x75, 0x27, 0x96, 0x33, 0xe1, 0x3b, 0x77, 0x7d, 0x66, 0x69,
	0x68, 0x46, 0xce, 0x24, 0x51, 0x42, 0x7a, 0x74, 0xeb, 0x9b, 0x1b, 0x87, 0x76, 0x78, 0x34, 0x3d,
	0x58, 0x19, 0x7a, 0xe3, 0xd5, 0x30, 0x34, 0x0f, 0x56, 0xf9, 0xc8, 0xbb, 0xe6, 0xc4, 0x5e, 0x8d,
	0x46, 0x1f, 0xd4, 0xc8, 0xff, 0x41, 0xfa, 0xe8, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x20, 0x72,
	0xa2, 0x96, 0x4f, 0x49, 0x00, 0x00,
}
